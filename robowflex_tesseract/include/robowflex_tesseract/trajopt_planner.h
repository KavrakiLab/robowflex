/* Author: Carlos Quintero */

#ifndef ROBOWFLEX_TRAJOPT_PLANNER_
#define ROBOWFLEX_TRAJOPT_PLANNER_

#include <robowflex_library/class_forward.h>
#include <robowflex_library/builder.h>
#include <tesseract_planning/trajopt/trajopt_planner.h>
#include <tesseract_ros/ros_tesseract_utils.h>
#include <tesseract_ros/kdl/kdl_env.h>

namespace robowflex
{
    /** \cond IGNORE */
    ROBOWFLEX_CLASS_FORWARD(Robot);
    ROBOWFLEX_CLASS_FORWARD(Scene);
    ROBOWFLEX_CLASS_FORWARD(RobotTrajectory);
    ROBOWFLEX_CLASS_FORWARD(MotionRequestBuilder);
    /** \endcond */

    /** \cond IGNORE */
    ROBOWFLEX_CLASS_FORWARD(TrajOptPlanner);
    /** \endcond */

    /** \class robowflex::TrajOptPlannerPtr
        \brief A shared pointer wrapper for robowflex::TrajOptPlanner. */

    /** \class robowflex::TrajOptPlannerConstPtr
        \brief A const shared pointer wrapper for robowflex::TrajOptPlanner. */

    /** \brief Robowflex Tesseract TrajOpt Planner. 
        */
    class TrajOptPlanner
    {
    public:
        /** \brief Constructor.
            *  \param[in] robot Robot to plan for.
            *  \param[in] group_name Name of the group to plan for.
            */
        TrajOptPlanner(const RobotConstPtr &robot, const std::string &group_name);
        
        /** \brief Plan a motion given a \a request and a \a scene.
        *  \param[in] scene A planning scene for the same \a robot_ to compute the plan in.
        *  \param[in] request The motion planning request to solve.
        *  \return The (tesseract) planner response generated by the planner.
        */
        tesseract::tesseract_planning::PlannerResponse plan(const SceneConstPtr &scene,
                                                            const MotionRequestBuilderPtr &request);
        /** \brief Get the trajectory that resulted in the last call to plan().
        *  \return Trajectory.
        */
        robot_trajectory::RobotTrajectoryPtr getTrajectory();
        

    private:
        /** \brief Loads a new scene into the KDL env.
        *  \param[in] scene Scene to load.
        *  \param[in] name Name of the scene.
           \return True if env was correctly loaded from scene.
        */
        bool newEnvFromScene(const robowflex::SceneConstPtr &scene);
        
        /** \brief Updates the trajectory object based on the planner response.
        *  \param[in] response Tesseract planner response after calling solve()
        */
        void updateTrajFromTesseractResponse(const tesseract::tesseract_planning::PlannerResponse &response);
        
        RobotConstPtr robot_;                                            ///< Robot to plan for.
        robot_trajectory::RobotTrajectoryPtr trajectory_;                ///< Last trajectory generated by the planner.
        std::shared_ptr<tesseract::tesseract_ros::KDLEnv> env_;          ///< KDL environment.
        std::string group_;                                              ///< Name of group to plan for.

    };
} // namespace robowflex


#endif
