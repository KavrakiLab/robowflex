<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>aabb.cpp</name>
    <filename>aabb_8cpp</filename>
    <includes id="aabb_8h" name="aabb.h" local="no" imported="no">moveit/robot_model/aabb.h</includes>
  </compound>
  <compound kind="file">
    <name>aabb.h</name>
    <filename>aabb_8h</filename>
    <class kind="class">moveit::core::AABB</class>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
  </compound>
  <compound kind="file">
    <name>attached_body.cpp</name>
    <filename>attached__body_8cpp</filename>
    <includes id="attached__body_8h" name="attached_body.h" local="no" imported="no">moveit/robot_state/attached_body.h</includes>
  </compound>
  <compound kind="file">
    <name>attached_body.h</name>
    <filename>attached__body_8h</filename>
    <includes id="link__model_8h" name="link_model.h" local="no" imported="no">moveit/robot_model/link_model.h</includes>
    <class kind="class">moveit::core::AttachedBody</class>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
    <member kind="typedef">
      <type>boost::function&lt; void(AttachedBody *body, bool attached)&gt;</type>
      <name>AttachedBodyCallback</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a7e5071bd0525b17b00f373de2cad9e11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>background_processing.cpp</name>
    <filename>background__processing_8cpp</filename>
    <includes id="background__processing_8h" name="background_processing.h" local="no" imported="no">moveit/background_processing/background_processing.h</includes>
    <namespace>moveit</namespace>
    <namespace>moveit::tools</namespace>
  </compound>
  <compound kind="file">
    <name>background_processing.h</name>
    <filename>background__processing_8h</filename>
    <class kind="class">moveit::tools::BackgroundProcessing</class>
    <namespace>moveit</namespace>
    <namespace>moveit::tools</namespace>
  </compound>
  <compound kind="file">
    <name>backtrace.h</name>
    <filename>backtrace_8h</filename>
    <namespace>moveit</namespace>
    <member kind="function">
      <type>void</type>
      <name>get_backtrace</name>
      <anchorfile>namespacemoveit.html</anchorfile>
      <anchor>a17b4f138dac10a0e23296414a83ab9db</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>class_forward.h</name>
    <filename>class__forward_8h</filename>
    <includes id="declare__ptr_8h" name="declare_ptr.h" local="no" imported="no">moveit/macros/declare_ptr.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>class__forward_8h.html</anchorfile>
      <anchor>a04471aa92356ec073035b9c7fb07a0b9</anchor>
      <arglist>(C)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MOVEIT_STRUCT_FORWARD</name>
      <anchorfile>class__forward_8h.html</anchorfile>
      <anchor>a3f9a2bc56130dc3b0de48919c6697038</anchor>
      <arglist>(C)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_common.cpp</name>
    <filename>collision__common_8cpp</filename>
    <includes id="fcl_2include_2moveit_2collision__detection__fcl_2collision__common_8h" name="fcl/include/moveit/collision_detection_fcl/collision_common.h" local="no" imported="no">moveit/collision_detection_fcl/collision_common.h</includes>
    <class kind="struct">collision_detection::FCLShapeCache</class>
    <class kind="struct">collision_detection::IfSameType</class>
    <class kind="struct">collision_detection::IfSameType&lt; T, T &gt;</class>
    <namespace>collision_detection</namespace>
    <member kind="function">
      <type>void</type>
      <name>cleanCollisionGeometryCache</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a43b3c92b3fc1fb442d1c1f2e4827688e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>collisionCallback</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a929939c42d95906b566619981a737240</anchor>
      <arglist>(fcl::CollisionObject *o1, fcl::CollisionObject *o2, void *data)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>aa14c1f97a699dc074ce98f5aeb56684f</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, const robot_model::LinkModel *link, int shape_index)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a55cb01952ddf27ae49261f677a9a4086</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, const robot_state::AttachedBody *ab, int shape_index)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ac706c51ba1557858fb70e4fc0d2a65ab</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, const World::Object *obj)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a2a9ced5dca1015fe29861056b0e6916f</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, double scale, double padding, const robot_model::LinkModel *link, int shape_index)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a7b9a34d8ef1aeb3f5a626b17e1df2ce7</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, double scale, double padding, const robot_state::AttachedBody *ab, int shape_index)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a187f1af4ccb0d18afdfaad016a2afdd8</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, double scale, double padding, const World::Object *obj)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>af9040be8b971caa96ef8e2ed08aee0b6</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, const T *data, int shape_index)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a222326e69feb1f536e548ea60201fd3c</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, double scale, double padding, const T *data, int shape_index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>distanceCallback</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ae59ed6bd3e0a3e8dd0fec2dea71ca660</anchor>
      <arglist>(fcl::CollisionObject *o1, fcl::CollisionObject *o2, void *data, double &amp;min_dist)</arglist>
    </member>
    <member kind="function">
      <type>FCLShapeCache &amp;</type>
      <name>GetShapeCache</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a8e633c6b2e812149f7efb56bbf9c77d2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>include/moveit/collision_detection/collision_common.h</name>
    <filename>include_2moveit_2collision__detection_2collision__common_8h</filename>
    <includes id="robot__model_8h" name="robot_model.h" local="no" imported="no">moveit/robot_model/robot_model.h</includes>
    <class kind="struct">collision_detection::CollisionRequest</class>
    <class kind="struct">collision_detection::CollisionResult</class>
    <class kind="struct">collision_detection::Contact</class>
    <class kind="struct">collision_detection::CostSource</class>
    <class kind="struct">collision_detection::DistanceRequest</class>
    <class kind="struct">collision_detection::DistanceResult</class>
    <class kind="struct">collision_detection::DistanceResultsData</class>
    <namespace>collision_detection</namespace>
    <namespace>collision_detection::BodyTypes</namespace>
    <namespace>collision_detection::DistanceRequestTypes</namespace>
    <member kind="typedef">
      <type>BodyTypes::Type</type>
      <name>BodyType</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ab85879a36c3985b501b738ec7b0c70f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const std::pair&lt; std::string, std::string &gt;, std::vector&lt; DistanceResultsData &gt; &gt;</type>
      <name>DistanceMap</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>abf35ea00e5b1ddd01dfbbbf23982eeaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DistanceRequestTypes::DistanceRequestType</type>
      <name>DistanceRequestType</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a2fe3d329ac605e120161501efff75df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DistanceRequestType</name>
      <anchorfile>namespacecollision__detection_1_1DistanceRequestTypes.html</anchorfile>
      <anchor>ac754f7bfd3f776cb02a190e9a0fd893e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GLOBAL</name>
      <anchorfile>namespacecollision__detection_1_1DistanceRequestTypes.html</anchorfile>
      <anchor>ac754f7bfd3f776cb02a190e9a0fd893ea51e53133b5ca5b136dbef1be76ad6074</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SINGLE</name>
      <anchorfile>namespacecollision__detection_1_1DistanceRequestTypes.html</anchorfile>
      <anchor>ac754f7bfd3f776cb02a190e9a0fd893eaf042b2d1203de239d52771e4cb11b417</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIMITED</name>
      <anchorfile>namespacecollision__detection_1_1DistanceRequestTypes.html</anchorfile>
      <anchor>ac754f7bfd3f776cb02a190e9a0fd893eacf996e05973b28913b661031954f7f0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL</name>
      <anchorfile>namespacecollision__detection_1_1DistanceRequestTypes.html</anchorfile>
      <anchor>ac754f7bfd3f776cb02a190e9a0fd893ea4b6d1899c4b4626a9da91d05367be0c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>namespacecollision__detection_1_1BodyTypes.html</anchorfile>
      <anchor>a535aa0dbc0658eb6df97052b3d85bada</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROBOT_LINK</name>
      <anchorfile>namespacecollision__detection_1_1BodyTypes.html</anchorfile>
      <anchor>a535aa0dbc0658eb6df97052b3d85badaa4150f905f1002b2591a3427ec8b1a106</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROBOT_ATTACHED</name>
      <anchorfile>namespacecollision__detection_1_1BodyTypes.html</anchorfile>
      <anchor>a535aa0dbc0658eb6df97052b3d85badaa4e5121f1c790501abdbf81f9608dd554</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WORLD_OBJECT</name>
      <anchorfile>namespacecollision__detection_1_1BodyTypes.html</anchorfile>
      <anchor>a535aa0dbc0658eb6df97052b3d85badaac5018c5d5811fefd380a37e579104e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a706f274b9456bc36f6a97e2450470832</anchor>
      <arglist>(AllowedCollisionMatrix)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fcl/include/moveit/collision_detection_fcl/collision_common.h</name>
    <filename>fcl_2include_2moveit_2collision__detection__fcl_2collision__common_8h</filename>
    <includes id="world_8h" name="world.h" local="no" imported="no">moveit/collision_detection/world.h</includes>
    <includes id="collision__world_8h" name="collision_world.h" local="no" imported="no">moveit/collision_detection/collision_world.h</includes>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <class kind="struct">collision_detection::CollisionData</class>
    <class kind="struct">collision_detection::CollisionGeometryData</class>
    <class kind="struct">collision_detection::DistanceData</class>
    <class kind="struct">collision_detection::FCLGeometry</class>
    <class kind="struct">collision_detection::FCLManager</class>
    <class kind="struct">collision_detection::FCLObject</class>
    <namespace>collision_detection</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const fcl::CollisionObject &gt;</type>
      <name>FCLCollisionObjectConstPtr</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ae8ff3db6b443ad910cacba006094bf43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; fcl::CollisionObject &gt;</type>
      <name>FCLCollisionObjectPtr</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a1fd970aceecb4b4b363eb0e975e68f29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanCollisionGeometryCache</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a43b3c92b3fc1fb442d1c1f2e4827688e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>collisionCallback</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a929939c42d95906b566619981a737240</anchor>
      <arglist>(fcl::CollisionObject *o1, fcl::CollisionObject *o2, void *data)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>aa14c1f97a699dc074ce98f5aeb56684f</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, const robot_model::LinkModel *link, int shape_index)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a55cb01952ddf27ae49261f677a9a4086</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, const robot_state::AttachedBody *ab, int shape_index)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ac706c51ba1557858fb70e4fc0d2a65ab</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, const World::Object *obj)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a2a9ced5dca1015fe29861056b0e6916f</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, double scale, double padding, const robot_model::LinkModel *link, int shape_index)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a7b9a34d8ef1aeb3f5a626b17e1df2ce7</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, double scale, double padding, const robot_state::AttachedBody *ab, int shape_index)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a187f1af4ccb0d18afdfaad016a2afdd8</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, double scale, double padding, const World::Object *obj)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>distanceCallback</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ae59ed6bd3e0a3e8dd0fec2dea71ca660</anchor>
      <arglist>(fcl::CollisionObject *o1, fcl::CollisionObject *o2, void *data, double &amp;min_dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fcl2contact</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ae00433940f9ca689634368451912d9f7</anchor>
      <arglist>(const fcl::Contact &amp;fc, Contact &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fcl2costsource</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ade7cc36d36e080791e09ade8b44d9823</anchor>
      <arglist>(const fcl::CostSource &amp;fcs, CostSource &amp;cs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a6b40947c9fab08683b1606a7ac836809</anchor>
      <arglist>(CollisionGeometryData)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a577473fbac94a7f2e1f1369c675caa65</anchor>
      <arglist>(FCLGeometry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform2fcl</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ac62f07a0d167ce0255db6ab31b9506bb</anchor>
      <arglist>(const Eigen::Isometry3d &amp;b, fcl::Transform3f &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>fcl::Transform3f</type>
      <name>transform2fcl</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a65033c779e897cf789d2be527fc26be2</anchor>
      <arglist>(const Eigen::Isometry3d &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_detector_allocator.h</name>
    <filename>collision__detector__allocator_8h</filename>
    <includes id="collision__robot_8h" name="collision_robot.h" local="no" imported="no">moveit/collision_detection/collision_robot.h</includes>
    <includes id="collision__world_8h" name="collision_world.h" local="no" imported="no">moveit/collision_detection/collision_world.h</includes>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <class kind="class">collision_detection::CollisionDetectorAllocator</class>
    <class kind="class">collision_detection::CollisionDetectorAllocatorTemplate</class>
    <namespace>collision_detection</namespace>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a5434606466e8a582df50ea624b2857be</anchor>
      <arglist>(CollisionDetectorAllocator)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_detector_allocator_allvalid.h</name>
    <filename>collision__detector__allocator__allvalid_8h</filename>
    <includes id="collision__detector__allocator_8h" name="collision_detector_allocator.h" local="no" imported="no">moveit/collision_detection/collision_detector_allocator.h</includes>
    <includes id="collision__robot__allvalid_8h" name="collision_robot_allvalid.h" local="no" imported="no">moveit/collision_detection/allvalid/collision_robot_allvalid.h</includes>
    <includes id="collision__world__allvalid_8h" name="collision_world_allvalid.h" local="no" imported="no">moveit/collision_detection/allvalid/collision_world_allvalid.h</includes>
    <class kind="class">collision_detection::CollisionDetectorAllocatorAllValid</class>
    <namespace>collision_detection</namespace>
  </compound>
  <compound kind="file">
    <name>collision_detector_allocator_fcl.h</name>
    <filename>collision__detector__allocator__fcl_8h</filename>
    <includes id="collision__detector__allocator_8h" name="collision_detector_allocator.h" local="no" imported="no">moveit/collision_detection/collision_detector_allocator.h</includes>
    <includes id="collision__robot__fcl_8h" name="collision_robot_fcl.h" local="no" imported="no">moveit/collision_detection_fcl/collision_robot_fcl.h</includes>
    <includes id="collision__world__fcl_8h" name="collision_world_fcl.h" local="no" imported="no">moveit/collision_detection_fcl/collision_world_fcl.h</includes>
    <class kind="class">collision_detection::CollisionDetectorAllocatorFCL</class>
    <namespace>collision_detection</namespace>
  </compound>
  <compound kind="file">
    <name>collision_matrix.cpp</name>
    <filename>collision__matrix_8cpp</filename>
    <includes id="collision__matrix_8h" name="collision_matrix.h" local="no" imported="no">moveit/collision_detection/collision_matrix.h</includes>
    <namespace>collision_detection</namespace>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>andDecideContact</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a26a68a48af0afc8363d6053ba65b11d9</anchor>
      <arglist>(const DecideContactFn &amp;f1, const DecideContactFn &amp;f2, Contact &amp;contact)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_matrix.h</name>
    <filename>collision__matrix_8h</filename>
    <includes id="include_2moveit_2collision__detection_2collision__common_8h" name="include/moveit/collision_detection/collision_common.h" local="no" imported="no">moveit/collision_detection/collision_common.h</includes>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <class kind="class">collision_detection::AllowedCollisionMatrix</class>
    <namespace>collision_detection</namespace>
    <namespace>collision_detection::AllowedCollision</namespace>
    <member kind="typedef">
      <type>boost::function&lt; bool(collision_detection::Contact &amp;)&gt;</type>
      <name>DecideContactFn</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a6a9d9bee3fd5dd0c15697565d76b8b02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>namespacecollision__detection_1_1AllowedCollision.html</anchorfile>
      <anchor>a8f4b01d9c2bf6843a65389a35296d93b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEVER</name>
      <anchorfile>namespacecollision__detection_1_1AllowedCollision.html</anchorfile>
      <anchor>a8f4b01d9c2bf6843a65389a35296d93ba7d59beeffde8a1c49cdf5956759554df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALWAYS</name>
      <anchorfile>namespacecollision__detection_1_1AllowedCollision.html</anchorfile>
      <anchor>a8f4b01d9c2bf6843a65389a35296d93baf0f44fbcf1e0f51dd8319483e4d0cfc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONDITIONAL</name>
      <anchorfile>namespacecollision__detection_1_1AllowedCollision.html</anchorfile>
      <anchor>a8f4b01d9c2bf6843a65389a35296d93ba4e92c053fbf11174a4e65394f3520321</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a706f274b9456bc36f6a97e2450470832</anchor>
      <arglist>(AllowedCollisionMatrix)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_octomap_filter.cpp</name>
    <filename>collision__octomap__filter_8cpp</filename>
    <includes id="include_2moveit_2collision__detection_2collision__common_8h" name="include/moveit/collision_detection/collision_common.h" local="no" imported="no">moveit/collision_detection/collision_common.h</includes>
    <includes id="collision__octomap__filter_8h" name="collision_octomap_filter.h" local="no" imported="no">moveit/collision_detection/collision_octomap_filter.h</includes>
    <includes id="collision__world_8h" name="collision_world.h" local="no" imported="no">moveit/collision_detection/collision_world.h</includes>
    <member kind="function">
      <type>bool</type>
      <name>findSurface</name>
      <anchorfile>collision__octomap__filter_8cpp.html</anchorfile>
      <anchor>afae4306e128371a658e9cbef2b7485e0</anchor>
      <arglist>(const octomap::point3d_list &amp;cloud, const double &amp;spacing, const double &amp;iso_value, const double &amp;r_multiple, const octomath::Vector3 &amp;seed, octomath::Vector3 &amp;surface_point, octomath::Vector3 &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getMetaballSurfaceProperties</name>
      <anchorfile>collision__octomap__filter_8cpp.html</anchorfile>
      <anchor>a9ced1391e20e8d818dc8b8675659d492</anchor>
      <arglist>(const octomap::point3d_list &amp;cloud, const double &amp;spacing, const double &amp;iso_value, const double &amp;r_multiple, const octomath::Vector3 &amp;contact_point, octomath::Vector3 &amp;normal, double &amp;depth, bool estimate_depth)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sampleCloud</name>
      <anchorfile>collision__octomap__filter_8cpp.html</anchorfile>
      <anchor>af063a1599b752cb6204c46cd0254b729</anchor>
      <arglist>(const octomap::point3d_list &amp;cloud, const double &amp;spacing, const double &amp;r_multiple, const octomath::Vector3 &amp;position, double &amp;intensity, octomath::Vector3 &amp;gradient)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_octomap_filter.h</name>
    <filename>collision__octomap__filter_8h</filename>
    <includes id="include_2moveit_2collision__detection_2collision__common_8h" name="include/moveit/collision_detection/collision_common.h" local="no" imported="no">moveit/collision_detection/collision_common.h</includes>
    <includes id="collision__world_8h" name="collision_world.h" local="no" imported="no">moveit/collision_detection/collision_world.h</includes>
    <namespace>collision_detection</namespace>
    <member kind="function">
      <type>int</type>
      <name>refineContactNormals</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a3c4bc63c18dd0694ceb984d5a9f2453a</anchor>
      <arglist>(const World::ObjectConstPtr &amp;object, CollisionResult &amp;res, double cell_bbx_search_distance=1.0, double allowed_angle_divergence=0.0, bool estimate_depth=false, double iso_value=0.5, double metaball_radius_multiple=1.5)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_plugin.h</name>
    <filename>collision__plugin_8h</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <includes id="collision__robot_8h" name="collision_robot.h" local="no" imported="no">moveit/collision_detection/collision_robot.h</includes>
    <includes id="collision__world_8h" name="collision_world.h" local="no" imported="no">moveit/collision_detection/collision_world.h</includes>
    <includes id="planning__scene_8h" name="planning_scene.h" local="no" imported="no">moveit/planning_scene/planning_scene.h</includes>
    <class kind="class">collision_detection::CollisionPlugin</class>
    <namespace>collision_detection</namespace>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a6268926e481d5a4e3a897e9b8dde4c4d</anchor>
      <arglist>(CollisionPlugin)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_robot.cpp</name>
    <filename>collision__robot_8cpp</filename>
    <includes id="collision__robot_8h" name="collision_robot.h" local="no" imported="no">moveit/collision_detection/collision_robot.h</includes>
    <namespace>collision_detection</namespace>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>validatePadding</name>
      <anchorfile>collision__robot_8cpp.html</anchorfile>
      <anchor>a62aba3616dc0625de2e7d2ae32fc24b8</anchor>
      <arglist>(double padding)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>validateScale</name>
      <anchorfile>collision__robot_8cpp.html</anchorfile>
      <anchor>a7abd7812d759f4ccdc8e42f973e6091a</anchor>
      <arglist>(double scale)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_robot.h</name>
    <filename>collision__robot_8h</filename>
    <includes id="collision__matrix_8h" name="collision_matrix.h" local="no" imported="no">moveit/collision_detection/collision_matrix.h</includes>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <includes id="robot__state_8h" name="robot_state.h" local="no" imported="no">moveit/robot_state/robot_state.h</includes>
    <class kind="class">collision_detection::CollisionRobot</class>
    <namespace>collision_detection</namespace>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ab56b1ec4372d595d99535e67b1e5cbc1</anchor>
      <arglist>(CollisionRobot)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_robot_allvalid.cpp</name>
    <filename>collision__robot__allvalid_8cpp</filename>
    <includes id="collision__robot__allvalid_8h" name="collision_robot_allvalid.h" local="no" imported="no">moveit/collision_detection/allvalid/collision_robot_allvalid.h</includes>
  </compound>
  <compound kind="file">
    <name>collision_robot_allvalid.h</name>
    <filename>collision__robot__allvalid_8h</filename>
    <includes id="collision__robot_8h" name="collision_robot.h" local="no" imported="no">moveit/collision_detection/collision_robot.h</includes>
    <class kind="class">collision_detection::CollisionRobotAllValid</class>
    <namespace>collision_detection</namespace>
  </compound>
  <compound kind="file">
    <name>collision_robot_fcl.cpp</name>
    <filename>collision__robot__fcl_8cpp</filename>
    <includes id="collision__robot__fcl_8h" name="collision_robot_fcl.h" local="no" imported="no">moveit/collision_detection_fcl/collision_robot_fcl.h</includes>
    <namespace>collision_detection</namespace>
  </compound>
  <compound kind="file">
    <name>collision_robot_fcl.h</name>
    <filename>collision__robot__fcl_8h</filename>
    <includes id="fcl_2include_2moveit_2collision__detection__fcl_2collision__common_8h" name="fcl/include/moveit/collision_detection_fcl/collision_common.h" local="no" imported="no">moveit/collision_detection_fcl/collision_common.h</includes>
    <class kind="class">collision_detection::CollisionRobotFCL</class>
    <namespace>collision_detection</namespace>
  </compound>
  <compound kind="file">
    <name>collision_tools.cpp</name>
    <filename>collision__tools_8cpp</filename>
    <includes id="collision__tools_8h" name="collision_tools.h" local="no" imported="no">moveit/collision_detection/collision_tools.h</includes>
    <namespace>collision_detection</namespace>
    <member kind="function">
      <type>void</type>
      <name>contactToMsg</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ab5b9de238ce8eab0ac37720e9bbccf43</anchor>
      <arglist>(const Contact &amp;contact, moveit_msgs::ContactInformation &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>costSourceToMsg</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>aeec7c91fb3ba8bd89d34bf2a4e5768b3</anchor>
      <arglist>(const CostSource &amp;cost_source, moveit_msgs::CostSource &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollisionMarkersFromContacts</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a80eb2fffc9ec5c73f90891485e67db8c</anchor>
      <arglist>(visualization_msgs::MarkerArray &amp;arr, const std::string &amp;frame_id, const CollisionResult::ContactMap &amp;con, const std_msgs::ColorRGBA &amp;color, const ros::Duration &amp;lifetime, const double radius=0.035)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollisionMarkersFromContacts</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a2f4f093913eaf25f5d06adcaa48f5d86</anchor>
      <arglist>(visualization_msgs::MarkerArray &amp;arr, const std::string &amp;frame_id, const CollisionResult::ContactMap &amp;con)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCostMarkers</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a113cda3bd4a71943b8029db17d62a864</anchor>
      <arglist>(visualization_msgs::MarkerArray &amp;arr, const std::string &amp;frame_id, std::set&lt; CostSource &gt; &amp;cost_sources)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCostMarkers</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a4555d9a536ea3d92d04b5c057123a9cf</anchor>
      <arglist>(visualization_msgs::MarkerArray &amp;arr, const std::string &amp;frame_id, std::set&lt; CostSource &gt; &amp;cost_sources, const std_msgs::ColorRGBA &amp;color, const ros::Duration &amp;lifetime)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSensorPositioning</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a8bfd0c3db0fa397f2ef2b55c1ef07cf5</anchor>
      <arglist>(geometry_msgs::Point &amp;point, const std::set&lt; CostSource &gt; &amp;cost_sources)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalCost</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a1a7139d8a209ebf3775f06811e041d60</anchor>
      <arglist>(const std::set&lt; CostSource &gt; &amp;cost_sources)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersectCostSources</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a80fba37a3cdb50045b6cd58286495a68</anchor>
      <arglist>(std::set&lt; CostSource &gt; &amp;cost_sources, const std::set&lt; CostSource &gt; &amp;a, const std::set&lt; CostSource &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCostSources</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a85f650ee9afe98373374c62bcae36aab</anchor>
      <arglist>(std::set&lt; CostSource &gt; &amp;cost_sources, const std::set&lt; CostSource &gt; &amp;cost_sources_to_remove, double overlap_fraction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeOverlapping</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ae7c92a8b63666610657571eedfd8aaab</anchor>
      <arglist>(std::set&lt; CostSource &gt; &amp;cost_sources, double overlap_fraction)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_tools.h</name>
    <filename>collision__tools_8h</filename>
    <includes id="include_2moveit_2collision__detection_2collision__common_8h" name="include/moveit/collision_detection/collision_common.h" local="no" imported="no">moveit/collision_detection/collision_common.h</includes>
    <namespace>collision_detection</namespace>
    <member kind="function">
      <type>void</type>
      <name>contactToMsg</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ab5b9de238ce8eab0ac37720e9bbccf43</anchor>
      <arglist>(const Contact &amp;contact, moveit_msgs::ContactInformation &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>costSourceToMsg</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>aeec7c91fb3ba8bd89d34bf2a4e5768b3</anchor>
      <arglist>(const CostSource &amp;cost_source, moveit_msgs::CostSource &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollisionMarkersFromContacts</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a80eb2fffc9ec5c73f90891485e67db8c</anchor>
      <arglist>(visualization_msgs::MarkerArray &amp;arr, const std::string &amp;frame_id, const CollisionResult::ContactMap &amp;con, const std_msgs::ColorRGBA &amp;color, const ros::Duration &amp;lifetime, const double radius=0.035)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollisionMarkersFromContacts</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a2f4f093913eaf25f5d06adcaa48f5d86</anchor>
      <arglist>(visualization_msgs::MarkerArray &amp;arr, const std::string &amp;frame_id, const CollisionResult::ContactMap &amp;con)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCostMarkers</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a113cda3bd4a71943b8029db17d62a864</anchor>
      <arglist>(visualization_msgs::MarkerArray &amp;arr, const std::string &amp;frame_id, std::set&lt; CostSource &gt; &amp;cost_sources)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCostMarkers</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a4555d9a536ea3d92d04b5c057123a9cf</anchor>
      <arglist>(visualization_msgs::MarkerArray &amp;arr, const std::string &amp;frame_id, std::set&lt; CostSource &gt; &amp;cost_sources, const std_msgs::ColorRGBA &amp;color, const ros::Duration &amp;lifetime)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSensorPositioning</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a8bfd0c3db0fa397f2ef2b55c1ef07cf5</anchor>
      <arglist>(geometry_msgs::Point &amp;point, const std::set&lt; CostSource &gt; &amp;cost_sources)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalCost</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a1a7139d8a209ebf3775f06811e041d60</anchor>
      <arglist>(const std::set&lt; CostSource &gt; &amp;cost_sources)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersectCostSources</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a80fba37a3cdb50045b6cd58286495a68</anchor>
      <arglist>(std::set&lt; CostSource &gt; &amp;cost_sources, const std::set&lt; CostSource &gt; &amp;a, const std::set&lt; CostSource &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCostSources</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a85f650ee9afe98373374c62bcae36aab</anchor>
      <arglist>(std::set&lt; CostSource &gt; &amp;cost_sources, const std::set&lt; CostSource &gt; &amp;cost_sources_to_remove, double overlap_fraction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeOverlapping</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ae7c92a8b63666610657571eedfd8aaab</anchor>
      <arglist>(std::set&lt; CostSource &gt; &amp;cost_sources, double overlap_fraction)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_world.cpp</name>
    <filename>collision__world_8cpp</filename>
    <includes id="collision__world_8h" name="collision_world.h" local="no" imported="no">moveit/collision_detection/collision_world.h</includes>
    <namespace>collision_detection</namespace>
  </compound>
  <compound kind="file">
    <name>collision_world.h</name>
    <filename>collision__world_8h</filename>
    <includes id="collision__matrix_8h" name="collision_matrix.h" local="no" imported="no">moveit/collision_detection/collision_matrix.h</includes>
    <includes id="collision__robot_8h" name="collision_robot.h" local="no" imported="no">moveit/collision_detection/collision_robot.h</includes>
    <includes id="world_8h" name="world.h" local="no" imported="no">moveit/collision_detection/world.h</includes>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <class kind="class">collision_detection::CollisionWorld</class>
    <namespace>collision_detection</namespace>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a8735c611ba512170408e5d69022cc74c</anchor>
      <arglist>(CollisionWorld)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_world_allvalid.cpp</name>
    <filename>collision__world__allvalid_8cpp</filename>
    <includes id="collision__world__allvalid_8h" name="collision_world_allvalid.h" local="no" imported="no">moveit/collision_detection/allvalid/collision_world_allvalid.h</includes>
    <includes id="collision__detector__allocator__allvalid_8h" name="collision_detector_allocator_allvalid.h" local="no" imported="no">moveit/collision_detection/allvalid/collision_detector_allocator_allvalid.h</includes>
  </compound>
  <compound kind="file">
    <name>collision_world_allvalid.h</name>
    <filename>collision__world__allvalid_8h</filename>
    <includes id="collision__world_8h" name="collision_world.h" local="no" imported="no">moveit/collision_detection/collision_world.h</includes>
    <class kind="class">collision_detection::CollisionWorldAllValid</class>
    <namespace>collision_detection</namespace>
  </compound>
  <compound kind="file">
    <name>collision_world_fcl.cpp</name>
    <filename>collision__world__fcl_8cpp</filename>
    <includes id="collision__world__fcl_8h" name="collision_world_fcl.h" local="no" imported="no">moveit/collision_detection_fcl/collision_world_fcl.h</includes>
    <includes id="collision__detector__allocator__fcl_8h" name="collision_detector_allocator_fcl.h" local="no" imported="no">moveit/collision_detection_fcl/collision_detector_allocator_fcl.h</includes>
    <namespace>collision_detection</namespace>
  </compound>
  <compound kind="file">
    <name>collision_world_fcl.h</name>
    <filename>collision__world__fcl_8h</filename>
    <includes id="collision__robot__fcl_8h" name="collision_robot_fcl.h" local="no" imported="no">moveit/collision_detection_fcl/collision_robot_fcl.h</includes>
    <class kind="class">collision_detection::CollisionWorldFCL</class>
    <namespace>collision_detection</namespace>
  </compound>
  <compound kind="file">
    <name>console_colors.h</name>
    <filename>console__colors_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MOVEIT_CONSOLE_COLOR_BLUE</name>
      <anchorfile>console__colors_8h.html</anchorfile>
      <anchor>a0f646276ce8f87d71714512be38161d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MOVEIT_CONSOLE_COLOR_BROWN</name>
      <anchorfile>console__colors_8h.html</anchorfile>
      <anchor>ad16dcdc4cdef34c803090dce53e0eead</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MOVEIT_CONSOLE_COLOR_CYAN</name>
      <anchorfile>console__colors_8h.html</anchorfile>
      <anchor>a4c8b7e5b8c82147a00464e5f2f1599cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MOVEIT_CONSOLE_COLOR_GRAY</name>
      <anchorfile>console__colors_8h.html</anchorfile>
      <anchor>abc9fa53676b1474b9f553f49e496815a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MOVEIT_CONSOLE_COLOR_GREEN</name>
      <anchorfile>console__colors_8h.html</anchorfile>
      <anchor>a107e352abeddb266b1af4c515275d482</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MOVEIT_CONSOLE_COLOR_PURPLE</name>
      <anchorfile>console__colors_8h.html</anchorfile>
      <anchor>a7ee81e7591540db9ec0bd5a51a4bcc5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MOVEIT_CONSOLE_COLOR_RED</name>
      <anchorfile>console__colors_8h.html</anchorfile>
      <anchor>afa93ce13f59da17d373eeb4ab69c6a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MOVEIT_CONSOLE_COLOR_RESET</name>
      <anchorfile>console__colors_8h.html</anchorfile>
      <anchor>a367a4256b31925a96d887cbf104e6151</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MOVEIT_CONSOLE_COLOR_YELLOW</name>
      <anchorfile>console__colors_8h.html</anchorfile>
      <anchor>a3984974b58706252c2a399febacc3a53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>constraint_representation.dox</name>
    <filename>constraint__representation_8dox</filename>
  </compound>
  <compound kind="file">
    <name>constraint_sampler.cpp</name>
    <filename>constraint__sampler_8cpp</filename>
    <includes id="constraint__sampler_8h" name="constraint_sampler.h" local="no" imported="no">moveit/constraint_samplers/constraint_sampler.h</includes>
  </compound>
  <compound kind="file">
    <name>constraint_sampler.h</name>
    <filename>constraint__sampler_8h</filename>
    <includes id="planning__scene_8h" name="planning_scene.h" local="no" imported="no">moveit/planning_scene/planning_scene.h</includes>
    <includes id="kinematic__constraint_8h" name="kinematic_constraint.h" local="no" imported="no">moveit/kinematic_constraints/kinematic_constraint.h</includes>
    <class kind="class">constraint_samplers::ConstraintSampler</class>
    <namespace>constraint_samplers</namespace>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceconstraint__samplers.html</anchorfile>
      <anchor>a2c3bf8e05114a1f6523928c71750a7eb</anchor>
      <arglist>(ConstraintSampler)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>constraint_sampler_allocator.h</name>
    <filename>constraint__sampler__allocator_8h</filename>
    <includes id="constraint__sampler_8h" name="constraint_sampler.h" local="no" imported="no">moveit/constraint_samplers/constraint_sampler.h</includes>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <class kind="class">constraint_samplers::ConstraintSamplerAllocator</class>
    <namespace>constraint_samplers</namespace>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceconstraint__samplers.html</anchorfile>
      <anchor>a7ca7f2f0f29d2d2e6c182a63c1b0be81</anchor>
      <arglist>(ConstraintSamplerAllocator)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>constraint_sampler_manager.cpp</name>
    <filename>constraint__sampler__manager_8cpp</filename>
    <includes id="constraint__sampler__manager_8h" name="constraint_sampler_manager.h" local="no" imported="no">moveit/constraint_samplers/constraint_sampler_manager.h</includes>
    <includes id="default__constraint__samplers_8h" name="default_constraint_samplers.h" local="no" imported="no">moveit/constraint_samplers/default_constraint_samplers.h</includes>
    <includes id="union__constraint__sampler_8h" name="union_constraint_sampler.h" local="no" imported="no">moveit/constraint_samplers/union_constraint_sampler.h</includes>
  </compound>
  <compound kind="file">
    <name>constraint_sampler_manager.h</name>
    <filename>constraint__sampler__manager_8h</filename>
    <includes id="constraint__sampler__allocator_8h" name="constraint_sampler_allocator.h" local="no" imported="no">moveit/constraint_samplers/constraint_sampler_allocator.h</includes>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <class kind="class">constraint_samplers::ConstraintSamplerManager</class>
    <namespace>constraint_samplers</namespace>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceconstraint__samplers.html</anchorfile>
      <anchor>a2ec8c37bd86626b716466c84d49c9383</anchor>
      <arglist>(ConstraintSamplerManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>constraint_sampler_tools.cpp</name>
    <filename>constraint__sampler__tools_8cpp</filename>
    <includes id="constraint__sampler__tools_8h" name="constraint_sampler_tools.h" local="no" imported="no">moveit/constraint_samplers/constraint_sampler_tools.h</includes>
    <includes id="constraint__sampler__manager_8h" name="constraint_sampler_manager.h" local="no" imported="no">moveit/constraint_samplers/constraint_sampler_manager.h</includes>
  </compound>
  <compound kind="file">
    <name>constraint_sampler_tools.h</name>
    <filename>constraint__sampler__tools_8h</filename>
    <includes id="constraint__sampler_8h" name="constraint_sampler.h" local="no" imported="no">moveit/constraint_samplers/constraint_sampler.h</includes>
    <namespace>constraint_samplers</namespace>
    <member kind="function">
      <type>double</type>
      <name>countSamplesPerSecond</name>
      <anchorfile>namespaceconstraint__samplers.html</anchorfile>
      <anchor>ae85b6041f95efb12e168c07c90134c29</anchor>
      <arglist>(const ConstraintSamplerPtr &amp;sampler, const robot_state::RobotState &amp;reference_state)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>countSamplesPerSecond</name>
      <anchorfile>namespaceconstraint__samplers.html</anchorfile>
      <anchor>a72fac81e1d29cdcfd774e8d3b8131e37</anchor>
      <arglist>(const moveit_msgs::Constraints &amp;constr, const planning_scene::PlanningSceneConstPtr &amp;scene, const std::string &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visualizeDistribution</name>
      <anchorfile>namespaceconstraint__samplers.html</anchorfile>
      <anchor>a110f5646222d688e1136aa2ea8e7b8eb</anchor>
      <arglist>(const ConstraintSamplerPtr &amp;sampler, const robot_state::RobotState &amp;reference_state, const std::string &amp;link_name, unsigned int sample_count, visualization_msgs::MarkerArray &amp;markers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visualizeDistribution</name>
      <anchorfile>namespaceconstraint__samplers.html</anchorfile>
      <anchor>a192eb468a288eb908b1e9ae48fd39e39</anchor>
      <arglist>(const moveit_msgs::Constraints &amp;constr, const planning_scene::PlanningSceneConstPtr &amp;scene, const std::string &amp;group, const std::string &amp;link_name, unsigned int sample_count, visualization_msgs::MarkerArray &amp;markers)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>constraint_samplers.dox</name>
    <filename>constraint__samplers_8dox</filename>
  </compound>
  <compound kind="file">
    <name>controller_manager.h</name>
    <filename>controller__manager_8h</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <class kind="struct">moveit_controller_manager::MoveItControllerManager::ControllerState</class>
    <class kind="struct">moveit_controller_manager::ExecutionStatus</class>
    <class kind="class">moveit_controller_manager::MoveItControllerHandle</class>
    <class kind="class">moveit_controller_manager::MoveItControllerManager</class>
    <namespace>moveit_controller_manager</namespace>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacemoveit__controller__manager.html</anchorfile>
      <anchor>a376bc193a5fe3e9abf20c7c403b64324</anchor>
      <arglist>(MoveItControllerHandle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacemoveit__controller__manager.html</anchorfile>
      <anchor>a75ebdc60840fc0e1751362f9d7cc74fb</anchor>
      <arglist>(MoveItControllerManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>conversions.cpp</name>
    <filename>conversions_8cpp</filename>
    <includes id="conversions_8h" name="conversions.h" local="no" imported="no">moveit/robot_state/conversions.h</includes>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
    <member kind="function">
      <type>void</type>
      <name>attachedBodiesToAttachedCollisionObjectMsgs</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a405a20cc3fbd3b75125de11ffff64109</anchor>
      <arglist>(const std::vector&lt; const AttachedBody * &gt; &amp;attached_bodies, std::vector&lt; moveit_msgs::AttachedCollisionObject &gt; &amp;attached_collision_objs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>jointStateToRobotState</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a4908f99a3b9854a11be76eb4c41eee64</anchor>
      <arglist>(const sensor_msgs::JointState &amp;joint_state, RobotState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>jointTrajPointToRobotState</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>aa8cbfe302005fd3203167fc04e50ac03</anchor>
      <arglist>(const trajectory_msgs::JointTrajectory &amp;trajectory, std::size_t point_id, RobotState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>robotStateMsgToRobotState</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a4c9f7d9832f39da9b6afea7081ea0546</anchor>
      <arglist>(const Transforms &amp;tf, const moveit_msgs::RobotState &amp;robot_state, RobotState &amp;state, bool copy_attached_bodies=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>robotStateMsgToRobotState</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a8e656bec1fe3ffa9c4a32cc8d5ee6274</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;robot_state, RobotState &amp;state, bool copy_attached_bodies=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotStateToJointStateMsg</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a05ca40d0135146ddf90d7f7f924dbff4</anchor>
      <arglist>(const RobotState &amp;state, sensor_msgs::JointState &amp;joint_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotStateToRobotStateMsg</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a7216db7b67dd756ef25beee831b50af1</anchor>
      <arglist>(const RobotState &amp;state, moveit_msgs::RobotState &amp;robot_state, bool copy_attached_bodies=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotStateToStream</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>aa43bf23fe4c8977687c932f8710d65c9</anchor>
      <arglist>(const RobotState &amp;state, std::ostream &amp;out, bool include_header=true, const std::string &amp;separator=&quot;,&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotStateToStream</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a59364c5f823c4aa5193b05bada6bcf69</anchor>
      <arglist>(const RobotState &amp;state, std::ostream &amp;out, const std::vector&lt; std::string &gt; &amp;joint_groups_ordering, bool include_header=true, const std::string &amp;separator=&quot;,&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>streamToRobotState</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>adfdd3b5f7c60f6a994225a3d6d9d3bfb</anchor>
      <arglist>(RobotState &amp;state, const std::string &amp;line, const std::string &amp;separator=&quot;,&quot;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moveit_msgs::CollisionObject *</type>
      <name>obj_</name>
      <anchorfile>conversions_8cpp.html</anchorfile>
      <anchor>a91d0ba28fe002443af14cc872f4282a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const geometry_msgs::Pose *</type>
      <name>pose_</name>
      <anchorfile>conversions_8cpp.html</anchorfile>
      <anchor>af0bee513dfb4aace1532b98a8436e189</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>conversions.h</name>
    <filename>conversions_8h</filename>
    <includes id="robot__state_8h" name="robot_state.h" local="no" imported="no">moveit/robot_state/robot_state.h</includes>
    <includes id="transforms_8h" name="transforms.h" local="no" imported="no">moveit/transforms/transforms.h</includes>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
    <member kind="function">
      <type>void</type>
      <name>attachedBodiesToAttachedCollisionObjectMsgs</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a405a20cc3fbd3b75125de11ffff64109</anchor>
      <arglist>(const std::vector&lt; const AttachedBody * &gt; &amp;attached_bodies, std::vector&lt; moveit_msgs::AttachedCollisionObject &gt; &amp;attached_collision_objs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>jointStateToRobotState</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a4908f99a3b9854a11be76eb4c41eee64</anchor>
      <arglist>(const sensor_msgs::JointState &amp;joint_state, RobotState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>jointTrajPointToRobotState</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>aa8cbfe302005fd3203167fc04e50ac03</anchor>
      <arglist>(const trajectory_msgs::JointTrajectory &amp;trajectory, std::size_t point_id, RobotState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>robotStateMsgToRobotState</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a4c9f7d9832f39da9b6afea7081ea0546</anchor>
      <arglist>(const Transforms &amp;tf, const moveit_msgs::RobotState &amp;robot_state, RobotState &amp;state, bool copy_attached_bodies=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>robotStateMsgToRobotState</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a8e656bec1fe3ffa9c4a32cc8d5ee6274</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;robot_state, RobotState &amp;state, bool copy_attached_bodies=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotStateToJointStateMsg</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a05ca40d0135146ddf90d7f7f924dbff4</anchor>
      <arglist>(const RobotState &amp;state, sensor_msgs::JointState &amp;joint_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotStateToRobotStateMsg</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a7216db7b67dd756ef25beee831b50af1</anchor>
      <arglist>(const RobotState &amp;state, moveit_msgs::RobotState &amp;robot_state, bool copy_attached_bodies=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotStateToStream</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>aa43bf23fe4c8977687c932f8710d65c9</anchor>
      <arglist>(const RobotState &amp;state, std::ostream &amp;out, bool include_header=true, const std::string &amp;separator=&quot;,&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotStateToStream</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a59364c5f823c4aa5193b05bada6bcf69</anchor>
      <arglist>(const RobotState &amp;state, std::ostream &amp;out, const std::vector&lt; std::string &gt; &amp;joint_groups_ordering, bool include_header=true, const std::string &amp;separator=&quot;,&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>streamToRobotState</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>adfdd3b5f7c60f6a994225a3d6d9d3bfb</anchor>
      <arglist>(RobotState &amp;state, const std::string &amp;line, const std::string &amp;separator=&quot;,&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>declare_ptr.h</name>
    <filename>declare__ptr_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MOVEIT_DECLARE_PTR</name>
      <anchorfile>declare__ptr_8h.html</anchorfile>
      <anchor>a889de2fecb541ea29e61c5340727bfa5</anchor>
      <arglist>(Name, Type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MOVEIT_DECLARE_PTR_MEMBER</name>
      <anchorfile>declare__ptr_8h.html</anchorfile>
      <anchor>a9ff328e8f50e3ba463dacc1f180e37fd</anchor>
      <arglist>(Type)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>default_constraint_samplers.cpp</name>
    <filename>default__constraint__samplers_8cpp</filename>
    <includes id="default__constraint__samplers_8h" name="default_constraint_samplers.h" local="no" imported="no">moveit/constraint_samplers/default_constraint_samplers.h</includes>
    <namespace>constraint_samplers</namespace>
  </compound>
  <compound kind="file">
    <name>default_constraint_samplers.h</name>
    <filename>default__constraint__samplers_8h</filename>
    <includes id="constraint__sampler_8h" name="constraint_sampler.h" local="no" imported="no">moveit/constraint_samplers/constraint_sampler.h</includes>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <class kind="class">constraint_samplers::IKConstraintSampler</class>
    <class kind="struct">constraint_samplers::IKSamplingPose</class>
    <class kind="class">constraint_samplers::JointConstraintSampler</class>
    <class kind="struct">constraint_samplers::JointConstraintSampler::JointInfo</class>
    <namespace>constraint_samplers</namespace>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceconstraint__samplers.html</anchorfile>
      <anchor>a5cfee558dd72c3f7438685906d0bb740</anchor>
      <arglist>(JointConstraintSampler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceconstraint__samplers.html</anchorfile>
      <anchor>a5789be593ae9935224c2d22c0448b05e</anchor>
      <arglist>(IKConstraintSampler)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>deprecation.h</name>
    <filename>deprecation_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MOVEIT_DEPRECATED</name>
      <anchorfile>deprecation_8h.html</anchorfile>
      <anchor>a158c110f9be48496d2b769ff1888639d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>distance_field.cpp</name>
    <filename>distance__field_8cpp</filename>
    <includes id="distance__field_8h" name="distance_field.h" local="no" imported="no">moveit/distance_field/distance_field.h</includes>
    <includes id="find__internal__points_8h" name="find_internal_points.h" local="no" imported="no">moveit/distance_field/find_internal_points.h</includes>
    <namespace>distance_field</namespace>
  </compound>
  <compound kind="file">
    <name>distance_field.h</name>
    <filename>distance__field_8h</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <includes id="deprecation_8h" name="deprecation.h" local="no" imported="no">moveit/macros/deprecation.h</includes>
    <includes id="voxel__grid_8h" name="voxel_grid.h" local="no" imported="no">moveit/distance_field/voxel_grid.h</includes>
    <class kind="class">distance_field::DistanceField</class>
    <namespace>distance_field</namespace>
    <namespace>octomap</namespace>
    <namespace>shapes</namespace>
    <member kind="enumeration">
      <type></type>
      <name>PlaneVisualizationType</name>
      <anchorfile>namespacedistance__field.html</anchorfile>
      <anchor>aff38864661c5d4cd4259255c6f2ba7c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XYPlane</name>
      <anchorfile>namespacedistance__field.html</anchorfile>
      <anchor>aff38864661c5d4cd4259255c6f2ba7c4a3b7317e04ca194cd26ad695bfe2e33ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XZPlane</name>
      <anchorfile>namespacedistance__field.html</anchorfile>
      <anchor>aff38864661c5d4cd4259255c6f2ba7c4ab65b01f80ca0f93e9396c0feaf4895a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YZPlane</name>
      <anchorfile>namespacedistance__field.html</anchorfile>
      <anchor>aff38864661c5d4cd4259255c6f2ba7c4a685282ccc6de430f974cba5a5568e21f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceshapes.html</anchorfile>
      <anchor>a108814a0910c33efcd0897cda420fbab</anchor>
      <arglist>(Shape)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacedistance__field.html</anchorfile>
      <anchor>a63a408622083b4e6ec8ba9944fb3b754</anchor>
      <arglist>(DistanceField)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dynamics_solver.cpp</name>
    <filename>dynamics__solver_8cpp</filename>
    <includes id="dynamics__solver_8h" name="dynamics_solver.h" local="no" imported="no">moveit/dynamics_solver/dynamics_solver.h</includes>
    <namespace>dynamics_solver</namespace>
  </compound>
  <compound kind="file">
    <name>dynamics_solver.h</name>
    <filename>dynamics__solver_8h</filename>
    <includes id="robot__state_8h" name="robot_state.h" local="no" imported="no">moveit/robot_state/robot_state.h</includes>
    <class kind="class">dynamics_solver::DynamicsSolver</class>
    <namespace>dynamics_solver</namespace>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacedynamics__solver.html</anchorfile>
      <anchor>af6fd7bb8b9ed820474384002888af730</anchor>
      <arglist>(DynamicsSolver)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>exceptions.cpp</name>
    <filename>exceptions_8cpp</filename>
    <includes id="exceptions_8h" name="exceptions.h" local="no" imported="no">moveit/exceptions/exceptions.h</includes>
  </compound>
  <compound kind="file">
    <name>exceptions.h</name>
    <filename>exceptions_8h</filename>
    <class kind="class">moveit::ConstructException</class>
    <class kind="class">moveit::Exception</class>
    <namespace>moveit</namespace>
  </compound>
  <compound kind="file">
    <name>find_internal_points.cpp</name>
    <filename>find__internal__points_8cpp</filename>
    <includes id="find__internal__points_8h" name="find_internal_points.h" local="no" imported="no">moveit/distance_field/find_internal_points.h</includes>
  </compound>
  <compound kind="file">
    <name>find_internal_points.h</name>
    <filename>find__internal__points_8h</filename>
    <namespace>distance_field</namespace>
    <member kind="function">
      <type>void</type>
      <name>findInternalPointsConvex</name>
      <anchorfile>namespacedistance__field.html</anchorfile>
      <anchor>a065dcdb8fe0b7ed297fb87a62afa2fbd</anchor>
      <arglist>(const bodies::Body &amp;body, double resolution, EigenSTL::vector_Vector3d &amp;points)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fixed_joint_model.cpp</name>
    <filename>fixed__joint__model_8cpp</filename>
    <includes id="fixed__joint__model_8h" name="fixed_joint_model.h" local="no" imported="no">moveit/robot_model/fixed_joint_model.h</includes>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
  </compound>
  <compound kind="file">
    <name>fixed_joint_model.h</name>
    <filename>fixed__joint__model_8h</filename>
    <includes id="joint__model_8h" name="joint_model.h" local="no" imported="no">moveit/robot_model/joint_model.h</includes>
    <class kind="class">moveit::core::FixedJointModel</class>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
  </compound>
  <compound kind="file">
    <name>floating_joint_model.cpp</name>
    <filename>floating__joint__model_8cpp</filename>
    <includes id="floating__joint__model_8h" name="floating_joint_model.h" local="no" imported="no">moveit/robot_model/floating_joint_model.h</includes>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
  </compound>
  <compound kind="file">
    <name>floating_joint_model.h</name>
    <filename>floating__joint__model_8h</filename>
    <includes id="joint__model_8h" name="joint_model.h" local="no" imported="no">moveit/robot_model/joint_model.h</includes>
    <class kind="class">moveit::core::FloatingJointModel</class>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
  </compound>
  <compound kind="file">
    <name>iterative_spline_parameterization.cpp</name>
    <filename>iterative__spline__parameterization_8cpp</filename>
    <includes id="iterative__spline__parameterization_8h" name="iterative_spline_parameterization.h" local="no" imported="no">moveit/trajectory_processing/iterative_spline_parameterization.h</includes>
    <includes id="conversions_8h" name="conversions.h" local="no" imported="no">moveit/robot_state/conversions.h</includes>
    <class kind="struct">trajectory_processing::SingleJointTrajectory</class>
    <namespace>trajectory_processing</namespace>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>adjust_two_positions</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>af0f3c6c85aeae2eedbcec5a9a4058c6b</anchor>
      <arglist>(const int n, const double dt[], double x[], double x1[], double x2[], const double x2_i, const double x2_f)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fit_cubic_spline</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>af02ace9917a648c816c69c0e283ba68b</anchor>
      <arglist>(const int n, const double dt[], const double x[], double x1[], double x2[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>fit_spline_and_adjust_times</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>a35aecca0f70fd0c99f1139123a5c7789</anchor>
      <arglist>(const int n, double dt[], const double x[], double x1[], double x2[], const double max_velocity, const double min_velocity, const double max_acceleration, const double min_acceleration, const double tfactor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>global_adjustment_factor</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>a6c76a0906f958439984bd71d40e03c36</anchor>
      <arglist>(const int n, double dt[], const double x[], double x1[], double x2[], const double max_velocity, const double min_velocity, const double max_acceleration, const double min_acceleration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalAdjustment</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>aa95ede4c8ef27d2bbde2f424721b3c06</anchor>
      <arglist>(std::vector&lt; SingleJointTrajectory &gt; &amp;t2, int num_joints, const int num_points, std::vector&lt; double &gt; &amp;time_diff)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init_times</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>aea2cad431a46d28d11d0351ded95f9bd</anchor>
      <arglist>(const int n, double dt[], const double x[], const double max_velocity, const double min_velocity)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>ALIMIT</name>
      <anchorfile>iterative__spline__parameterization_8cpp.html</anchorfile>
      <anchor>af525eac86b3143ab3730567fb8d8680b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>VLIMIT</name>
      <anchorfile>iterative__spline__parameterization_8cpp.html</anchorfile>
      <anchor>adef130abdbb8fcec07a3619fe962e059</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iterative_spline_parameterization.h</name>
    <filename>iterative__spline__parameterization_8h</filename>
    <includes id="robot__trajectory_8h" name="robot_trajectory.h" local="no" imported="no">moveit/robot_trajectory/robot_trajectory.h</includes>
    <class kind="class">trajectory_processing::IterativeSplineParameterization</class>
    <namespace>trajectory_processing</namespace>
  </compound>
  <compound kind="file">
    <name>iterative_time_parameterization.cpp</name>
    <filename>iterative__time__parameterization_8cpp</filename>
    <includes id="iterative__time__parameterization_8h" name="iterative_time_parameterization.h" local="no" imported="no">moveit/trajectory_processing/iterative_time_parameterization.h</includes>
    <includes id="conversions_8h" name="conversions.h" local="no" imported="no">moveit/robot_state/conversions.h</includes>
    <namespace>trajectory_processing</namespace>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DEFAULT_ACCEL_MAX</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>a6c7a69b98eb30a152d9515bcfa049993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DEFAULT_VEL_MAX</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>a1666aa88dc8ff71c0ad05b6d02f27325</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>ROUNDING_THRESHOLD</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>a0d999cdaed17f77bafb8a7b0fa24dd70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iterative_time_parameterization.h</name>
    <filename>iterative__time__parameterization_8h</filename>
    <includes id="robot__trajectory_8h" name="robot_trajectory.h" local="no" imported="no">moveit/robot_trajectory/robot_trajectory.h</includes>
    <class kind="class">trajectory_processing::IterativeParabolicTimeParameterization</class>
    <namespace>trajectory_processing</namespace>
  </compound>
  <compound kind="file">
    <name>joint_model.cpp</name>
    <filename>joint__model_8cpp</filename>
    <includes id="exceptions_8h" name="exceptions.h" local="no" imported="no">moveit/exceptions/exceptions.h</includes>
    <includes id="joint__model_8h" name="joint_model.h" local="no" imported="no">moveit/robot_model/joint_model.h</includes>
    <includes id="link__model_8h" name="link_model.h" local="no" imported="no">moveit/robot_model/link_model.h</includes>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a63aa00f41059a45cc5148f93ffc08f99</anchor>
      <arglist>(std::ostream &amp;out, const VariableBounds &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>joint_model.h</name>
    <filename>joint__model_8h</filename>
    <class kind="class">moveit::core::JointModel</class>
    <class kind="struct">moveit::core::VariableBounds</class>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
    <member kind="typedef">
      <type>std::map&lt; std::string, JointModel * &gt;</type>
      <name>JointModelMap</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a81880d4acfe2c3d4d6c6db822dd8a1c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, const JointModel * &gt;</type>
      <name>JointModelMapConst</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a6c3f9bbb59fc92aff4ad7a40e197123e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, VariableBounds &gt;</type>
      <name>VariableBoundsMap</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a234567f9e8ff71ceb56a228c81adb0be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, int &gt;</type>
      <name>VariableIndexMap</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>ae101bd641ed50af6f5936c5a337ad3fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a63aa00f41059a45cc5148f93ffc08f99</anchor>
      <arglist>(std::ostream &amp;out, const VariableBounds &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>joint_model_group.cpp</name>
    <filename>joint__model__group_8cpp</filename>
    <includes id="robot__model_8h" name="robot_model.h" local="no" imported="no">moveit/robot_model/robot_model.h</includes>
    <includes id="joint__model__group_8h" name="joint_model_group.h" local="no" imported="no">moveit/robot_model/joint_model_group.h</includes>
    <includes id="revolute__joint__model_8h" name="revolute_joint_model.h" local="no" imported="no">moveit/robot_model/revolute_joint_model.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="no" imported="no">moveit/exceptions/exceptions.h</includes>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
  </compound>
  <compound kind="file">
    <name>joint_model_group.h</name>
    <filename>joint__model__group_8h</filename>
    <includes id="joint__model_8h" name="joint_model.h" local="no" imported="no">moveit/robot_model/joint_model.h</includes>
    <includes id="link__model_8h" name="link_model.h" local="no" imported="no">moveit/robot_model/link_model.h</includes>
    <includes id="kinematics__base_8h" name="kinematics_base.h" local="no" imported="no">moveit/kinematics_base/kinematics_base.h</includes>
    <class kind="struct">moveit::core::JointModelGroup::GroupMimicUpdate</class>
    <class kind="class">moveit::core::JointModelGroup</class>
    <class kind="struct">moveit::core::JointModelGroup::KinematicsSolver</class>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
    <member kind="typedef">
      <type>std::vector&lt; const JointModel::Bounds * &gt;</type>
      <name>JointBoundsVector</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a8663e112a09dbce04e101d478f698f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, JointModelGroup * &gt;</type>
      <name>JointModelGroupMap</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>af4d2de83022f7f4739b7f85220fe891e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, const JointModelGroup * &gt;</type>
      <name>JointModelGroupMapConst</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>ac976e248510f5088d334151dd08b9be2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; kinematics::KinematicsBasePtr(const JointModelGroup *)&gt;</type>
      <name>SolverAllocatorFn</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>aee2fefede757f1b0b2e59fc9dce12fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const JointModelGroup *, SolverAllocatorFn &gt;</type>
      <name>SolverAllocatorMapFn</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a5a90601303ff3ca4663e135e2135989c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kinematic_constraint.cpp</name>
    <filename>kinematic__constraint_8cpp</filename>
    <includes id="kinematic__constraint_8h" name="kinematic_constraint.h" local="no" imported="no">moveit/kinematic_constraints/kinematic_constraint.h</includes>
    <includes id="conversions_8h" name="conversions.h" local="no" imported="no">moveit/robot_state/conversions.h</includes>
    <includes id="collision__robot__fcl_8h" name="collision_robot_fcl.h" local="no" imported="no">moveit/collision_detection_fcl/collision_robot_fcl.h</includes>
    <includes id="collision__world__fcl_8h" name="collision_world_fcl.h" local="no" imported="no">moveit/collision_detection_fcl/collision_world_fcl.h</includes>
    <namespace>kinematic_constraints</namespace>
    <member kind="function" static="yes">
      <type>static ConstraintEvaluationResult</type>
      <name>finishPositionConstraintDecision</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>a358b1160cafeb2733e9aeb95b34e582a</anchor>
      <arglist>(const Eigen::Vector3d &amp;pt, const Eigen::Vector3d &amp;desired, const std::string &amp;name, double weight, bool result, bool verbose)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>normalizeAngle</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>ac3bb5580c38edde46eb9292465b6670e</anchor>
      <arglist>(double angle)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kinematic_constraint.h</name>
    <filename>kinematic__constraint_8h</filename>
    <includes id="robot__model_8h" name="robot_model.h" local="no" imported="no">moveit/robot_model/robot_model.h</includes>
    <includes id="robot__state_8h" name="robot_state.h" local="no" imported="no">moveit/robot_state/robot_state.h</includes>
    <includes id="transforms_8h" name="transforms.h" local="no" imported="no">moveit/transforms/transforms.h</includes>
    <includes id="collision__world_8h" name="collision_world.h" local="no" imported="no">moveit/collision_detection/collision_world.h</includes>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <class kind="struct">kinematic_constraints::ConstraintEvaluationResult</class>
    <class kind="class">kinematic_constraints::JointConstraint</class>
    <class kind="class">kinematic_constraints::KinematicConstraint</class>
    <class kind="class">kinematic_constraints::KinematicConstraintSet</class>
    <class kind="class">kinematic_constraints::OrientationConstraint</class>
    <class kind="class">kinematic_constraints::PositionConstraint</class>
    <class kind="class">kinematic_constraints::VisibilityConstraint</class>
    <namespace>kinematic_constraints</namespace>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>a511c45213c2864c44dbc881e21df4305</anchor>
      <arglist>(KinematicConstraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>a82e48180088ca2f13ebd0e79f9fe8623</anchor>
      <arglist>(JointConstraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>ac7684062b6619569429b973703dbc45c</anchor>
      <arglist>(OrientationConstraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>ad595d278b1156b468975956a9a55d9db</anchor>
      <arglist>(PositionConstraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>a55fa654811c1421dc1962b1b896a1fd5</anchor>
      <arglist>(VisibilityConstraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>af7d3e0dd059110de8e0c9c630027aea5</anchor>
      <arglist>(KinematicConstraintSet)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kinematics_base.cpp</name>
    <filename>kinematics__base_8cpp</filename>
    <includes id="kinematics__base_8h" name="kinematics_base.h" local="no" imported="no">moveit/kinematics_base/kinematics_base.h</includes>
    <includes id="joint__model__group_8h" name="joint_model_group.h" local="no" imported="no">moveit/robot_model/joint_model_group.h</includes>
    <namespace>kinematics</namespace>
  </compound>
  <compound kind="file">
    <name>kinematics_base.h</name>
    <filename>kinematics__base_8h</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <class kind="class">kinematics::KinematicsBase</class>
    <class kind="struct">kinematics::KinematicsQueryOptions</class>
    <class kind="struct">kinematics::KinematicsResult</class>
    <namespace>kinematics</namespace>
    <namespace>kinematics::DiscretizationMethods</namespace>
    <namespace>kinematics::KinematicErrors</namespace>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
    <member kind="typedef">
      <type>DiscretizationMethods::DiscretizationMethod</type>
      <name>DiscretizationMethod</name>
      <anchorfile>namespacekinematics.html</anchorfile>
      <anchor>a37053065c92606f7c1d81c5767b8e924</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KinematicErrors::KinematicError</type>
      <name>KinematicError</name>
      <anchorfile>namespacekinematics.html</anchorfile>
      <anchor>a47d1b2217113bf4dc2b5f4d9da0115ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DiscretizationMethod</name>
      <anchorfile>namespacekinematics_1_1DiscretizationMethods.html</anchorfile>
      <anchor>aeb93a96cec28fe29ca84b838652ee63e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_DISCRETIZATION</name>
      <anchorfile>namespacekinematics_1_1DiscretizationMethods.html</anchorfile>
      <anchor>aeb93a96cec28fe29ca84b838652ee63eae5ee69c27701d531ce5c83bacfa0cf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL_DISCRETIZED</name>
      <anchorfile>namespacekinematics_1_1DiscretizationMethods.html</anchorfile>
      <anchor>aeb93a96cec28fe29ca84b838652ee63ea9ba5fdeddd3ee32cdd6b17f1be1e8be4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOME_DISCRETIZED</name>
      <anchorfile>namespacekinematics_1_1DiscretizationMethods.html</anchorfile>
      <anchor>aeb93a96cec28fe29ca84b838652ee63eaefde56b9ab3ef5a3e01193d18fa7b286</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL_RANDOM_SAMPLED</name>
      <anchorfile>namespacekinematics_1_1DiscretizationMethods.html</anchorfile>
      <anchor>aeb93a96cec28fe29ca84b838652ee63ea4919c7d9eb1936fa0e66143f8deb1b26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOME_RANDOM_SAMPLED</name>
      <anchorfile>namespacekinematics_1_1DiscretizationMethods.html</anchorfile>
      <anchor>aeb93a96cec28fe29ca84b838652ee63ea0b2dafc761a2cd9029c3fe14f496961e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>KinematicError</name>
      <anchorfile>namespacekinematics_1_1KinematicErrors.html</anchorfile>
      <anchor>a4a6f0899b934dca3e0cece4685d13e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OK</name>
      <anchorfile>namespacekinematics_1_1KinematicErrors.html</anchorfile>
      <anchor>a4a6f0899b934dca3e0cece4685d13e14a2da50423beaa700d662194640673ca7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNSUPORTED_DISCRETIZATION_REQUESTED</name>
      <anchorfile>namespacekinematics_1_1KinematicErrors.html</anchorfile>
      <anchor>a4a6f0899b934dca3e0cece4685d13e14af3096b3226aa811cfc837f8d963718e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISCRETIZATION_NOT_INITIALIZED</name>
      <anchorfile>namespacekinematics_1_1KinematicErrors.html</anchorfile>
      <anchor>a4a6f0899b934dca3e0cece4685d13e14a3174fb06463cff735476bc07dca1cd96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTIPLE_TIPS_NOT_SUPPORTED</name>
      <anchorfile>namespacekinematics_1_1KinematicErrors.html</anchorfile>
      <anchor>a4a6f0899b934dca3e0cece4685d13e14a82c65b9f9965b56fe55c73657364a4bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMPTY_TIP_POSES</name>
      <anchorfile>namespacekinematics_1_1KinematicErrors.html</anchorfile>
      <anchor>a4a6f0899b934dca3e0cece4685d13e14aa9b39dd7dbe6f169eea28591207b6c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IK_SEED_OUTSIDE_LIMITS</name>
      <anchorfile>namespacekinematics_1_1KinematicErrors.html</anchorfile>
      <anchor>a4a6f0899b934dca3e0cece4685d13e14a65cce5c15c80af3b3080628202f46074</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOLVER_NOT_ACTIVE</name>
      <anchorfile>namespacekinematics_1_1KinematicErrors.html</anchorfile>
      <anchor>a4a6f0899b934dca3e0cece4685d13e14af4f97d6b755e32d3b94ac6fe5d1aa847</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SOLUTION</name>
      <anchorfile>namespacekinematics_1_1KinematicErrors.html</anchorfile>
      <anchor>a4a6f0899b934dca3e0cece4685d13e14a3cae2cf84f49545a98fcbb72869df691</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacekinematics.html</anchorfile>
      <anchor>ad1d92e4ab0d5a509ceeb129aa10cdcbe</anchor>
      <arglist>(KinematicsBase)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kinematics_metrics.cpp</name>
    <filename>kinematics__metrics_8cpp</filename>
    <includes id="kinematics__metrics_8h" name="kinematics_metrics.h" local="no" imported="no">moveit/kinematics_metrics/kinematics_metrics.h</includes>
    <namespace>kinematics_metrics</namespace>
  </compound>
  <compound kind="file">
    <name>kinematics_metrics.h</name>
    <filename>kinematics__metrics_8h</filename>
    <includes id="robot__state_8h" name="robot_state.h" local="no" imported="no">moveit/robot_state/robot_state.h</includes>
    <includes id="planning__scene_8h" name="planning_scene.h" local="no" imported="no">moveit/planning_scene/planning_scene.h</includes>
    <class kind="class">kinematics_metrics::KinematicsMetrics</class>
    <namespace>kinematics_metrics</namespace>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacekinematics__metrics.html</anchorfile>
      <anchor>afe4341588396430f0d854ab0ed018743</anchor>
      <arglist>(KinematicsMetrics)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>link_model.cpp</name>
    <filename>link__model_8cpp</filename>
    <includes id="link__model_8h" name="link_model.h" local="no" imported="no">moveit/robot_model/link_model.h</includes>
    <includes id="joint__model_8h" name="joint_model.h" local="no" imported="no">moveit/robot_model/joint_model.h</includes>
    <includes id="aabb_8h" name="aabb.h" local="no" imported="no">moveit/robot_model/aabb.h</includes>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
  </compound>
  <compound kind="file">
    <name>link_model.h</name>
    <filename>link__model_8h</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <class kind="class">moveit::core::LinkModel</class>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
    <namespace>shapes</namespace>
    <member kind="typedef">
      <type>std::map&lt; std::string, LinkModel * &gt;</type>
      <name>LinkModelMap</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>ad5bf6a2d4eaf49a0bad8f29eb1eb25c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, const LinkModel * &gt;</type>
      <name>LinkModelMapConst</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>aba4c4e76a1e12bf5d2bdb6aa07220126</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const LinkModel *, Eigen::Isometry3d, std::less&lt; const LinkModel * &gt;, Eigen::aligned_allocator&lt; std::pair&lt; const LinkModel *const, Eigen::Isometry3d &gt; &gt; &gt;</type>
      <name>LinkTransformMap</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a4586cb570da059f7f173b6fd9f358917</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceshapes.html</anchorfile>
      <anchor>a108814a0910c33efcd0897cda420fbab</anchor>
      <arglist>(Shape)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>planar_joint_model.cpp</name>
    <filename>planar__joint__model_8cpp</filename>
    <includes id="planar__joint__model_8h" name="planar_joint_model.h" local="no" imported="no">moveit/robot_model/planar_joint_model.h</includes>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
  </compound>
  <compound kind="file">
    <name>planar_joint_model.h</name>
    <filename>planar__joint__model_8h</filename>
    <includes id="joint__model_8h" name="joint_model.h" local="no" imported="no">moveit/robot_model/joint_model.h</includes>
    <class kind="class">moveit::core::PlanarJointModel</class>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
  </compound>
  <compound kind="file">
    <name>planning_interface.cpp</name>
    <filename>planning__interface_8cpp</filename>
    <includes id="planning__interface_8h" name="planning_interface.h" local="no" imported="no">moveit/planning_interface/planning_interface.h</includes>
    <namespace>planning_interface</namespace>
    <member kind="variable">
      <type>std::set&lt; PlanningContext * &gt;</type>
      <name>contexts_</name>
      <anchorfile>planning__interface_8cpp.html</anchorfile>
      <anchor>aff1fbe91608692aa1d64b722839538b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::mutex</type>
      <name>mutex_</name>
      <anchorfile>planning__interface_8cpp.html</anchorfile>
      <anchor>a2a5bf12782935b66daea14942dd97000</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>planning_interface.h</name>
    <filename>planning__interface_8h</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <includes id="planning__request_8h" name="planning_request.h" local="no" imported="no">moveit/planning_interface/planning_request.h</includes>
    <includes id="planning__response_8h" name="planning_response.h" local="no" imported="no">moveit/planning_interface/planning_response.h</includes>
    <class kind="struct">planning_interface::PlannerConfigurationSettings</class>
    <class kind="class">planning_interface::PlannerManager</class>
    <class kind="class">planning_interface::PlanningContext</class>
    <namespace>planning_interface</namespace>
    <namespace>planning_scene</namespace>
    <member kind="typedef">
      <type>std::map&lt; std::string, PlannerConfigurationSettings &gt;</type>
      <name>PlannerConfigurationMap</name>
      <anchorfile>namespaceplanning__interface.html</anchorfile>
      <anchor>a0f570b4d5ea3f33ee94b3b28ee9c0147</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceplanning__scene.html</anchorfile>
      <anchor>a39429391a4496d2fcecf3825578b0432</anchor>
      <arglist>(PlanningScene)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceplanning__interface.html</anchorfile>
      <anchor>af351b56894fa266a878f1e5054cf31b9</anchor>
      <arglist>(PlanningContext)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceplanning__interface.html</anchorfile>
      <anchor>a470f7973968f5043caf7bf15be97aa37</anchor>
      <arglist>(PlannerManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>planning_request.h</name>
    <filename>planning__request_8h</filename>
    <namespace>planning_interface</namespace>
    <member kind="typedef">
      <type>moveit_msgs::MotionPlanRequest</type>
      <name>MotionPlanRequest</name>
      <anchorfile>namespaceplanning__interface.html</anchorfile>
      <anchor>a66b7da9ae05ece3dbde7605d89208ae8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>planning_request_adapter.cpp</name>
    <filename>planning__request__adapter_8cpp</filename>
    <includes id="planning__request__adapter_8h" name="planning_request_adapter.h" local="no" imported="no">moveit/planning_request_adapter/planning_request_adapter.h</includes>
    <namespace>planning_request_adapter</namespace>
  </compound>
  <compound kind="file">
    <name>planning_request_adapter.h</name>
    <filename>planning__request__adapter_8h</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <includes id="planning__interface_8h" name="planning_interface.h" local="no" imported="no">moveit/planning_interface/planning_interface.h</includes>
    <includes id="planning__scene_8h" name="planning_scene.h" local="no" imported="no">moveit/planning_scene/planning_scene.h</includes>
    <class kind="class">planning_request_adapter::PlanningRequestAdapter</class>
    <class kind="class">planning_request_adapter::PlanningRequestAdapterChain</class>
    <namespace>planning_request_adapter</namespace>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceplanning__request__adapter.html</anchorfile>
      <anchor>a80e01d6b3528e0f33738b73b6574b4e6</anchor>
      <arglist>(PlanningRequestAdapter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>planning_response.cpp</name>
    <filename>planning__response_8cpp</filename>
    <includes id="planning__response_8h" name="planning_response.h" local="no" imported="no">moveit/planning_interface/planning_response.h</includes>
    <includes id="conversions_8h" name="conversions.h" local="no" imported="no">moveit/robot_state/conversions.h</includes>
  </compound>
  <compound kind="file">
    <name>planning_response.h</name>
    <filename>planning__response_8h</filename>
    <includes id="robot__trajectory_8h" name="robot_trajectory.h" local="no" imported="no">moveit/robot_trajectory/robot_trajectory.h</includes>
    <class kind="struct">planning_interface::MotionPlanDetailedResponse</class>
    <class kind="struct">planning_interface::MotionPlanResponse</class>
    <namespace>planning_interface</namespace>
  </compound>
  <compound kind="file">
    <name>planning_scene.cpp</name>
    <filename>planning__scene_8cpp</filename>
    <includes id="planning__scene_8h" name="planning_scene.h" local="no" imported="no">moveit/planning_scene/planning_scene.h</includes>
    <includes id="collision__detector__allocator__fcl_8h" name="collision_detector_allocator_fcl.h" local="no" imported="no">moveit/collision_detection_fcl/collision_detector_allocator_fcl.h</includes>
    <includes id="collision__tools_8h" name="collision_tools.h" local="no" imported="no">moveit/collision_detection/collision_tools.h</includes>
    <includes id="trajectory__tools_8h" name="trajectory_tools.h" local="no" imported="no">moveit/trajectory_processing/trajectory_tools.h</includes>
    <includes id="conversions_8h" name="conversions.h" local="no" imported="no">moveit/robot_state/conversions.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="no" imported="no">moveit/exceptions/exceptions.h</includes>
    <includes id="attached__body_8h" name="attached_body.h" local="no" imported="no">moveit/robot_state/attached_body.h</includes>
    <class kind="class">planning_scene::SceneTransforms</class>
    <namespace>planning_scene</namespace>
    <member kind="variable" protection="private">
      <type>moveit_msgs::CollisionObject *</type>
      <name>obj_</name>
      <anchorfile>planning__scene_8cpp.html</anchorfile>
      <anchor>a91d0ba28fe002443af14cc872f4282a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const geometry_msgs::Pose *</type>
      <name>pose_</name>
      <anchorfile>planning__scene_8cpp.html</anchorfile>
      <anchor>af0bee513dfb4aace1532b98a8436e189</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>planning_scene.dox</name>
    <filename>planning__scene_8dox</filename>
  </compound>
  <compound kind="file">
    <name>planning_scene.h</name>
    <filename>planning__scene_8h</filename>
    <includes id="robot__model_8h" name="robot_model.h" local="no" imported="no">moveit/robot_model/robot_model.h</includes>
    <includes id="robot__state_8h" name="robot_state.h" local="no" imported="no">moveit/robot_state/robot_state.h</includes>
    <includes id="transforms_8h" name="transforms.h" local="no" imported="no">moveit/transforms/transforms.h</includes>
    <includes id="collision__detector__allocator_8h" name="collision_detector_allocator.h" local="no" imported="no">moveit/collision_detection/collision_detector_allocator.h</includes>
    <includes id="world__diff_8h" name="world_diff.h" local="no" imported="no">moveit/collision_detection/world_diff.h</includes>
    <includes id="kinematic__constraint_8h" name="kinematic_constraint.h" local="no" imported="no">moveit/kinematic_constraints/kinematic_constraint.h</includes>
    <includes id="kinematics__base_8h" name="kinematics_base.h" local="no" imported="no">moveit/kinematics_base/kinematics_base.h</includes>
    <includes id="robot__trajectory_8h" name="robot_trajectory.h" local="no" imported="no">moveit/robot_trajectory/robot_trajectory.h</includes>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <includes id="deprecation_8h" name="deprecation.h" local="no" imported="no">moveit/macros/deprecation.h</includes>
    <class kind="struct">planning_scene::PlanningScene::CollisionDetector</class>
    <class kind="class">planning_scene::PlanningScene</class>
    <namespace>planning_scene</namespace>
    <member kind="typedef">
      <type>boost::function&lt; bool(const robot_state::RobotState &amp;, const robot_state::RobotState &amp;, bool)&gt;</type>
      <name>MotionFeasibilityFn</name>
      <anchorfile>namespaceplanning__scene.html</anchorfile>
      <anchor>a7a16bac3b4d29f92ff33d9209e4d575f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, std_msgs::ColorRGBA &gt;</type>
      <name>ObjectColorMap</name>
      <anchorfile>namespaceplanning__scene.html</anchorfile>
      <anchor>ad2e666339b9fdb4d06c14c207589996b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, object_recognition_msgs::ObjectType &gt;</type>
      <name>ObjectTypeMap</name>
      <anchorfile>namespaceplanning__scene.html</anchorfile>
      <anchor>a519e68563c632f2c9e20248e3d4022fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; bool(const robot_state::RobotState &amp;, bool)&gt;</type>
      <name>StateFeasibilityFn</name>
      <anchorfile>namespaceplanning__scene.html</anchorfile>
      <anchor>af50a0aed65f6f062dd6c11d1f20be10c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceplanning__scene.html</anchorfile>
      <anchor>a39429391a4496d2fcecf3825578b0432</anchor>
      <arglist>(PlanningScene)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pr2_arm_ik.cpp</name>
    <filename>pr2__arm__ik_8cpp</filename>
    <includes id="pr2__arm__ik_8h" name="pr2_arm_ik.h" local="yes" imported="no">pr2_arm_ik.h</includes>
  </compound>
  <compound kind="file">
    <name>pr2_arm_ik.h</name>
    <filename>pr2__arm__ik_8h</filename>
    <class kind="class">pr2_arm_kinematics::PR2ArmIK</class>
    <namespace>pr2_arm_kinematics</namespace>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>a24f684af4bcce4a6d0c945aa27d04550</anchor>
      <arglist>(const urdf::Pose &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveCosineEqn</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>a6db7f60734519de9986512012be6bb5d</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double &amp;c, double &amp;soln1, double &amp;soln2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveQuadratic</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>ae40d1d4a9b03d56f302c53f3a0a84173</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double &amp;c, double *x1, double *x2)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>IK_EPS</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>ac6a291b8c671719448644572f9b7aa35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NUM_JOINTS_ARM7DOF</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>a816d8c9a19c2e2967b4243a2585bba79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pr2_arm_kinematics_plugin.cpp</name>
    <filename>pr2__arm__kinematics__plugin_8cpp</filename>
    <includes id="pr2__arm__kinematics__plugin_8h" name="pr2_arm_kinematics_plugin.h" local="yes" imported="no">pr2_arm_kinematics_plugin.h</includes>
    <namespace>pr2_arm_kinematics</namespace>
    <member kind="function">
      <type>double</type>
      <name>computeEuclideanDistance</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>a31e48e861fab1c1a426bda845bf56303</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;array_1, const KDL::JntArray &amp;array_2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getKDLChain</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>a191692da6ba1e08ad26beff4496601bf</anchor>
      <arglist>(const urdf::ModelInterface &amp;model, const std::string &amp;root_name, const std::string &amp;tip_name, KDL::Chain &amp;kdl_chain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getKDLChainInfo</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>addcd9f2d0eeb2490a281e2904044c528</anchor>
      <arglist>(const KDL::Chain &amp;chain, moveit_msgs::KinematicSolverInfo &amp;chain_info)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix4f</type>
      <name>KDLToEigenMatrix</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>a88fb121d84b3b989a84aa21a14cf8567</anchor>
      <arglist>(const KDL::Frame &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pr2_arm_kinematics_plugin.h</name>
    <filename>pr2__arm__kinematics__plugin_8h</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <includes id="kinematics__base_8h" name="kinematics_base.h" local="no" imported="no">moveit/kinematics_base/kinematics_base.h</includes>
    <includes id="pr2__arm__ik_8h" name="pr2_arm_ik.h" local="yes" imported="no">pr2_arm_ik.h</includes>
    <class kind="class">pr2_arm_kinematics::PR2ArmIKSolver</class>
    <class kind="class">pr2_arm_kinematics::PR2ArmKinematicsPlugin</class>
    <namespace>pr2_arm_kinematics</namespace>
    <member kind="function">
      <type>double</type>
      <name>computeEuclideanDistance</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>a31e48e861fab1c1a426bda845bf56303</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;array_1, const KDL::JntArray &amp;array_2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getKDLChainInfo</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>addcd9f2d0eeb2490a281e2904044c528</anchor>
      <arglist>(const KDL::Chain &amp;chain, moveit_msgs::KinematicSolverInfo &amp;chain_info)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix4f</type>
      <name>KDLToEigenMatrix</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>a88fb121d84b3b989a84aa21a14cf8567</anchor>
      <arglist>(const KDL::Frame &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>ae5993b5f4d88330b2efe7ae180fcc499</anchor>
      <arglist>(PR2ArmIKSolver)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>a215371773d30c0b18bb34dddb4247456</anchor>
      <arglist>(PR2ArmKinematicsPlugin)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NO_IK_SOLUTION</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>ae8b821620ec119e950524b084b97545d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>TIMED_OUT</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>a244bc5bbfbb9d1a10247215245eb3f36</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>prismatic_joint_model.cpp</name>
    <filename>prismatic__joint__model_8cpp</filename>
    <includes id="prismatic__joint__model_8h" name="prismatic_joint_model.h" local="no" imported="no">moveit/robot_model/prismatic_joint_model.h</includes>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
  </compound>
  <compound kind="file">
    <name>prismatic_joint_model.h</name>
    <filename>prismatic__joint__model_8h</filename>
    <includes id="joint__model_8h" name="joint_model.h" local="no" imported="no">moveit/robot_model/joint_model.h</includes>
    <class kind="class">moveit::core::PrismaticJointModel</class>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
  </compound>
  <compound kind="file">
    <name>profiler.cpp</name>
    <filename>profiler_8cpp</filename>
    <includes id="profiler_8h" name="profiler.h" local="yes" imported="no">moveit/profiler/profiler.h</includes>
  </compound>
  <compound kind="file">
    <name>profiler.h</name>
    <filename>profiler_8h</filename>
    <class kind="struct">moveit::tools::Profiler::AvgInfo</class>
    <class kind="struct">moveit::tools::Profiler::PerThread</class>
    <class kind="class">moveit::tools::Profiler</class>
    <class kind="class">moveit::tools::Profiler::ScopedBlock</class>
    <class kind="class">moveit::tools::Profiler::ScopedStart</class>
    <class kind="struct">moveit::tools::Profiler::TimeInfo</class>
    <namespace>moveit</namespace>
    <namespace>moveit::tools</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MOVEIT_ENABLE_PROFILING</name>
      <anchorfile>profiler_8h.html</anchorfile>
      <anchor>a6a2178e4c9e28d24cad4fbb3629a3cbd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>propagation_distance_field.cpp</name>
    <filename>propagation__distance__field_8cpp</filename>
    <includes id="propagation__distance__field_8h" name="propagation_distance_field.h" local="no" imported="no">moveit/distance_field/propagation_distance_field.h</includes>
    <namespace>distance_field</namespace>
  </compound>
  <compound kind="file">
    <name>propagation_distance_field.h</name>
    <filename>propagation__distance__field_8h</filename>
    <includes id="voxel__grid_8h" name="voxel_grid.h" local="no" imported="no">moveit/distance_field/voxel_grid.h</includes>
    <includes id="distance__field_8h" name="distance_field.h" local="no" imported="no">moveit/distance_field/distance_field.h</includes>
    <class kind="struct">distance_field::compareEigen_Vector3i</class>
    <class kind="class">distance_field::PropagationDistanceField</class>
    <class kind="struct">distance_field::PropDistanceFieldVoxel</class>
    <namespace>distance_field</namespace>
  </compound>
  <compound kind="file">
    <name>revolute_joint_model.cpp</name>
    <filename>revolute__joint__model_8cpp</filename>
    <includes id="revolute__joint__model_8h" name="revolute_joint_model.h" local="no" imported="no">moveit/robot_model/revolute_joint_model.h</includes>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
  </compound>
  <compound kind="file">
    <name>revolute_joint_model.h</name>
    <filename>revolute__joint__model_8h</filename>
    <includes id="joint__model_8h" name="joint_model.h" local="no" imported="no">moveit/robot_model/joint_model.h</includes>
    <class kind="class">moveit::core::RevoluteJointModel</class>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
  </compound>
  <compound kind="file">
    <name>robot_model.cpp</name>
    <filename>robot__model_8cpp</filename>
    <includes id="robot__model_8h" name="robot_model.h" local="no" imported="no">moveit/robot_model/robot_model.h</includes>
    <includes id="profiler_8h" name="profiler.h" local="no" imported="no">moveit/profiler/profiler.h</includes>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
  </compound>
  <compound kind="file">
    <name>robot_model.h</name>
    <filename>robot__model_8h</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="no" imported="no">moveit/exceptions/exceptions.h</includes>
    <includes id="joint__model__group_8h" name="joint_model_group.h" local="no" imported="no">moveit/robot_model/joint_model_group.h</includes>
    <includes id="fixed__joint__model_8h" name="fixed_joint_model.h" local="no" imported="no">moveit/robot_model/fixed_joint_model.h</includes>
    <includes id="floating__joint__model_8h" name="floating_joint_model.h" local="no" imported="no">moveit/robot_model/floating_joint_model.h</includes>
    <includes id="planar__joint__model_8h" name="planar_joint_model.h" local="no" imported="no">moveit/robot_model/planar_joint_model.h</includes>
    <includes id="revolute__joint__model_8h" name="revolute_joint_model.h" local="no" imported="no">moveit/robot_model/revolute_joint_model.h</includes>
    <includes id="prismatic__joint__model_8h" name="prismatic_joint_model.h" local="no" imported="no">moveit/robot_model/prismatic_joint_model.h</includes>
    <class kind="class">moveit::core::RobotModel</class>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>ad46b199b126b933d331e17324e878585</anchor>
      <arglist>(RobotModel)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>robot_state.cpp</name>
    <filename>robot__state_8cpp</filename>
    <includes id="robot__state_8h" name="robot_state.h" local="no" imported="no">moveit/robot_state/robot_state.h</includes>
    <includes id="transforms_8h" name="transforms.h" local="no" imported="no">moveit/transforms/transforms.h</includes>
    <includes id="backtrace_8h" name="backtrace.h" local="no" imported="no">moveit/backtrace/backtrace.h</includes>
    <includes id="profiler_8h" name="profiler.h" local="no" imported="no">moveit/profiler/profiler.h</includes>
    <includes id="aabb_8h" name="aabb.h" local="no" imported="no">moveit/robot_model/aabb.h</includes>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>af0e84ecacbc94a6f9fa1e8e439646be9</anchor>
      <arglist>(std::ostream &amp;out, const RobotState &amp;s)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::size_t</type>
      <name>MIN_STEPS_FOR_JUMP_THRESH</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a1f261b70ddd2dc4ff81de7520b58c209</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>robot_state.h</name>
    <filename>robot__state_8h</filename>
    <includes id="robot__model_8h" name="robot_model.h" local="no" imported="no">moveit/robot_model/robot_model.h</includes>
    <includes id="attached__body_8h" name="attached_body.h" local="no" imported="no">moveit/robot_state/attached_body.h</includes>
    <includes id="deprecation_8h" name="deprecation.h" local="no" imported="no">moveit/macros/deprecation.h</includes>
    <class kind="struct">moveit::core::JumpThreshold</class>
    <class kind="struct">moveit::core::MaxEEFStep</class>
    <class kind="class">moveit::core::RobotState</class>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
    <member kind="typedef">
      <type>boost::function&lt; bool(RobotState *robot_state, const JointModelGroup *joint_group, const double *joint_group_variable_values)&gt;</type>
      <name>GroupStateValidityCallbackFn</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a7e30b6ca7b8fafe9e2dd276d60e00b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>ab2c30bf80cb40ffdd4f78758b3fa6641</anchor>
      <arglist>(RobotState)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>af0e84ecacbc94a6f9fa1e8e439646be9</anchor>
      <arglist>(std::ostream &amp;out, const RobotState &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>robot_state_test.cpp</name>
    <filename>robot__state__test_8cpp</filename>
    <includes id="robot__model_8h" name="robot_model.h" local="no" imported="no">moveit/robot_model/robot_model.h</includes>
    <includes id="robot__state_8h" name="robot_state.h" local="no" imported="no">moveit/robot_state/robot_state.h</includes>
    <class kind="class">OneRobot</class>
    <member kind="define">
      <type>#define</type>
      <name>EXPECT_NEAR_TRACED</name>
      <anchorfile>robot__state__test_8cpp.html</anchorfile>
      <anchor>a584dbae242a36285770f084cbbe01d56</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>expect_near</name>
      <anchorfile>robot__state__test_8cpp.html</anchorfile>
      <anchor>a096cb4ea2acdd33a0db1447abd2acc13</anchor>
      <arglist>(const Eigen::MatrixXd &amp;x, const Eigen::MatrixXd &amp;y, double eps=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>generateTestTraj</name>
      <anchorfile>robot__state__test_8cpp.html</anchorfile>
      <anchor>ab64f21fc32f74629d5de83161f3a0cf7</anchor>
      <arglist>(std::vector&lt; std::shared_ptr&lt; robot_state::RobotState &gt;&gt; &amp;traj, const moveit::core::RobotModelConstPtr &amp;robot_model, const robot_model::JointModelGroup *joint_model_group)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>robot__state__test_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>sameStringIgnoringWS</name>
      <anchorfile>robot__state__test_8cpp.html</anchorfile>
      <anchor>a19817e415ffbf2f67c9e406a3ab4458e</anchor>
      <arglist>(const std::string &amp;s1, const std::string &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>robot__state__test_8cpp.html</anchorfile>
      <anchor>a3f9c85cd3634062dbfc3758043c4b16c</anchor>
      <arglist>(Loading, SimpleRobot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>robot__state__test_8cpp.html</anchorfile>
      <anchor>a0a60a2f41ceb978a0c3e889302e33df8</anchor>
      <arglist>(LoadingAndFK, SimpleRobot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>robot__state__test_8cpp.html</anchorfile>
      <anchor>adb3b487fd2559db6519d52dec17ab77d</anchor>
      <arglist>(OneRobot, FK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>robot__state__test_8cpp.html</anchorfile>
      <anchor>ae38fb361f90d5e8d741f2b890ae2aa6c</anchor>
      <arglist>(OneRobot, testGenerateTrajectory)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>robot__state__test_8cpp.html</anchorfile>
      <anchor>a512d2f9a0cac7b29fba8838cf09688a5</anchor>
      <arglist>(OneRobot, testAbsoluteJointSpaceJump)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>robot__state__test_8cpp.html</anchorfile>
      <anchor>ac7695e5d0f4226ea5e0569752be244b1</anchor>
      <arglist>(OneRobot, testRelativeJointSpaceJump)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>robot_trajectory.cpp</name>
    <filename>robot__trajectory_8cpp</filename>
    <includes id="robot__trajectory_8h" name="robot_trajectory.h" local="no" imported="no">moveit/robot_trajectory/robot_trajectory.h</includes>
    <includes id="conversions_8h" name="conversions.h" local="no" imported="no">moveit/robot_state/conversions.h</includes>
    <namespace>robot_trajectory</namespace>
  </compound>
  <compound kind="file">
    <name>robot_trajectory.h</name>
    <filename>robot__trajectory_8h</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <includes id="deprecation_8h" name="deprecation.h" local="no" imported="no">moveit/macros/deprecation.h</includes>
    <includes id="robot__state_8h" name="robot_state.h" local="no" imported="no">moveit/robot_state/robot_state.h</includes>
    <class kind="class">robot_trajectory::RobotTrajectory</class>
    <namespace>robot_trajectory</namespace>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacerobot__trajectory.html</anchorfile>
      <anchor>ac4f1b5675c17a914be6251e6e12ff60e</anchor>
      <arglist>(RobotTrajectory)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sensor_manager.h</name>
    <filename>sensor__manager_8h</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <class kind="class">moveit_sensor_manager::MoveItSensorManager</class>
    <class kind="struct">moveit_sensor_manager::SensorInfo</class>
    <namespace>moveit_sensor_manager</namespace>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacemoveit__sensor__manager.html</anchorfile>
      <anchor>abd78da35a8848a7b873dac38bf8b6628</anchor>
      <arglist>(MoveItSensorManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test.cpp</name>
    <filename>test_8cpp</filename>
    <includes id="robot__model_8h" name="robot_model.h" local="no" imported="no">moveit/robot_model/robot_model.h</includes>
    <includes id="profiler_8h" name="profiler.h" local="no" imported="no">moveit/profiler/profiler.h</includes>
    <class kind="class">LoadPlanningModelsPr2</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test_8cpp.html</anchorfile>
      <anchor>a6c1fe19a26bbfaa914da12ac1d6e1d3d</anchor>
      <arglist>(LoadPlanningModelsPr2, InitOK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test_8cpp.html</anchorfile>
      <anchor>aaa41c8ddf3bd79684f2e8536705119e5</anchor>
      <arglist>(LoadPlanningModelsPr2, Model)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_aabb.cpp</name>
    <filename>test__aabb_8cpp</filename>
    <includes id="aabb_8h" name="aabb.h" local="no" imported="no">moveit/robot_model/aabb.h</includes>
    <includes id="robot__model_8h" name="robot_model.h" local="no" imported="no">moveit/robot_model/robot_model.h</includes>
    <includes id="robot__state_8h" name="robot_state.h" local="no" imported="no">moveit/robot_state/robot_state.h</includes>
    <class kind="class">TestAABB</class>
    <member kind="define">
      <type>#define</type>
      <name>VISUALIZE_PR2_RVIZ</name>
      <anchorfile>test__aabb_8cpp.html</anchorfile>
      <anchor>a4479e9fb7cb804c0794fed05b555ea46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test__aabb_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__aabb_8cpp.html</anchorfile>
      <anchor>a3fa5c4d317ef11767124171449c95a90</anchor>
      <arglist>(TestAABB, TestPR2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__aabb_8cpp.html</anchorfile>
      <anchor>a836ccbd4cc42830e7d81b6bb50373553</anchor>
      <arglist>(TestAABB, TestSimple)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__aabb_8cpp.html</anchorfile>
      <anchor>af868717b59622669c72293e54ea58764</anchor>
      <arglist>(TestAABB, TestComplex)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_constraint_samplers.cpp</name>
    <filename>test__constraint__samplers_8cpp</filename>
    <includes id="planning__scene_8h" name="planning_scene.h" local="no" imported="no">moveit/planning_scene/planning_scene.h</includes>
    <includes id="kinematic__constraint_8h" name="kinematic_constraint.h" local="no" imported="no">moveit/kinematic_constraints/kinematic_constraint.h</includes>
    <includes id="default__constraint__samplers_8h" name="default_constraint_samplers.h" local="no" imported="no">moveit/constraint_samplers/default_constraint_samplers.h</includes>
    <includes id="union__constraint__sampler_8h" name="union_constraint_sampler.h" local="no" imported="no">moveit/constraint_samplers/union_constraint_sampler.h</includes>
    <includes id="constraint__sampler__manager_8h" name="constraint_sampler_manager.h" local="no" imported="no">moveit/constraint_samplers/constraint_sampler_manager.h</includes>
    <includes id="constraint__sampler__tools_8h" name="constraint_sampler_tools.h" local="no" imported="no">moveit/constraint_samplers/constraint_sampler_tools.h</includes>
    <includes id="conversions_8h" name="conversions.h" local="no" imported="no">moveit/robot_state/conversions.h</includes>
    <includes id="pr2__arm__kinematics__plugin_8h" name="pr2_arm_kinematics_plugin.h" local="yes" imported="no">pr2_arm_kinematics_plugin.h</includes>
    <class kind="class">LoadPlanningModelsPr2</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test__constraint__samplers_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraint__samplers_8cpp.html</anchorfile>
      <anchor>a14090604c7ef6a740f4f2dc853d3c783</anchor>
      <arglist>(LoadPlanningModelsPr2, JointConstraintsSamplerSimple)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraint__samplers_8cpp.html</anchorfile>
      <anchor>aeb23f1f416acbc3bebebf148576673de</anchor>
      <arglist>(LoadPlanningModelsPr2, IKConstraintsSamplerSimple)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraint__samplers_8cpp.html</anchorfile>
      <anchor>a19e71fb6f8a206a9692b50c4b02084b7</anchor>
      <arglist>(LoadPlanningModelsPr2, OrientationConstraintsSampler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraint__samplers_8cpp.html</anchorfile>
      <anchor>a5bea1f1a0ae976150f0301b319882fa3</anchor>
      <arglist>(LoadPlanningModelsPr2, IKConstraintsSamplerValid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraint__samplers_8cpp.html</anchorfile>
      <anchor>a85db5a190e27663a9bf3727c8f667013</anchor>
      <arglist>(LoadPlanningModelsPr2, UnionConstraintSampler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraint__samplers_8cpp.html</anchorfile>
      <anchor>a9fd713b2fe4f7597c67f1071c0cf0a98</anchor>
      <arglist>(LoadPlanningModelsPr2, PoseConstraintSamplerManager)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraint__samplers_8cpp.html</anchorfile>
      <anchor>ac61db30f2be466b8c137d5f546529b23</anchor>
      <arglist>(LoadPlanningModelsPr2, JointVersusPoseConstraintSamplerManager)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraint__samplers_8cpp.html</anchorfile>
      <anchor>a802612a96e7286efa06b650bd655a54a</anchor>
      <arglist>(LoadPlanningModelsPr2, MixedJointAndIkSamplerManager)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraint__samplers_8cpp.html</anchorfile>
      <anchor>a6fe411e8837d790250fda4f239fa9241</anchor>
      <arglist>(LoadPlanningModelsPr2, SubgroupJointConstraintsSamplerManager)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraint__samplers_8cpp.html</anchorfile>
      <anchor>ac405701249ac3e0a5bf17af81802fd76</anchor>
      <arglist>(LoadPlanningModelsPr2, SubgroupPoseConstraintsSampler)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_constraints.cpp</name>
    <filename>test__constraints_8cpp</filename>
    <includes id="kinematic__constraint_8h" name="kinematic_constraint.h" local="no" imported="no">moveit/kinematic_constraints/kinematic_constraint.h</includes>
    <class kind="class">LoadPlanningModelsPr2</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test__constraints_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraints_8cpp.html</anchorfile>
      <anchor>a283d383dfd000b3ff6be63165d7f314e</anchor>
      <arglist>(LoadPlanningModelsPr2, JointConstraintsSimple)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraints_8cpp.html</anchorfile>
      <anchor>acc351232c27d2563a8850f50dc12765f</anchor>
      <arglist>(LoadPlanningModelsPr2, JointConstraintsCont)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraints_8cpp.html</anchorfile>
      <anchor>a6da6a17fc463aa5308acb6b8bc5f3379</anchor>
      <arglist>(LoadPlanningModelsPr2, JointConstraintsMultiDOF)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraints_8cpp.html</anchorfile>
      <anchor>a4a6a554093b237de041635f28692d4eb</anchor>
      <arglist>(LoadPlanningModelsPr2, PositionConstraintsFixed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraints_8cpp.html</anchorfile>
      <anchor>a211281eb99bfbbc6cfd20a8b9693d5c5</anchor>
      <arglist>(LoadPlanningModelsPr2, PositionConstraintsMobile)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraints_8cpp.html</anchorfile>
      <anchor>a1b2bb543a2b32c1ab83c7cbc1e7aedd3</anchor>
      <arglist>(LoadPlanningModelsPr2, PositionConstraintsEquality)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraints_8cpp.html</anchorfile>
      <anchor>a0b1f5a3d6803a1b4f1057a54d3356231</anchor>
      <arglist>(LoadPlanningModelsPr2, OrientationConstraintsSimple)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraints_8cpp.html</anchorfile>
      <anchor>a737ad5ef218fca06bddc7117ebc789fd</anchor>
      <arglist>(LoadPlanningModelsPr2, VisibilityConstraintsSimple)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraints_8cpp.html</anchorfile>
      <anchor>a175397f3f8b3e99b5879d63337f8665a</anchor>
      <arglist>(LoadPlanningModelsPr2, VisibilityConstraintsPR2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraints_8cpp.html</anchorfile>
      <anchor>a2a424f83f48a50063d34dbb66f11ac5e</anchor>
      <arglist>(LoadPlanningModelsPr2, TestKinematicConstraintSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__constraints_8cpp.html</anchorfile>
      <anchor>aed88afbf69cf1306367da4637f68c95e</anchor>
      <arglist>(LoadPlanningModelsPr2, TestKinematicConstraintSetEquality)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_distance_field.cpp</name>
    <filename>test__distance__field_8cpp</filename>
    <includes id="voxel__grid_8h" name="voxel_grid.h" local="no" imported="no">moveit/distance_field/voxel_grid.h</includes>
    <includes id="propagation__distance__field_8h" name="propagation_distance_field.h" local="no" imported="no">moveit/distance_field/propagation_distance_field.h</includes>
    <includes id="find__internal__points_8h" name="find_internal_points.h" local="no" imported="no">moveit/distance_field/find_internal_points.h</includes>
    <member kind="function">
      <type>bool</type>
      <name>areDistanceFieldsDistancesEqual</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a5aae4127e3013a1426bb6a579e697569</anchor>
      <arglist>(const PropagationDistanceField &amp;df1, const PropagationDistanceField &amp;df2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_distance_field</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a36ef155023115e2a57fbc7f2dc0bfa9b</anchor>
      <arglist>(const PropagationDistanceField &amp;df, const EigenSTL::vector_Vector3d &amp;points, int numX, int numY, int numZ, bool do_negs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkOctomapVersusDistanceField</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>ac4b804d42ddeee2cdda9c1f51e7d820a</anchor>
      <arglist>(const PropagationDistanceField &amp;df, const octomap::OcTree &amp;octree)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>countLeafNodes</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a10281d3081673c3006780102ebeda11f</anchor>
      <arglist>(const octomap::OcTree &amp;octree)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>countOccupiedCells</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>afd0f29b02c8094367f11e26beebc5995</anchor>
      <arglist>(const PropagationDistanceField &amp;df)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist_sq</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a753f57a945baf0219240cdb9c4f3ec06</anchor>
      <arglist>(int x, int y, int z)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Eigen::Vector3d</type>
      <name>point1</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>af40e8a39eac90f9f359844e3634f516c</anchor>
      <arglist>(0.1, 0.0, 0.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Eigen::Vector3d</type>
      <name>point2</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a1dc89b739d598e9c39178c8c73141861</anchor>
      <arglist>(0.0, 0.1, 0.2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Eigen::Vector3d</type>
      <name>point3</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>adfc3db7be3b3a04cd14a3be7036a37c6</anchor>
      <arglist>(0.4, 0.0, 0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a16b85a4c2ca8d6178abdd90d9c441e9a</anchor>
      <arglist>(PropagationDistanceField &amp;pdf, int numX, int numY, int numZ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printBoth</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a6fb4f3b23fe1268982dfa1f6279c9c98</anchor>
      <arglist>(PropagationDistanceField &amp;pdf, int numX, int numY, int numZ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printNeg</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>aceb5540b8f976d06f0ad572e3ad42e99</anchor>
      <arglist>(PropagationDistanceField &amp;pdf, int numX, int numY, int numZ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printPointCoords</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a53156dc31afe045b95be0fd771691dcb</anchor>
      <arglist>(const Eigen::Vector3i &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>af15cb31ccb29c51ae5e9607f4457555b</anchor>
      <arglist>(TestPropagationDistanceField, TestAddRemovePoints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a286730b436ea5207a80f06c142c923c0</anchor>
      <arglist>(TestSignedPropagationDistanceField, TestSignedAddRemovePoints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a5ed3909da60d1854f70080d677f01dc4</anchor>
      <arglist>(TestSignedPropagationDistanceField, TestShape)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a2632b83b7e73c2cbdc8de56ae6ebe4fc</anchor>
      <arglist>(TestSignedPropagationDistanceField, TestPerformance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a6b1d1c09aba4284b160b17693afa0dde</anchor>
      <arglist>(TestSignedPropagationDistanceField, TestOcTree)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a12dbb007c6c9764bead172f42f957a3d</anchor>
      <arglist>(TestSignedPropagationDistanceField, TestReadWrite)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>depth</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a0d634b5c5f908185480d8bb0bcd17fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>height</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>ad6ea311eb95430b441c339493b6d5592</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>max_dist</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>ab01144ae4caa7ca26f3f362a43b9eb02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>max_dist_in_voxels</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a4f1a277334cdb42f3d47bf05260ec96b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>max_dist_sq_in_voxels</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>afcdacc624ec889d4823d2038ae7ef996</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>origin_x</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>abefee595222033c2e409b94808d932dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>origin_y</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a3cdb73c8918156bfdf634613f05594a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>origin_z</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>aa86c3b9c646f1dfd0d84457a35a8f1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>PERF_DEPTH</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a07093462c4cdd55463e35ef299d5fa82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>PERF_HEIGHT</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a6c082ab6dfe4f3aadc75bd2ae969c057</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>PERF_MAX_DIST</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a2cb159cc891c9462ab4f96d651873921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>PERF_ORIGIN_X</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>af07529613ec50f3669f848fc8366dca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>PERF_ORIGIN_Y</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a964cf90c110cc4c52880cca450cc3e4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>PERF_ORIGIN_Z</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a5c618c87168f8f6883c0fa75abf28ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>PERF_RESOLUTION</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a8d1adff113b3392adefe9012dc0ddb20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>PERF_WIDTH</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a09f1b1f0339e501e666e06a1b74f8d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>resolution</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a1b9127602eb182d7cd0707365fbada3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>UNIFORM_DISTANCE</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>a6adf4e058dee55a728779d69f87d6471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>width</name>
      <anchorfile>test__distance__field_8cpp.html</anchorfile>
      <anchor>ab0099ccb549d3dd2fc0291f784ce655c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_fcl_collision_detection.cpp</name>
    <filename>test__fcl__collision__detection_8cpp</filename>
    <includes id="robot__model_8h" name="robot_model.h" local="no" imported="no">moveit/robot_model/robot_model.h</includes>
    <includes id="robot__state_8h" name="robot_state.h" local="no" imported="no">moveit/robot_state/robot_state.h</includes>
    <includes id="collision__world__fcl_8h" name="collision_world_fcl.h" local="no" imported="no">moveit/collision_detection_fcl/collision_world_fcl.h</includes>
    <includes id="collision__robot__fcl_8h" name="collision_robot_fcl.h" local="no" imported="no">moveit/collision_detection_fcl/collision_robot_fcl.h</includes>
    <class kind="class">FclCollisionDetectionTester</class>
    <member kind="typedef">
      <type>collision_detection::CollisionRobotFCL</type>
      <name>DefaultCRobotType</name>
      <anchorfile>test__fcl__collision__detection_8cpp.html</anchorfile>
      <anchor>a5f51f90af6144b5e98eaa4727e9638ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>collision_detection::CollisionWorldFCL</type>
      <name>DefaultCWorldType</name>
      <anchorfile>test__fcl__collision__detection_8cpp.html</anchorfile>
      <anchor>a797cd715f2dbf2a64cac2ec143f525f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test__fcl__collision__detection_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__fcl__collision__detection_8cpp.html</anchorfile>
      <anchor>a6eabb36a4c4477163eef81e55d497f94</anchor>
      <arglist>(FclCollisionDetectionTester, InitOK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__fcl__collision__detection_8cpp.html</anchorfile>
      <anchor>a743057cec541266843dfe41de0909aa8</anchor>
      <arglist>(FclCollisionDetectionTester, DefaultNotInCollision)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__fcl__collision__detection_8cpp.html</anchorfile>
      <anchor>a49e4ba46e963dd4b40a8566a0e12ba9a</anchor>
      <arglist>(FclCollisionDetectionTester, LinksInCollision)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__fcl__collision__detection_8cpp.html</anchorfile>
      <anchor>a0df5565595b5243330f5d5fd1a264cf3</anchor>
      <arglist>(FclCollisionDetectionTester, ContactReporting)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__fcl__collision__detection_8cpp.html</anchorfile>
      <anchor>ab0ad0d57c3559d04566c11ce75b3d09c</anchor>
      <arglist>(FclCollisionDetectionTester, ContactPositions)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__fcl__collision__detection_8cpp.html</anchorfile>
      <anchor>ac1daad9d362296b1e1c001db5971cbd4</anchor>
      <arglist>(FclCollisionDetectionTester, AttachedBodyTester)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__fcl__collision__detection_8cpp.html</anchorfile>
      <anchor>afd1790e4a7b48e3e459db97b30009f90</anchor>
      <arglist>(FclCollisionDetectionTester, DiffSceneTester)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__fcl__collision__detection_8cpp.html</anchorfile>
      <anchor>abd5f70b4a395158f2bc77db1d22c9987</anchor>
      <arglist>(FclCollisionDetectionTester, ConvertObjectToAttached)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__fcl__collision__detection_8cpp.html</anchorfile>
      <anchor>ae7484d2cf081b78ba9f012d4265b3265</anchor>
      <arglist>(FclCollisionDetectionTester, TestCollisionMapAdditionSpeed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__fcl__collision__detection_8cpp.html</anchorfile>
      <anchor>a8d58bab891bb534100856137d7689565</anchor>
      <arglist>(FclCollisionDetectionTester, MoveMesh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__fcl__collision__detection_8cpp.html</anchorfile>
      <anchor>a18f15e02015b54ad12f387e8a65d10f2</anchor>
      <arglist>(FclCollisionDetectionTester, TestChangingShapeSize)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_kinematic_complex.cpp</name>
    <filename>test__kinematic__complex_8cpp</filename>
    <includes id="robot__model_8h" name="robot_model.h" local="no" imported="no">moveit/robot_model/robot_model.h</includes>
    <includes id="robot__state_8h" name="robot_state.h" local="no" imported="no">moveit/robot_state/robot_state.h</includes>
    <includes id="conversions_8h" name="conversions.h" local="no" imported="no">moveit/robot_state/conversions.h</includes>
    <includes id="profiler_8h" name="profiler.h" local="no" imported="no">moveit/profiler/profiler.h</includes>
    <class kind="class">LoadPlanningModelsPr2</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test__kinematic__complex_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__kinematic__complex_8cpp.html</anchorfile>
      <anchor>a6c1fe19a26bbfaa914da12ac1d6e1d3d</anchor>
      <arglist>(LoadPlanningModelsPr2, InitOK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__kinematic__complex_8cpp.html</anchorfile>
      <anchor>a0e801af07878675ef75fa777a90a6eb9</anchor>
      <arglist>(LoadPlanningModelsPr2, ModelInit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__kinematic__complex_8cpp.html</anchorfile>
      <anchor>a21a56d609cf50d6d770a29e8edc10a43</anchor>
      <arglist>(LoadPlanningModelsPr2, GroupInit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__kinematic__complex_8cpp.html</anchorfile>
      <anchor>afd24daeca36f57aa29acf473f71ce870</anchor>
      <arglist>(LoadPlanningModelsPr2, SubgroupInit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__kinematic__complex_8cpp.html</anchorfile>
      <anchor>a56461abc3f708b2d770d7a3df13df4e9</anchor>
      <arglist>(LoadPlanningModelsPr2, AssociatedFixedLinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>test__kinematic__complex_8cpp.html</anchorfile>
      <anchor>af67b60b65c242b1ee592ce566a6dffc1</anchor>
      <arglist>(LoadPlanningModelsPr2, FullTest)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_planning_scene.cpp</name>
    <filename>test__planning__scene_8cpp</filename>
    <includes id="planning__scene_8h" name="planning_scene.h" local="no" imported="no">moveit/planning_scene/planning_scene.h</includes>
    <member kind="function">
      <type>void</type>
      <name>loadModelFile</name>
      <anchorfile>test__planning__scene_8cpp.html</anchorfile>
      <anchor>a9d6893f67f74739947db48f1ed2247f4</anchor>
      <arglist>(std::string filename, std::string &amp;file_content)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadRobotModel</name>
      <anchorfile>test__planning__scene_8cpp.html</anchorfile>
      <anchor>a86d023b1e1f22bdc2ff7404d926b1384</anchor>
      <arglist>(urdf::ModelInterfaceSharedPtr &amp;robot_model_out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadRobotModels</name>
      <anchorfile>test__planning__scene_8cpp.html</anchorfile>
      <anchor>afa67f381456a15bca09862a57bb64629</anchor>
      <arglist>(urdf::ModelInterfaceSharedPtr &amp;robot_model_out, srdf::ModelSharedPtr &amp;srdf_model_out)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test__planning__scene_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>test__planning__scene_8cpp.html</anchorfile>
      <anchor>a8657479fb681ab94486683c9e03019fa</anchor>
      <arglist>(PlanningScene, LoadRestore)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>test__planning__scene_8cpp.html</anchorfile>
      <anchor>a0d1c50611998de50ddd48b358987159d</anchor>
      <arglist>(PlanningScene, LoadRestoreDiff)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>test__planning__scene_8cpp.html</anchorfile>
      <anchor>ab20750fd1a59d2e49c4043aeaf90ba3d</anchor>
      <arglist>(PlanningScene, MakeAttachedDiff)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>test__planning__scene_8cpp.html</anchorfile>
      <anchor>aec1e8f496b7dd98417ef25f6c3819f8d</anchor>
      <arglist>(PlanningScene, isStateValid)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_time_parameterization.cpp</name>
    <filename>test__time__parameterization_8cpp</filename>
    <includes id="robot__state_8h" name="robot_state.h" local="no" imported="no">moveit/robot_state/robot_state.h</includes>
    <includes id="robot__model_8h" name="robot_model.h" local="no" imported="no">moveit/robot_model/robot_model.h</includes>
    <includes id="robot__trajectory_8h" name="robot_trajectory.h" local="no" imported="no">moveit/robot_trajectory/robot_trajectory.h</includes>
    <includes id="iterative__spline__parameterization_8h" name="iterative_spline_parameterization.h" local="no" imported="no">moveit/trajectory_processing/iterative_spline_parameterization.h</includes>
    <includes id="iterative__time__parameterization_8h" name="iterative_time_parameterization.h" local="no" imported="no">moveit/trajectory_processing/iterative_time_parameterization.h</includes>
    <member kind="function">
      <type>int</type>
      <name>initRepeatedPointTrajectory</name>
      <anchorfile>test__time__parameterization_8cpp.html</anchorfile>
      <anchor>af5870b8c7d637a7126165e5e5f4c8372</anchor>
      <arglist>(robot_trajectory::RobotTrajectory &amp;trajectory)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initStraightTrajectory</name>
      <anchorfile>test__time__parameterization_8cpp.html</anchorfile>
      <anchor>acb889f094d85f84db6287ea06e3a69c6</anchor>
      <arglist>(robot_trajectory::RobotTrajectory &amp;trajectory, double vel_i=0.0, double vel_f=0.0, double acc_i=0.0, double acc_f=0.0)</arglist>
    </member>
    <member kind="function">
      <type>moveit::core::RobotModelConstPtr</type>
      <name>loadModel</name>
      <anchorfile>test__time__parameterization_8cpp.html</anchorfile>
      <anchor>a924802418b39c698317d972035d524ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test__time__parameterization_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTrajectory</name>
      <anchorfile>test__time__parameterization_8cpp.html</anchorfile>
      <anchor>a9e9c53951a8d9ae89aa8517fe0a63df8</anchor>
      <arglist>(robot_trajectory::RobotTrajectory &amp;trajectory)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>test__time__parameterization_8cpp.html</anchorfile>
      <anchor>aa51b79e24472e01dd59a8f68878e719e</anchor>
      <arglist>(TestTimeParameterization, TestIterativeParabolic)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>test__time__parameterization_8cpp.html</anchorfile>
      <anchor>a1fb67aa34417d03016c74d44bd7f54e0</anchor>
      <arglist>(TestTimeParameterization, TestIterativeSpline)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>test__time__parameterization_8cpp.html</anchorfile>
      <anchor>aae916733e35631f4750dbc1bbf628000</anchor>
      <arglist>(TestTimeParameterization, TestIterativeSplineAddPoints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>test__time__parameterization_8cpp.html</anchorfile>
      <anchor>ab781032eb35a81d9e63d273589f28f8f</anchor>
      <arglist>(TestTimeParameterization, TestRepeatedPoint)</arglist>
    </member>
    <member kind="variable">
      <type>moveit::core::RobotModelConstPtr</type>
      <name>rmodel</name>
      <anchorfile>test__time__parameterization_8cpp.html</anchorfile>
      <anchor>a0a200d1d6c39a0c03c9b80dd3ed788a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>robot_trajectory::RobotTrajectory</type>
      <name>trajectory</name>
      <anchorfile>test__time__parameterization_8cpp.html</anchorfile>
      <anchor>aff2c23e0aa6bda064cbd69854f36e75f</anchor>
      <arglist>(rmodel,&quot;right_arm&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>robot_state/test/test_transforms.cpp</name>
    <filename>robot__state_2test_2test__transforms_8cpp</filename>
    <includes id="robot__model_8h" name="robot_model.h" local="no" imported="no">moveit/robot_model/robot_model.h</includes>
    <includes id="robot__state_8h" name="robot_state.h" local="no" imported="no">moveit/robot_state/robot_state.h</includes>
    <class kind="class">LoadPlanningModelsPr2</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>robot__state_2test_2test__transforms_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST_F</name>
      <anchorfile>robot__state_2test_2test__transforms_8cpp.html</anchorfile>
      <anchor>a6c1fe19a26bbfaa914da12ac1d6e1d3d</anchor>
      <arglist>(LoadPlanningModelsPr2, InitOK)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>transforms/test/test_transforms.cpp</name>
    <filename>transforms_2test_2test__transforms_8cpp</filename>
    <includes id="transforms_8h" name="transforms.h" local="no" imported="no">moveit/transforms/transforms.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>transforms_2test_2test__transforms_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>transforms_2test_2test__transforms_8cpp.html</anchorfile>
      <anchor>aa55abc90e544baffe5b886de21a2a886</anchor>
      <arglist>(Transforms, Simple)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_voxel_grid.cpp</name>
    <filename>test__voxel__grid_8cpp</filename>
    <includes id="voxel__grid_8h" name="voxel_grid.h" local="no" imported="no">moveit/distance_field/voxel_grid.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test__voxel__grid_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>test__voxel__grid_8cpp.html</anchorfile>
      <anchor>a9c2cd3771b77052e5a7ad98a116057af</anchor>
      <arglist>(TestVoxelGrid, TestReadWrite)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_world.cpp</name>
    <filename>test__world_8cpp</filename>
    <includes id="world_8h" name="world.h" local="no" imported="no">moveit/collision_detection/world.h</includes>
    <class kind="struct">TestAction</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test__world_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>test__world_8cpp.html</anchorfile>
      <anchor>a0044d326dabb69316ae673240928f93a</anchor>
      <arglist>(World, AddRemoveShape)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>test__world_8cpp.html</anchorfile>
      <anchor>a88a7d0a97c515958a3bb895d1680e033</anchor>
      <arglist>(World, TrackChanges)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>TrackChangesNotify</name>
      <anchorfile>test__world_8cpp.html</anchorfile>
      <anchor>a99d09521c7c569b0e6dd2aea0bda129f</anchor>
      <arglist>(TestAction *ta, const collision_detection::World::ObjectConstPtr &amp;obj, collision_detection::World::Action action)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_world_diff.cpp</name>
    <filename>test__world__diff_8cpp</filename>
    <includes id="world__diff_8h" name="world_diff.h" local="no" imported="no">moveit/collision_detection/world_diff.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test__world__diff_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>test__world__diff_8cpp.html</anchorfile>
      <anchor>a2f2bd8d1298ae6fd9adb894720249f28</anchor>
      <arglist>(WorldDiff, TrackChanges)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>test__world__diff_8cpp.html</anchorfile>
      <anchor>a7d7ad9a7effde65a5c2a5accc8e9d77c</anchor>
      <arglist>(WorldDiff, SetWorld)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>trajectory_tools.cpp</name>
    <filename>trajectory__tools_8cpp</filename>
    <includes id="trajectory__tools_8h" name="trajectory_tools.h" local="no" imported="no">moveit/trajectory_processing/trajectory_tools.h</includes>
    <namespace>trajectory_processing</namespace>
    <member kind="function">
      <type>bool</type>
      <name>isTrajectoryEmpty</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>a2866f4aa730439adedbf4741cbf189be</anchor>
      <arglist>(const moveit_msgs::RobotTrajectory &amp;trajectory)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>trajectoryWaypointCount</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>ab1b91ad51a7d6157920fee82e4bf5416</anchor>
      <arglist>(const moveit_msgs::RobotTrajectory &amp;trajectory)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>trajectory_tools.h</name>
    <filename>trajectory__tools_8h</filename>
    <namespace>trajectory_processing</namespace>
    <member kind="function">
      <type>bool</type>
      <name>isTrajectoryEmpty</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>a2866f4aa730439adedbf4741cbf189be</anchor>
      <arglist>(const moveit_msgs::RobotTrajectory &amp;trajectory)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>trajectoryWaypointCount</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>ab1b91ad51a7d6157920fee82e4bf5416</anchor>
      <arglist>(const moveit_msgs::RobotTrajectory &amp;trajectory)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>transforms.cpp</name>
    <filename>transforms_8cpp</filename>
    <includes id="transforms_8h" name="transforms.h" local="no" imported="no">moveit/transforms/transforms.h</includes>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
  </compound>
  <compound kind="file">
    <name>transforms.h</name>
    <filename>transforms_8h</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <class kind="class">moveit::core::Transforms</class>
    <namespace>moveit</namespace>
    <namespace>moveit::core</namespace>
    <member kind="typedef">
      <type>std::map&lt; std::string, Eigen::Isometry3d, std::less&lt; std::string &gt;, Eigen::aligned_allocator&lt; std::pair&lt; const std::string, Eigen::Isometry3d &gt; &gt; &gt;</type>
      <name>FixedTransformsMap</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>aab2e7121788a9fdfc2ca8ad2fc2f78a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a54b16152f275e8796e1b62db6009c725</anchor>
      <arglist>(Transforms)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>union_constraint_sampler.cpp</name>
    <filename>union__constraint__sampler_8cpp</filename>
    <includes id="union__constraint__sampler_8h" name="union_constraint_sampler.h" local="no" imported="no">moveit/constraint_samplers/union_constraint_sampler.h</includes>
    <includes id="default__constraint__samplers_8h" name="default_constraint_samplers.h" local="no" imported="no">moveit/constraint_samplers/default_constraint_samplers.h</includes>
    <class kind="struct">constraint_samplers::OrderSamplers</class>
    <namespace>constraint_samplers</namespace>
  </compound>
  <compound kind="file">
    <name>union_constraint_sampler.h</name>
    <filename>union__constraint__sampler_8h</filename>
    <includes id="constraint__sampler_8h" name="constraint_sampler.h" local="no" imported="no">moveit/constraint_samplers/constraint_sampler.h</includes>
    <class kind="class">constraint_samplers::UnionConstraintSampler</class>
    <namespace>constraint_samplers</namespace>
  </compound>
  <compound kind="file">
    <name>utils.cpp</name>
    <filename>utils_8cpp</filename>
    <includes id="utils_8h" name="utils.h" local="no" imported="no">moveit/kinematic_constraints/utils.h</includes>
  </compound>
  <compound kind="file">
    <name>utils.h</name>
    <filename>utils_8h</filename>
    <includes id="robot__state_8h" name="robot_state.h" local="no" imported="no">moveit/robot_state/robot_state.h</includes>
    <namespace>kinematic_constraints</namespace>
    <member kind="function">
      <type>moveit_msgs::Constraints</type>
      <name>constructGoalConstraints</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>a88becba14be9ced36fefc7980271e132</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const robot_model::JointModelGroup *jmg, double tolerance_below, double tolerance_above)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::Constraints</type>
      <name>constructGoalConstraints</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>a3467fa073a3e0192aee160edcb2f6aa5</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const robot_model::JointModelGroup *jmg, double tolerance=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::Constraints</type>
      <name>constructGoalConstraints</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>ae2329e1593d3f47dc814cfa50f6099a5</anchor>
      <arglist>(const std::string &amp;link_name, const geometry_msgs::PoseStamped &amp;pose, double tolerance_pos=1e-3, double tolerance_angle=1e-2)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::Constraints</type>
      <name>constructGoalConstraints</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>a319e65d2daaa8843774674c6bd903fe0</anchor>
      <arglist>(const std::string &amp;link_name, const geometry_msgs::PoseStamped &amp;pose, const std::vector&lt; double &gt; &amp;tolerance_pos, const std::vector&lt; double &gt; &amp;tolerance_angle)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::Constraints</type>
      <name>constructGoalConstraints</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>ae8ab0389c013b701d08f97aac71872d4</anchor>
      <arglist>(const std::string &amp;link_name, const geometry_msgs::QuaternionStamped &amp;quat, double tolerance=1e-2)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::Constraints</type>
      <name>constructGoalConstraints</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>a846db8fcf4ff8971a869a8abd750200e</anchor>
      <arglist>(const std::string &amp;link_name, const geometry_msgs::Point &amp;reference_point, const geometry_msgs::PointStamped &amp;goal_point, double tolerance=1e-3)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::Constraints</type>
      <name>constructGoalConstraints</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>a30479c8676e59a464521633f30ad5350</anchor>
      <arglist>(const std::string &amp;link_name, const geometry_msgs::PointStamped &amp;goal_point, double tolerance=1e-3)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>countIndividualConstraints</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>a17218c618d802ee4b35bf5a6b965a621</anchor>
      <arglist>(const moveit_msgs::Constraints &amp;constr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>ac413186f4440480526be840dbc824a6c</anchor>
      <arglist>(const moveit_msgs::Constraints &amp;constr)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::Constraints</type>
      <name>mergeConstraints</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>ab33b027559ab6207004a5866c3794aed</anchor>
      <arglist>(const moveit_msgs::Constraints &amp;first, const moveit_msgs::Constraints &amp;second)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>version.cpp</name>
    <filename>version_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>version_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>voxel_grid.h</name>
    <filename>voxel__grid_8h</filename>
    <includes id="declare__ptr_8h" name="declare_ptr.h" local="no" imported="no">moveit/macros/declare_ptr.h</includes>
    <class kind="class">distance_field::VoxelGrid</class>
    <namespace>distance_field</namespace>
    <member kind="enumeration">
      <type></type>
      <name>Dimension</name>
      <anchorfile>namespacedistance__field.html</anchorfile>
      <anchor>a954c8f1a8b902bca58e60b3c5c981801</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIM_X</name>
      <anchorfile>namespacedistance__field.html</anchorfile>
      <anchor>a954c8f1a8b902bca58e60b3c5c981801a80f68b8c8e9e1833758d324099520552</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIM_Y</name>
      <anchorfile>namespacedistance__field.html</anchorfile>
      <anchor>a954c8f1a8b902bca58e60b3c5c981801ab0bbf064c7c728615d923c1c8496e30e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIM_Z</name>
      <anchorfile>namespacedistance__field.html</anchorfile>
      <anchor>a954c8f1a8b902bca58e60b3c5c981801a4f31d977b7d65594ae36a0d70e3e207e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>world.cpp</name>
    <filename>world_8cpp</filename>
    <includes id="world_8h" name="world.h" local="no" imported="no">moveit/collision_detection/world.h</includes>
    <namespace>collision_detection</namespace>
  </compound>
  <compound kind="file">
    <name>world.h</name>
    <filename>world_8h</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <class kind="class">collision_detection::World::Action</class>
    <class kind="struct">collision_detection::World::Object</class>
    <class kind="class">collision_detection::World::Observer</class>
    <class kind="class">collision_detection::World::ObserverHandle</class>
    <class kind="class">collision_detection::World</class>
    <namespace>collision_detection</namespace>
    <namespace>shapes</namespace>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceshapes.html</anchorfile>
      <anchor>a108814a0910c33efcd0897cda420fbab</anchor>
      <arglist>(Shape)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a21dc4646f3031b7a467c3075e71c6be9</anchor>
      <arglist>(World)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>world_diff.cpp</name>
    <filename>world__diff_8cpp</filename>
    <includes id="world__diff_8h" name="world_diff.h" local="no" imported="no">moveit/collision_detection/world_diff.h</includes>
    <namespace>collision_detection</namespace>
  </compound>
  <compound kind="file">
    <name>world_diff.h</name>
    <filename>world__diff_8h</filename>
    <includes id="world_8h" name="world.h" local="no" imported="no">moveit/collision_detection/world.h</includes>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">moveit/macros/class_forward.h</includes>
    <class kind="class">collision_detection::WorldDiff</class>
    <namespace>collision_detection</namespace>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a7b479d7f0e8c20125a0495481f96aa04</anchor>
      <arglist>(WorldDiff)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit::core::AABB</name>
    <filename>classmoveit_1_1core_1_1AABB.html</filename>
    <member kind="function">
      <type>void</type>
      <name>extendWithTransformedBox</name>
      <anchorfile>classmoveit_1_1core_1_1AABB.html</anchorfile>
      <anchor>a82a6a42a7e743906c9f4b607cc4143e3</anchor>
      <arglist>(const Eigen::Isometry3d &amp;transform, const Eigen::Vector3d &amp;box)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>collision_detection::World::Action</name>
    <filename>classcollision__detection_1_1World_1_1Action.html</filename>
    <member kind="function">
      <type></type>
      <name>Action</name>
      <anchorfile>classcollision__detection_1_1World_1_1Action.html</anchorfile>
      <anchor>aaa2760d29ce5bc138d9d5c425e28b207</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Action</name>
      <anchorfile>classcollision__detection_1_1World_1_1Action.html</anchorfile>
      <anchor>a20b11e7354f887ec2215ec9836a66571</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ActionBits</name>
      <anchorfile>classcollision__detection_1_1World_1_1Action.html</anchorfile>
      <anchor>ab703a4d9cc3e280785ccc7207ee54891</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>action_</name>
      <anchorfile>classcollision__detection_1_1World_1_1Action.html</anchorfile>
      <anchor>a7f798df8025c5a05847da312918bf942</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>collision_detection::AllowedCollisionMatrix</name>
    <filename>classcollision__detection_1_1AllowedCollisionMatrix.html</filename>
    <member kind="function">
      <type></type>
      <name>AllowedCollisionMatrix</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>af87dffc81a474f9d521241e91d366a8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AllowedCollisionMatrix</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a27818d1c0c20f67e63565ab6a1f52c93</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;names, bool allowed=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AllowedCollisionMatrix</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>af8d12440e78cb88b6f1e0546e935743a</anchor>
      <arglist>(const moveit_msgs::AllowedCollisionMatrix &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AllowedCollisionMatrix</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>affe10c7573e1851d97519ebc6aa69d02</anchor>
      <arglist>(const AllowedCollisionMatrix &amp;acm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a2139ebe716a44a42313bf1caf42a85ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAllEntryNames</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>af2e2c79d8ed4f0f822b60644766d9e8e</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAllowedCollision</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a4aebb17e8df857fb7946c8172bcda4d9</anchor>
      <arglist>(const std::string &amp;name1, const std::string &amp;name2, DecideContactFn &amp;fn) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAllowedCollision</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>aea22c997b442cf0647b11129d970f5a6</anchor>
      <arglist>(const std::string &amp;name1, const std::string &amp;name2, AllowedCollision::Type &amp;allowed_collision) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDefaultEntry</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>ae28b246216be0b437e991fac7bbcdbfa</anchor>
      <arglist>(const std::string &amp;name, AllowedCollision::Type &amp;allowed_collision) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDefaultEntry</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a93ce6b3def2d9c9564c84ef12940422d</anchor>
      <arglist>(const std::string &amp;name, DecideContactFn &amp;fn) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getEntry</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a9a6b3c84de73ca2af7e085440c56416e</anchor>
      <arglist>(const std::string &amp;name1, const std::string &amp;name2, AllowedCollision::Type &amp;allowed_collision_type) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getEntry</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a35c9bf503a4f4d807b926b39fa203dd8</anchor>
      <arglist>(const std::string &amp;name1, const std::string &amp;name2, DecideContactFn &amp;fn) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMessage</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a6f19f6e763ef7e9276b97bb98d452c49</anchor>
      <arglist>(moveit_msgs::AllowedCollisionMatrix &amp;msg) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getSize</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>afccc7e44f246391170ee9aa4891d49de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasEntry</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a4244deb4150ee90098aa0e9c94226aaf</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasEntry</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a4f60a5c939e64b0df1469c376e053a6b</anchor>
      <arglist>(const std::string &amp;name1, const std::string &amp;name2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a8da01b29190d99d3378412a085db1ad9</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeEntry</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>ac07583f079b22f00386ec20abf69f03a</anchor>
      <arglist>(const std::string &amp;name1, const std::string &amp;name2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeEntry</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a1e58664c016b9ca7a839685be82d9c4e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultEntry</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a9c90706b29cdc1c1c5ad57258890908a</anchor>
      <arglist>(const std::string &amp;name, bool allowed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultEntry</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>af9e24cedc14905986d48c425d557206a</anchor>
      <arglist>(const std::string &amp;name, const DecideContactFn &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEntry</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a2ad7ed411f25bcc382d447dec0f87530</anchor>
      <arglist>(const std::string &amp;name1, const std::string &amp;name2, bool allowed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEntry</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a65b5f91043743f61434864b7fc77325b</anchor>
      <arglist>(const std::string &amp;name1, const std::string &amp;name2, const DecideContactFn &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEntry</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a4c7f129b6672cb426908ec45032a5b72</anchor>
      <arglist>(const std::string &amp;name, bool allowed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEntry</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a8e61b060037cf82a5937da6cf0852355</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;other_names, bool allowed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEntry</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>ab87c654ae6e64072cc7175cd13261494</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;names1, const std::vector&lt; std::string &gt; &amp;names2, bool allowed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEntry</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a4fc63659cdcb1e807fb2cec4e6f36ff1</anchor>
      <arglist>(bool allowed)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, std::map&lt; std::string, DecideContactFn &gt; &gt;</type>
      <name>allowed_contacts_</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a99716acbc0038a34f220dbb39945f894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, DecideContactFn &gt;</type>
      <name>default_allowed_contacts_</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a1d8c53b54baf2903170645d3906e5825</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, AllowedCollision::Type &gt;</type>
      <name>default_entries_</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a387ba4e6b368cb5c0300c5a6d7a91db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, std::map&lt; std::string, AllowedCollision::Type &gt; &gt;</type>
      <name>entries_</name>
      <anchorfile>classcollision__detection_1_1AllowedCollisionMatrix.html</anchorfile>
      <anchor>a8e2fd7c9ce7616148244ddb56aaede7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit::core::AttachedBody</name>
    <filename>classmoveit_1_1core_1_1AttachedBody.html</filename>
    <member kind="function">
      <type></type>
      <name>AttachedBody</name>
      <anchorfile>classmoveit_1_1core_1_1AttachedBody.html</anchorfile>
      <anchor>a50282a5a8ed6a2b6447d9245de71e663</anchor>
      <arglist>(const LinkModel *link, const std::string &amp;id, const std::vector&lt; shapes::ShapeConstPtr &gt; &amp;shapes, const EigenSTL::vector_Isometry3d &amp;attach_trans, const std::set&lt; std::string &gt; &amp;touch_links, const trajectory_msgs::JointTrajectory &amp;attach_posture)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeTransform</name>
      <anchorfile>classmoveit_1_1core_1_1AttachedBody.html</anchorfile>
      <anchor>a7f5205d9981c02ffb6b5758babdc1ef0</anchor>
      <arglist>(const Eigen::Isometry3d &amp;parent_link_global_transform)</arglist>
    </member>
    <member kind="function">
      <type>const LinkModel *</type>
      <name>getAttachedLink</name>
      <anchorfile>classmoveit_1_1core_1_1AttachedBody.html</anchorfile>
      <anchor>acc0fc6dc87e049c83a955aa7bd65c8c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getAttachedLinkName</name>
      <anchorfile>classmoveit_1_1core_1_1AttachedBody.html</anchorfile>
      <anchor>ad732b49a797bd6ff83e776c51f294920</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const trajectory_msgs::JointTrajectory &amp;</type>
      <name>getDetachPosture</name>
      <anchorfile>classmoveit_1_1core_1_1AttachedBody.html</anchorfile>
      <anchor>acc2224c06d818efad0e920a0a1fde5a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const EigenSTL::vector_Isometry3d &amp;</type>
      <name>getFixedTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1AttachedBody.html</anchorfile>
      <anchor>aed0f2b8b0374c5080e646cb730e8f1dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const EigenSTL::vector_Isometry3d &amp;</type>
      <name>getGlobalCollisionBodyTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1AttachedBody.html</anchorfile>
      <anchor>a68a3503d854abacd63fc2ad59d737049</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classmoveit_1_1core_1_1AttachedBody.html</anchorfile>
      <anchor>aa2dc2be97ea3d0815f54ba578b2fbfad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; shapes::ShapeConstPtr &gt; &amp;</type>
      <name>getShapes</name>
      <anchorfile>classmoveit_1_1core_1_1AttachedBody.html</anchorfile>
      <anchor>a0e34f5f8a6f65e3b3af7ba9f6b1d64ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; std::string &gt; &amp;</type>
      <name>getTouchLinks</name>
      <anchorfile>classmoveit_1_1core_1_1AttachedBody.html</anchorfile>
      <anchor>af44a755810b4e3c3612515e60843948c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPadding</name>
      <anchorfile>classmoveit_1_1core_1_1AttachedBody.html</anchorfile>
      <anchor>a5bcf3884cb5922c5364b20b05a3bd608</anchor>
      <arglist>(double padding)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classmoveit_1_1core_1_1AttachedBody.html</anchorfile>
      <anchor>ae153201153b46085a0966ac90dfd0f61</anchor>
      <arglist>(double scale)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AttachedBody</name>
      <anchorfile>classmoveit_1_1core_1_1AttachedBody.html</anchorfile>
      <anchor>a0eb18ac015702bffe9b8c499597ab4a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EigenSTL::vector_Isometry3d</type>
      <name>attach_trans_</name>
      <anchorfile>classmoveit_1_1core_1_1AttachedBody.html</anchorfile>
      <anchor>a53b1c393e8a81431f9eeff9c4d4f4235</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>trajectory_msgs::JointTrajectory</type>
      <name>detach_posture_</name>
      <anchorfile>classmoveit_1_1core_1_1AttachedBody.html</anchorfile>
      <anchor>ab78e4701f980a6d20ca5572401e27784</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EigenSTL::vector_Isometry3d</type>
      <name>global_collision_body_transforms_</name>
      <anchorfile>classmoveit_1_1core_1_1AttachedBody.html</anchorfile>
      <anchor>a9aa1ab1823fc1ad413f7cbb1c0204e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>id_</name>
      <anchorfile>classmoveit_1_1core_1_1AttachedBody.html</anchorfile>
      <anchor>a7fd77dff55d6e2ce68b8494b2fc12537</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const LinkModel *</type>
      <name>parent_link_model_</name>
      <anchorfile>classmoveit_1_1core_1_1AttachedBody.html</anchorfile>
      <anchor>a55429c22e3ed19dbdb643fc456b15b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; shapes::ShapeConstPtr &gt;</type>
      <name>shapes_</name>
      <anchorfile>classmoveit_1_1core_1_1AttachedBody.html</anchorfile>
      <anchor>ae99416316d34f99b2dc38b1bd1275bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::set&lt; std::string &gt;</type>
      <name>touch_links_</name>
      <anchorfile>classmoveit_1_1core_1_1AttachedBody.html</anchorfile>
      <anchor>a4767ffb82fcfbdec8f82ae889b4bb313</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>moveit::tools::Profiler::AvgInfo</name>
    <filename>structmoveit_1_1tools_1_1Profiler_1_1AvgInfo.html</filename>
    <member kind="variable">
      <type>unsigned long int</type>
      <name>parts</name>
      <anchorfile>structmoveit_1_1tools_1_1Profiler_1_1AvgInfo.html</anchorfile>
      <anchor>a938251d79a409f46a032fdc6440abba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>total</name>
      <anchorfile>structmoveit_1_1tools_1_1Profiler_1_1AvgInfo.html</anchorfile>
      <anchor>a367b4a0a31582dfb7199d76e76814915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>totalSqr</name>
      <anchorfile>structmoveit_1_1tools_1_1Profiler_1_1AvgInfo.html</anchorfile>
      <anchor>afb6775540dee9015bb3eef6adcdcd66e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit::tools::BackgroundProcessing</name>
    <filename>classmoveit_1_1tools_1_1BackgroundProcessing.html</filename>
    <member kind="enumvalue">
      <name>ADD</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>ab9e5dab259098f46b9a71d4c982d233ba934cf03f14904e6f86eb78e6052082d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPLETE</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>ab9e5dab259098f46b9a71d4c982d233ba9526e1d2f5a18d8dd24a652ee89cbeb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; void()&gt;</type>
      <name>JobCallback</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>a95578bdd6e6b54a08e51f2b32fc74f78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>JobEvent</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>ab9e5dab259098f46b9a71d4c982d233b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADD</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>ab9e5dab259098f46b9a71d4c982d233ba934cf03f14904e6f86eb78e6052082d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REMOVE</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>ab9e5dab259098f46b9a71d4c982d233ba0b9dccd1cde1d0556c12a638f0edbd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPLETE</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>ab9e5dab259098f46b9a71d4c982d233ba9526e1d2f5a18d8dd24a652ee89cbeb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; void(JobEvent, const std::string &amp;)&gt;</type>
      <name>JobUpdateCallback</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>a11deda0b0f8dcd207ae061616e420546</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REMOVE</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>ab9e5dab259098f46b9a71d4c982d233ba0b9dccd1cde1d0556c12a638f0edbd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addJob</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>afc0bd8d3dc2ad1e17946d6ef2b441c80</anchor>
      <arglist>(const JobCallback &amp;job, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BackgroundProcessing</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>ae204830b7100ce34a0c494801fcdcc0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>a50c16096b3407addf1aabd6f1d358d3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearJobUpdateEvent</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>a5510d2fe73b3dc391365d78394c38853</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getJobCount</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>ad75a2c8ff7637b81251ae2f32fbdfe89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJobUpdateEvent</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>a90dc9dd1f19fa8e5e975d0a0c62923aa</anchor>
      <arglist>(const JobUpdateCallback &amp;event)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BackgroundProcessing</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>a15526519ab82b5ef8e1260bab9e2da46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>processingThread</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>a0304864fd376eec1b4f725aafe081a0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>action_lock_</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>a63f532c0ee4174bef67dee99eff7ec70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::deque&lt; std::string &gt;</type>
      <name>action_names_</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>aa4fdd0440e87201acc7f3f64b2fe0e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::deque&lt; JobCallback &gt;</type>
      <name>actions_</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>a0a40a4f659c01991dd44de62de02b1dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::condition_variable</type>
      <name>new_action_condition_</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>a81a3549b76a4adb5e3e8a60adf11a603</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>processing_</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>afba245e8574f9b78b77acd15493d5095</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; boost::thread &gt;</type>
      <name>processing_thread_</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>ad9ce9fb91796818c69cc967e0b619901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>JobUpdateCallback</type>
      <name>queue_change_event_</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>ac413e8ece35a10654e42bf06db49b05c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>run_processing_thread_</name>
      <anchorfile>classmoveit_1_1tools_1_1BackgroundProcessing.html</anchorfile>
      <anchor>ab3b2e6e4234aa02beef5fda339266964</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>collision_detection::CollisionData</name>
    <filename>structcollision__detection_1_1CollisionData.html</filename>
    <member kind="function">
      <type></type>
      <name>CollisionData</name>
      <anchorfile>structcollision__detection_1_1CollisionData.html</anchorfile>
      <anchor>ac02433b9053141809b69b2788ee871fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionData</name>
      <anchorfile>structcollision__detection_1_1CollisionData.html</anchorfile>
      <anchor>a1d9db235d4a3711d6e5f2897232a3997</anchor>
      <arglist>(const CollisionRequest *req, CollisionResult *res, const AllowedCollisionMatrix *acm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableGroup</name>
      <anchorfile>structcollision__detection_1_1CollisionData.html</anchorfile>
      <anchor>a905bc4540c6c6c11db28fefb95960284</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;kmodel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CollisionData</name>
      <anchorfile>structcollision__detection_1_1CollisionData.html</anchorfile>
      <anchor>a48e6d5d05f4a9c41b53f783bed7096c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const AllowedCollisionMatrix *</type>
      <name>acm_</name>
      <anchorfile>structcollision__detection_1_1CollisionData.html</anchorfile>
      <anchor>a1f844247961cabea352ad7856877b83e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::set&lt; const robot_model::LinkModel * &gt; *</type>
      <name>active_components_only_</name>
      <anchorfile>structcollision__detection_1_1CollisionData.html</anchorfile>
      <anchor>aaaa22a26fa04ecc85a8d70d904734c07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>done_</name>
      <anchorfile>structcollision__detection_1_1CollisionData.html</anchorfile>
      <anchor>abcad47b7b2460e079bacb3bd9d64fb36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CollisionRequest *</type>
      <name>req_</name>
      <anchorfile>structcollision__detection_1_1CollisionData.html</anchorfile>
      <anchor>ac3acdd37bb04ca7cb01121fb9c8e50a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CollisionResult *</type>
      <name>res_</name>
      <anchorfile>structcollision__detection_1_1CollisionData.html</anchorfile>
      <anchor>abfbfa11a207e6fcc447fc863a60646ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>planning_scene::PlanningScene::CollisionDetector</name>
    <filename>structplanning__scene_1_1PlanningScene_1_1CollisionDetector.html</filename>
    <member kind="function">
      <type>void</type>
      <name>copyPadding</name>
      <anchorfile>structplanning__scene_1_1PlanningScene_1_1CollisionDetector.html</anchorfile>
      <anchor>ab19b982085f3a9faa6d5732761c724a5</anchor>
      <arglist>(const CollisionDetector &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findParent</name>
      <anchorfile>structplanning__scene_1_1PlanningScene_1_1CollisionDetector.html</anchorfile>
      <anchor>ae1b6654a9cd9c6264ac8114b36ce73c5</anchor>
      <arglist>(const PlanningScene &amp;scene)</arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::CollisionRobotConstPtr &amp;</type>
      <name>getCollisionRobot</name>
      <anchorfile>structplanning__scene_1_1PlanningScene_1_1CollisionDetector.html</anchorfile>
      <anchor>a95023a5ee5b2f4eb82948210ceff8acf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::CollisionRobotConstPtr &amp;</type>
      <name>getCollisionRobotUnpadded</name>
      <anchorfile>structplanning__scene_1_1PlanningScene_1_1CollisionDetector.html</anchorfile>
      <anchor>a60565fc9175bb86f066c56433c0c8e09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>collision_detection::CollisionDetectorAllocatorPtr</type>
      <name>alloc_</name>
      <anchorfile>structplanning__scene_1_1PlanningScene_1_1CollisionDetector.html</anchorfile>
      <anchor>a23204d7aab8a29daf5d86a424991db7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>collision_detection::CollisionRobotPtr</type>
      <name>crobot_</name>
      <anchorfile>structplanning__scene_1_1PlanningScene_1_1CollisionDetector.html</anchorfile>
      <anchor>aec824a302456d55601509e8a61bc3b74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>collision_detection::CollisionRobotConstPtr</type>
      <name>crobot_const_</name>
      <anchorfile>structplanning__scene_1_1PlanningScene_1_1CollisionDetector.html</anchorfile>
      <anchor>a55c82c9bb7208b620a229e7292294784</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>collision_detection::CollisionRobotPtr</type>
      <name>crobot_unpadded_</name>
      <anchorfile>structplanning__scene_1_1PlanningScene_1_1CollisionDetector.html</anchorfile>
      <anchor>a112412e037ca7add1786f0d158d2acb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>collision_detection::CollisionRobotConstPtr</type>
      <name>crobot_unpadded_const_</name>
      <anchorfile>structplanning__scene_1_1PlanningScene_1_1CollisionDetector.html</anchorfile>
      <anchor>a9ddbbe6cf73e5ec13fa178236895a320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>collision_detection::CollisionWorldPtr</type>
      <name>cworld_</name>
      <anchorfile>structplanning__scene_1_1PlanningScene_1_1CollisionDetector.html</anchorfile>
      <anchor>afce557744eea8bebb29d01b42ca6e576</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>collision_detection::CollisionWorldConstPtr</type>
      <name>cworld_const_</name>
      <anchorfile>structplanning__scene_1_1PlanningScene_1_1CollisionDetector.html</anchorfile>
      <anchor>a91b9d37143e41dd188a5d0e18d68b374</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CollisionDetectorConstPtr</type>
      <name>parent_</name>
      <anchorfile>structplanning__scene_1_1PlanningScene_1_1CollisionDetector.html</anchorfile>
      <anchor>a63200607f3359fccb577e227596dfa2c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>collision_detection::CollisionDetectorAllocator</name>
    <filename>classcollision__detection_1_1CollisionDetectorAllocator.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual CollisionRobotPtr</type>
      <name>allocateRobot</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocator.html</anchorfile>
      <anchor>a4b4b0f1d3c3cfe191e139f06fb14ac88</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;robot_model) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CollisionRobotPtr</type>
      <name>allocateRobot</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocator.html</anchorfile>
      <anchor>a15e5171b06f7c60a0c0b2d222c6ed7c4</anchor>
      <arglist>(const CollisionRobotConstPtr &amp;orig) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CollisionWorldPtr</type>
      <name>allocateWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocator.html</anchorfile>
      <anchor>a33fc1a3b18c5455122280856997144c9</anchor>
      <arglist>(const WorldPtr &amp;world) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CollisionWorldPtr</type>
      <name>allocateWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocator.html</anchorfile>
      <anchor>ad4f1bf4538c7217a9f8e71c00b032fd5</anchor>
      <arglist>(const CollisionWorldConstPtr &amp;orig, const WorldPtr &amp;world) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocator.html</anchorfile>
      <anchor>afce137d3c7fcb5d7c05fbdaaad6b8a42</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>collision_detection::CollisionDetectorAllocatorAllValid</name>
    <filename>classcollision__detection_1_1CollisionDetectorAllocatorAllValid.html</filename>
    <base>CollisionDetectorAllocatorTemplate&lt; CollisionWorldAllValid, CollisionRobotAllValid, CollisionDetectorAllocatorAllValid &gt;</base>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>NAME_</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocatorAllValid.html</anchorfile>
      <anchor>a910082bc37b3ff11189e7ccba72db4e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>collision_detection::CollisionDetectorAllocatorFCL</name>
    <filename>classcollision__detection_1_1CollisionDetectorAllocatorFCL.html</filename>
    <base>CollisionDetectorAllocatorTemplate&lt; CollisionWorldFCL, CollisionRobotFCL, CollisionDetectorAllocatorFCL &gt;</base>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>NAME_</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocatorFCL.html</anchorfile>
      <anchor>a9fba3cc415f427fbd5c57760315df47c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>collision_detection::CollisionDetectorAllocatorTemplate</name>
    <filename>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</filename>
    <templarg>CollisionWorldType</templarg>
    <templarg>CollisionRobotType</templarg>
    <templarg>CollisionDetectorAllocatorType</templarg>
    <base>collision_detection::CollisionDetectorAllocator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual CollisionRobotPtr</type>
      <name>allocateRobot</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</anchorfile>
      <anchor>a54ee86b9da4a07b842ecb04b6a1d4361</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;robot_model) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CollisionRobotPtr</type>
      <name>allocateRobot</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</anchorfile>
      <anchor>a8971946b701f2edf9c678747ecc31797</anchor>
      <arglist>(const CollisionRobotConstPtr &amp;orig) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CollisionWorldPtr</type>
      <name>allocateWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</anchorfile>
      <anchor>a150204a165bc7ac0b4075a39f23f096a</anchor>
      <arglist>(const WorldPtr &amp;world) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CollisionWorldPtr</type>
      <name>allocateWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</anchorfile>
      <anchor>a1f94a61686365eb942d7bd6620496dd1</anchor>
      <arglist>(const CollisionWorldConstPtr &amp;orig, const WorldPtr &amp;world) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</anchorfile>
      <anchor>a64e6530e91617bfc6d0170ef44b3105e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionDetectorAllocatorPtr</type>
      <name>create</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</anchorfile>
      <anchor>a185e9dc142f9c377426d989edff64e70</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CollisionDetectorAllocatorTemplate&lt; CollisionWorldAllValid, CollisionRobotAllValid, CollisionDetectorAllocatorAllValid &gt;</name>
    <filename>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</filename>
    <base>collision_detection::CollisionDetectorAllocator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual CollisionRobotPtr</type>
      <name>allocateRobot</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</anchorfile>
      <anchor>a54ee86b9da4a07b842ecb04b6a1d4361</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;robot_model) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CollisionRobotPtr</type>
      <name>allocateRobot</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</anchorfile>
      <anchor>a8971946b701f2edf9c678747ecc31797</anchor>
      <arglist>(const CollisionRobotConstPtr &amp;orig) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CollisionWorldPtr</type>
      <name>allocateWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</anchorfile>
      <anchor>a150204a165bc7ac0b4075a39f23f096a</anchor>
      <arglist>(const WorldPtr &amp;world) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CollisionWorldPtr</type>
      <name>allocateWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</anchorfile>
      <anchor>a1f94a61686365eb942d7bd6620496dd1</anchor>
      <arglist>(const CollisionWorldConstPtr &amp;orig, const WorldPtr &amp;world) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</anchorfile>
      <anchor>a64e6530e91617bfc6d0170ef44b3105e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionDetectorAllocatorPtr</type>
      <name>create</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</anchorfile>
      <anchor>a185e9dc142f9c377426d989edff64e70</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CollisionDetectorAllocatorTemplate&lt; CollisionWorldFCL, CollisionRobotFCL, CollisionDetectorAllocatorFCL &gt;</name>
    <filename>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</filename>
    <base>collision_detection::CollisionDetectorAllocator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual CollisionRobotPtr</type>
      <name>allocateRobot</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</anchorfile>
      <anchor>a54ee86b9da4a07b842ecb04b6a1d4361</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;robot_model) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CollisionRobotPtr</type>
      <name>allocateRobot</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</anchorfile>
      <anchor>a8971946b701f2edf9c678747ecc31797</anchor>
      <arglist>(const CollisionRobotConstPtr &amp;orig) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CollisionWorldPtr</type>
      <name>allocateWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</anchorfile>
      <anchor>a150204a165bc7ac0b4075a39f23f096a</anchor>
      <arglist>(const WorldPtr &amp;world) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CollisionWorldPtr</type>
      <name>allocateWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</anchorfile>
      <anchor>a1f94a61686365eb942d7bd6620496dd1</anchor>
      <arglist>(const CollisionWorldConstPtr &amp;orig, const WorldPtr &amp;world) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</anchorfile>
      <anchor>a64e6530e91617bfc6d0170ef44b3105e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionDetectorAllocatorPtr</type>
      <name>create</name>
      <anchorfile>classcollision__detection_1_1CollisionDetectorAllocatorTemplate.html</anchorfile>
      <anchor>a185e9dc142f9c377426d989edff64e70</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>collision_detection::CollisionGeometryData</name>
    <filename>structcollision__detection_1_1CollisionGeometryData.html</filename>
    <member kind="function">
      <type></type>
      <name>CollisionGeometryData</name>
      <anchorfile>structcollision__detection_1_1CollisionGeometryData.html</anchorfile>
      <anchor>aacc6e25aa62b5dc93fba3005f5a02781</anchor>
      <arglist>(const robot_model::LinkModel *link, int index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionGeometryData</name>
      <anchorfile>structcollision__detection_1_1CollisionGeometryData.html</anchorfile>
      <anchor>a0b4ccf4b53a690ea13f7f5af4a56a3ad</anchor>
      <arglist>(const robot_state::AttachedBody *ab, int index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionGeometryData</name>
      <anchorfile>structcollision__detection_1_1CollisionGeometryData.html</anchorfile>
      <anchor>a8fc44b167697a5d096c40ba3f6905bd3</anchor>
      <arglist>(const World::Object *obj, int index)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getID</name>
      <anchorfile>structcollision__detection_1_1CollisionGeometryData.html</anchorfile>
      <anchor>ad4478ed6d81fa3d05beffafffe783414</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTypeString</name>
      <anchorfile>structcollision__detection_1_1CollisionGeometryData.html</anchorfile>
      <anchor>ad295492b718b047834ae59e677490cce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sameObject</name>
      <anchorfile>structcollision__detection_1_1CollisionGeometryData.html</anchorfile>
      <anchor>aec8c11b7e2527100014de876fef113de</anchor>
      <arglist>(const CollisionGeometryData &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>const robot_state::AttachedBody *</type>
      <name>ab</name>
      <anchorfile>structcollision__detection_1_1CollisionGeometryData.html</anchorfile>
      <anchor>a00a3d1dd250b44fb62bc0333d53c9da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const robot_model::LinkModel *</type>
      <name>link</name>
      <anchorfile>structcollision__detection_1_1CollisionGeometryData.html</anchorfile>
      <anchor>a8772b36fbaa5e5b2e721d9bfc44e2798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const World::Object *</type>
      <name>obj</name>
      <anchorfile>structcollision__detection_1_1CollisionGeometryData.html</anchorfile>
      <anchor>ad9e140c96c330002c6a2af38f1c99171</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union collision_detection::CollisionGeometryData::@0</type>
      <name>ptr</name>
      <anchorfile>structcollision__detection_1_1CollisionGeometryData.html</anchorfile>
      <anchor>a68a1c8997c9d7ce93f21c9597bd51eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const void *</type>
      <name>raw</name>
      <anchorfile>structcollision__detection_1_1CollisionGeometryData.html</anchorfile>
      <anchor>ab822b50048e9cdbab111054c3eddde38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>shape_index</name>
      <anchorfile>structcollision__detection_1_1CollisionGeometryData.html</anchorfile>
      <anchor>a73eed4cdbd2a48124f12e6b4e30a4a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyType</type>
      <name>type</name>
      <anchorfile>structcollision__detection_1_1CollisionGeometryData.html</anchorfile>
      <anchor>aeea61b8f87a9b47cc3143c1da3caff62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>collision_detection::CollisionPlugin</name>
    <filename>classcollision__detection_1_1CollisionPlugin.html</filename>
    <member kind="function">
      <type></type>
      <name>CollisionPlugin</name>
      <anchorfile>classcollision__detection_1_1CollisionPlugin.html</anchorfile>
      <anchor>ad3312e457276a8254ebd85b847dd705e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>initialize</name>
      <anchorfile>classcollision__detection_1_1CollisionPlugin.html</anchorfile>
      <anchor>a01d1aa5e6aa17c0d3a6e1a4ad18b700f</anchor>
      <arglist>(const planning_scene::PlanningScenePtr &amp;scene, bool exclusive) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CollisionPlugin</name>
      <anchorfile>classcollision__detection_1_1CollisionPlugin.html</anchorfile>
      <anchor>a6b71d8a13e6f653d3777f413696f488b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>collision_detection::CollisionRequest</name>
    <filename>structcollision__detection_1_1CollisionRequest.html</filename>
    <member kind="function">
      <type></type>
      <name>CollisionRequest</name>
      <anchorfile>structcollision__detection_1_1CollisionRequest.html</anchorfile>
      <anchor>a982d0f634496fbcd183f9cad7cfcf902</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CollisionRequest</name>
      <anchorfile>structcollision__detection_1_1CollisionRequest.html</anchorfile>
      <anchor>a3df9918a279bd29028907427bc05489a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>contacts</name>
      <anchorfile>structcollision__detection_1_1CollisionRequest.html</anchorfile>
      <anchor>a5360522b02a383072fb881fc08d15788</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>cost</name>
      <anchorfile>structcollision__detection_1_1CollisionRequest.html</anchorfile>
      <anchor>a8737703574324c60f5e407deb1cc4ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>distance</name>
      <anchorfile>structcollision__detection_1_1CollisionRequest.html</anchorfile>
      <anchor>af004da8744b925118ebd7cf5ef3c42e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>group_name</name>
      <anchorfile>structcollision__detection_1_1CollisionRequest.html</anchorfile>
      <anchor>a1c9c857d83d4f98bef7a1fb586561fa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::function&lt; bool(const CollisionResult &amp;)&gt;</type>
      <name>is_done</name>
      <anchorfile>structcollision__detection_1_1CollisionRequest.html</anchorfile>
      <anchor>a5a7706bfed4db4b587f99a793a82d2a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>max_contacts</name>
      <anchorfile>structcollision__detection_1_1CollisionRequest.html</anchorfile>
      <anchor>a8dac54b1f11971b246df751eff3242d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>max_contacts_per_pair</name>
      <anchorfile>structcollision__detection_1_1CollisionRequest.html</anchorfile>
      <anchor>adaea18ae293e533557ccb8629445232f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>max_cost_sources</name>
      <anchorfile>structcollision__detection_1_1CollisionRequest.html</anchorfile>
      <anchor>a5115bd166fd2476e68a31103c606cb19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>min_cost_density</name>
      <anchorfile>structcollision__detection_1_1CollisionRequest.html</anchorfile>
      <anchor>acc2b190319b8a49d14cb39aeff3aef19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>structcollision__detection_1_1CollisionRequest.html</anchorfile>
      <anchor>a4c5f87dc1f2be6cc0c3463a319b6ca36</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>collision_detection::CollisionResult</name>
    <filename>structcollision__detection_1_1CollisionResult.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::pair&lt; std::string, std::string &gt;, std::vector&lt; Contact &gt; &gt;</type>
      <name>ContactMap</name>
      <anchorfile>structcollision__detection_1_1CollisionResult.html</anchorfile>
      <anchor>a41646baa048efa80408e9f4aefcaabdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW void</type>
      <name>clear</name>
      <anchorfile>structcollision__detection_1_1CollisionResult.html</anchorfile>
      <anchor>ac2f7f5603102be94cda1fe5d5fd1b531</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionResult</name>
      <anchorfile>structcollision__detection_1_1CollisionResult.html</anchorfile>
      <anchor>afd30dd26a5cb73f62798f1ee9b6740b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>collision</name>
      <anchorfile>structcollision__detection_1_1CollisionResult.html</anchorfile>
      <anchor>ad68db09bcc111730f7c4ab1bdff31e67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>contact_count</name>
      <anchorfile>structcollision__detection_1_1CollisionResult.html</anchorfile>
      <anchor>afd0843007154ccb922e8117312bbacbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactMap</type>
      <name>contacts</name>
      <anchorfile>structcollision__detection_1_1CollisionResult.html</anchorfile>
      <anchor>a0c7af992e5bc7e62d81bc4ad6ccdb2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; CostSource &gt;</type>
      <name>cost_sources</name>
      <anchorfile>structcollision__detection_1_1CollisionResult.html</anchorfile>
      <anchor>ab092f5becbf0826bf0f456c489b87b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>distance</name>
      <anchorfile>structcollision__detection_1_1CollisionResult.html</anchorfile>
      <anchor>ab5697568819a44e678768fe48c98400f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>collision_detection::CollisionRobot</name>
    <filename>classcollision__detection_1_1CollisionRobot.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkOtherCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a2d93343ce8bb25fc2d58b9ef30f11f4a</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state, const CollisionRobot &amp;other_robot, const robot_state::RobotState &amp;other_state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkOtherCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a9ebcb70ca5f2f8bec13dec4fd837d1b4</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state, const CollisionRobot &amp;other_robot, const robot_state::RobotState &amp;other_state, const AllowedCollisionMatrix &amp;acm) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkOtherCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a0f331e181ea33703df2bfe304992fbbb</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state1, const robot_state::RobotState &amp;state2, const CollisionRobot &amp;other_robot, const robot_state::RobotState &amp;other_state1, const robot_state::RobotState &amp;other_state2) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkOtherCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a47c11eb38a96bc190e2f7460d9b030fc</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state1, const robot_state::RobotState &amp;state2, const CollisionRobot &amp;other_robot, const robot_state::RobotState &amp;other_state1, const robot_state::RobotState &amp;other_state2, const AllowedCollisionMatrix &amp;acm) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a1cb44537a40602a2d725aac61ae50712</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>af32744b1a2df63c419f65a79838acbb6</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state, const AllowedCollisionMatrix &amp;acm) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>aeca912af146ebd6a41a947808f34517c</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state1, const robot_state::RobotState &amp;state2) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>abad8748da4fe58c04e2fb16bffa9a3b5</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state1, const robot_state::RobotState &amp;state2, const AllowedCollisionMatrix &amp;acm) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionRobot</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a06efb17ed88aa17bcaf6c423e171e88a</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;model, double padding=0.0, double scale=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionRobot</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a7207a27c3319a84e2af772bfe52927aa</anchor>
      <arglist>(const CollisionRobot &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceOther</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a23959560ccfcb039cc702e2828c8761a</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const CollisionRobot &amp;other_robot, const robot_state::RobotState &amp;other_state) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceOther</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>ab4dbbadffa1693fce926ebe84ec593a9</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const CollisionRobot &amp;other_robot, const robot_state::RobotState &amp;other_state, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>distanceOther</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>acad0709293dc3b7460fcb6f5d0988b93</anchor>
      <arglist>(const DistanceRequest &amp;req, DistanceResult &amp;res, const robot_state::RobotState &amp;state, const CollisionRobot &amp;other_robot, const robot_state::RobotState &amp;other_state) const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceSelf</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a427d4ba5bb942e935bbd8cf45e0f9b2a</anchor>
      <arglist>(const robot_state::RobotState &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceSelf</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a9eef5bf1614d63b7e19c454c69700aea</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>distanceSelf</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>aee5b7c7a1b055ee9cdcf57aadc10795a</anchor>
      <arglist>(const DistanceRequest &amp;req, DistanceResult &amp;res, const robot_state::RobotState &amp;state) const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLinkPadding</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a975b8789c84b59083b33858f470a0dd1</anchor>
      <arglist>(const std::string &amp;link_name) const </arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, double &gt; &amp;</type>
      <name>getLinkPadding</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a544a1773960a12b876ffe814725c2f7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLinkScale</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a7c187088a9d2edf70c21309180e5e177</anchor>
      <arglist>(const std::string &amp;link_name) const </arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, double &gt; &amp;</type>
      <name>getLinkScale</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a4a57118d8290ef7cb0cdf6cb0ee4601d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPadding</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>acddd0173e87a7d61534c6ef6180355aa</anchor>
      <arglist>(std::vector&lt; moveit_msgs::LinkPadding &gt; &amp;padding) const </arglist>
    </member>
    <member kind="function">
      <type>const robot_model::RobotModelConstPtr &amp;</type>
      <name>getRobotModel</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a19ff755366f6f1e98d37e7b19d1638d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScale</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>af8300b961e1e5af23400a0efdb1b34d9</anchor>
      <arglist>(std::vector&lt; moveit_msgs::LinkScale &gt; &amp;scale) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinkPadding</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a9ae21809a5356f0ad065cd740e78b9e1</anchor>
      <arglist>(const std::string &amp;link_name, double padding)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinkPadding</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a934263f33a3c4162b074ecc8b2a89068</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;padding)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinkScale</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>af0df8a42a2ce41858a9af811d3f856ae</anchor>
      <arglist>(const std::string &amp;link_name, double scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinkScale</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a9dcc1262a3ae9afd742b8fe7818d2d1d</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPadding</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a2e4e44d24fe8792c62f4ecccdff055ae</anchor>
      <arglist>(double padding)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPadding</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a5a1383e4fb8458f31ea4266f838c5638</anchor>
      <arglist>(const std::vector&lt; moveit_msgs::LinkPadding &gt; &amp;padding)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a4479e5aa67a25826c6488269483aea10</anchor>
      <arglist>(double scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a6f73e935c6ffcec7b8c3e648ab8df686</anchor>
      <arglist>(const std::vector&lt; moveit_msgs::LinkScale &gt; &amp;scale)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CollisionRobot</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a2867fcdc9267c4aabff867b42ed5869b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updatedPaddingOrScaling</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>aec5f273225160d98d9711cdf5f2fbefc</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;links)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>link_padding_</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a1f7be78ad724982c656070d8744220f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>link_scale_</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a8b440e6eee80f05e3595c0a005918c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>robot_model::RobotModelConstPtr</type>
      <name>robot_model_</name>
      <anchorfile>classcollision__detection_1_1CollisionRobot.html</anchorfile>
      <anchor>a5429bc5d71cd611f1ac6c9e0a6ed27f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>collision_detection::CollisionRobotAllValid</name>
    <filename>classcollision__detection_1_1CollisionRobotAllValid.html</filename>
    <base>collision_detection::CollisionRobot</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkOtherCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotAllValid.html</anchorfile>
      <anchor>ad1bb6c4448c798a436d97d284b1c6b87</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state, const CollisionRobot &amp;other_robot, const robot_state::RobotState &amp;other_state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkOtherCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotAllValid.html</anchorfile>
      <anchor>adceecfcd2c8a9c7956ccd55f1289f770</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state, const CollisionRobot &amp;other_robot, const robot_state::RobotState &amp;other_state, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkOtherCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotAllValid.html</anchorfile>
      <anchor>a2e02a48f0cd708477679fb8eb2a7fe71</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state1, const robot_state::RobotState &amp;state2, const CollisionRobot &amp;other_robot, const robot_state::RobotState &amp;other_state1, const robot_state::RobotState &amp;other_state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkOtherCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotAllValid.html</anchorfile>
      <anchor>a673d5799f2650805df151d31194e1669</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state1, const robot_state::RobotState &amp;state2, const CollisionRobot &amp;other_robot, const robot_state::RobotState &amp;other_state1, const robot_state::RobotState &amp;other_state2, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotAllValid.html</anchorfile>
      <anchor>a7d199135b786681d39595323e340668e</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotAllValid.html</anchorfile>
      <anchor>a2435cd8d5359274cc5736a57b67bc84f</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotAllValid.html</anchorfile>
      <anchor>a4e098262f03dead83420ec284bfe77a3</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state1, const robot_state::RobotState &amp;state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotAllValid.html</anchorfile>
      <anchor>a0eb050984dd0852a3b7e63a0dc0cf2c7</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state1, const robot_state::RobotState &amp;state2, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionRobotAllValid</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotAllValid.html</anchorfile>
      <anchor>a3d301ee68435304889991aa88a56c905</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;kmodel, double padding=0.0, double scale=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionRobotAllValid</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotAllValid.html</anchorfile>
      <anchor>a6c5577e72bb987be47a661d9dc5cb32c</anchor>
      <arglist>(const CollisionRobot &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distanceOther</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotAllValid.html</anchorfile>
      <anchor>a625d0efba9d63bd6d88ca25e375ef320</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const CollisionRobot &amp;other_robot, const robot_state::RobotState &amp;other_state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distanceOther</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotAllValid.html</anchorfile>
      <anchor>ab04b600aeb75282cf9586378577c1eea</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const CollisionRobot &amp;other_robot, const robot_state::RobotState &amp;other_state, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distanceSelf</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotAllValid.html</anchorfile>
      <anchor>a745db24e112d00b525d396db68ae5ce5</anchor>
      <arglist>(const robot_state::RobotState &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distanceSelf</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotAllValid.html</anchorfile>
      <anchor>af7f4c0db03d98314a85a6383d7ea9433</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>collision_detection::CollisionRobotFCL</name>
    <filename>classcollision__detection_1_1CollisionRobotFCL.html</filename>
    <base>collision_detection::CollisionRobot</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkOtherCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>aaaab8a7b50aa97ba9a60a901e58f3fdb</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state, const CollisionRobot &amp;other_robot, const robot_state::RobotState &amp;other_state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkOtherCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>a49c8a3fdac4b561f6e9825807963f595</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state, const CollisionRobot &amp;other_robot, const robot_state::RobotState &amp;other_state, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkOtherCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>a0527dbbf2f0e7edc88581803d4707063</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state1, const robot_state::RobotState &amp;state2, const CollisionRobot &amp;other_robot, const robot_state::RobotState &amp;other_state1, const robot_state::RobotState &amp;other_state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkOtherCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>a73d94e1717281481a8f96d42c486cb65</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state1, const robot_state::RobotState &amp;state2, const CollisionRobot &amp;other_robot, const robot_state::RobotState &amp;other_state1, const robot_state::RobotState &amp;other_state2, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>ab3e5a4fce7fcaf5a4c4597a244577253</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>abf9682b8f9f83879d45432b99274c212</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>a272c7e2fc7d04fa6e91d319f2def1e8e</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state1, const robot_state::RobotState &amp;state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>a8a20047123574ad094b6c8566c4a3956</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state1, const robot_state::RobotState &amp;state2, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionRobotFCL</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>afced7c0cbb741e3f1312ac764e80ca7c</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;kmodel, double padding=0.0, double scale=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionRobotFCL</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>a840cd61a463bbf17df12ee5eec36159e</anchor>
      <arglist>(const CollisionRobotFCL &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>distanceOther</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>af3dd3ca0cc4f4967c5e09cb9074e0739</anchor>
      <arglist>(const DistanceRequest &amp;req, DistanceResult &amp;res, const robot_state::RobotState &amp;state, const CollisionRobot &amp;other_robot, const robot_state::RobotState &amp;other_state) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>distanceSelf</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>a159d140b3119115a40021efd0321274b</anchor>
      <arglist>(const DistanceRequest &amp;req, DistanceResult &amp;res, const robot_state::RobotState &amp;state) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>allocSelfCollisionBroadPhase</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>a39b1b0f0fbb34a4eefb20a458f3d7e24</anchor>
      <arglist>(const robot_state::RobotState &amp;state, FCLManager &amp;manager) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkOtherCollisionHelper</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>a6baccf49fce3c94fba1e1e1a6d0d6e06</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state, const CollisionRobot &amp;other_robot, const robot_state::RobotState &amp;other_state, const AllowedCollisionMatrix *acm) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkSelfCollisionHelper</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>a547db29fea7fa59d83f08c3c1091e7e5</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const robot_state::RobotState &amp;state, const AllowedCollisionMatrix *acm) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>constructFCLObject</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>a4c6f4d3d448b24a4163793ce56be00ef</anchor>
      <arglist>(const robot_state::RobotState &amp;state, FCLObject &amp;fcl_obj) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getAttachedBodyObjects</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>afe416a476c2a11f13b22bdfb8ba7725f</anchor>
      <arglist>(const robot_state::AttachedBody *ab, std::vector&lt; FCLGeometryConstPtr &gt; &amp;geoms) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updatedPaddingOrScaling</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>a0e1712f4d03d9eb4bbdaf7d719cb399e</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;links)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; FCLCollisionObjectConstPtr &gt;</type>
      <name>fcl_objs_</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>a68c7cbba34618ae72e51fc581147e1cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; FCLGeometryConstPtr &gt;</type>
      <name>geoms_</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>a895fa2cdc589c11fea0bd8502a35e2c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CollisionWorldFCL</name>
      <anchorfile>classcollision__detection_1_1CollisionRobotFCL.html</anchorfile>
      <anchor>aac55a150e517edeb1b1c8ea3ce915cee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>collision_detection::CollisionWorld</name>
    <filename>classcollision__detection_1_1CollisionWorld.html</filename>
    <member kind="typedef">
      <type>World::ObjectConstPtr</type>
      <name>ObjectConstPtr</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>aa03541103d145e1247877486d9874f0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>World::ObjectPtr</type>
      <name>ObjectPtr</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>a59767f50596ea8c29686fcc88c0dc583</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>ac5e15569872af328877a1bddf9c108d5</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>a419953ab84704e98107cb5df79d34c0d</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>afc9982d1a09ddc026159bb70afc1280c</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state1, const robot_state::RobotState &amp;state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>a68c094647e2a540990534749f0c659cb</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state1, const robot_state::RobotState &amp;state2, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkRobotCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>a992755b865bb7cb13d726d69dc01238b</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkRobotCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>a346cd52b16a9ee5e411b9ff406c22f70</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state, const AllowedCollisionMatrix &amp;acm) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkRobotCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>a2ce552e73d11cfb11e50a65251d01229</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state1, const robot_state::RobotState &amp;state2) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkRobotCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>a35d404a09dcbcc00b04ee1cf0d517320</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state1, const robot_state::RobotState &amp;state2, const AllowedCollisionMatrix &amp;acm) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkWorldCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>af77e257e1da8948bd9ab8724705d6dc7</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionWorld &amp;other_world) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkWorldCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>ab57dfe0f09089f2f470487a2ec1f3da0</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionWorld &amp;other_world, const AllowedCollisionMatrix &amp;acm) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>a7bb9801a0f2be21dcbd516813d71e48d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>aee14d98dffe4d9158c4d18bf5dc5b619</anchor>
      <arglist>(const WorldPtr &amp;world)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>a4001259661e50ba8e2cce4cf4bf4912d</anchor>
      <arglist>(const CollisionWorld &amp;other, const WorldPtr &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceRobot</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>a10809f19a843d99468d31da5e7c52c4d</anchor>
      <arglist>(const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceRobot</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>a6becbfdaa8a3bd30f2f05c7e87285934</anchor>
      <arglist>(const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state, const AllowedCollisionMatrix &amp;acm, bool verbose=false) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>distanceRobot</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>ab31f968e492bb263fa463b27becabf67</anchor>
      <arglist>(const DistanceRequest &amp;req, DistanceResult &amp;res, const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state) const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>a30a91ad76a69490fc8401cf174dd6656</anchor>
      <arglist>(const CollisionWorld &amp;world, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>afc757484b2655e4132b9a79cf024a593</anchor>
      <arglist>(const CollisionWorld &amp;world, const AllowedCollisionMatrix &amp;acm, bool verbose=false) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>distanceWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>a6da4c3c6ccc60abae959cae169f26535</anchor>
      <arglist>(const DistanceRequest &amp;req, DistanceResult &amp;res, const CollisionWorld &amp;world) const =0</arglist>
    </member>
    <member kind="function">
      <type>const WorldPtr &amp;</type>
      <name>getWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>ae2557cc691387dc4411190884ec334e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldConstPtr &amp;</type>
      <name>getWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>ae3f97d685144bda987bdfcfbac700faa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>a5116cff688f6546f611410e5c45bb7c9</anchor>
      <arglist>(const WorldPtr &amp;world)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CollisionWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>a9e4498969e7e4b8a326222818b4bf491</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldPtr</type>
      <name>world_</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>a666124015ac2720b851cd28832ed68b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldConstPtr</type>
      <name>world_const_</name>
      <anchorfile>classcollision__detection_1_1CollisionWorld.html</anchorfile>
      <anchor>abd93ee6258cbb5ef50e0e6aec32ebd58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>collision_detection::CollisionWorldAllValid</name>
    <filename>classcollision__detection_1_1CollisionWorldAllValid.html</filename>
    <base>collision_detection::CollisionWorld</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkRobotCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldAllValid.html</anchorfile>
      <anchor>acaa38529981fd5a67551442ec24131ea</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkRobotCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldAllValid.html</anchorfile>
      <anchor>a95a0d71aaf0f368c1f317b3f3b25b5a6</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkRobotCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldAllValid.html</anchorfile>
      <anchor>a01e92731456b152136e77c5c65c5d76b</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state1, const robot_state::RobotState &amp;state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkRobotCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldAllValid.html</anchorfile>
      <anchor>acd13114033f5f9a8e472a1979794d81d</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state1, const robot_state::RobotState &amp;state2, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkWorldCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldAllValid.html</anchorfile>
      <anchor>a54d483cf1970dc2537db573721c0b18f</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionWorld &amp;other_world) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkWorldCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldAllValid.html</anchorfile>
      <anchor>a877d924b2a6408628ae4b0e85a053619</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionWorld &amp;other_world, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionWorldAllValid</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldAllValid.html</anchorfile>
      <anchor>a6983ac2922e66024a510e41edfcab4a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionWorldAllValid</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldAllValid.html</anchorfile>
      <anchor>af81b34760061c34219eb5795c3b9b1d4</anchor>
      <arglist>(const WorldPtr &amp;world)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionWorldAllValid</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldAllValid.html</anchorfile>
      <anchor>a0388b9bbbeb4820827ce1f625cde6b6a</anchor>
      <arglist>(const CollisionWorld &amp;other, const WorldPtr &amp;world)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distanceRobot</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldAllValid.html</anchorfile>
      <anchor>a4ab80ad7f78b7ebc38a86c7047612efb</anchor>
      <arglist>(const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distanceRobot</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldAllValid.html</anchorfile>
      <anchor>a6f4cea85ab7555118cba1c25ec28e5bc</anchor>
      <arglist>(const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distanceWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldAllValid.html</anchorfile>
      <anchor>ab63b90af646ee015221cd0e1a03d5efd</anchor>
      <arglist>(const CollisionWorld &amp;world) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distanceWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldAllValid.html</anchorfile>
      <anchor>a29d8d6c5aecb38f121919a1d7a630dbe</anchor>
      <arglist>(const CollisionWorld &amp;world, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>collision_detection::CollisionWorldFCL</name>
    <filename>classcollision__detection_1_1CollisionWorldFCL.html</filename>
    <base>collision_detection::CollisionWorld</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkRobotCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>a67f1d991b2fc5e7c0317cd9ff4e7cd6f</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkRobotCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>a318d35aee13b87e08557700d0cf5b5c9</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkRobotCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>a29a9ff74d6d151c64bb7e5d9acee64c6</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state1, const robot_state::RobotState &amp;state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkRobotCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>a5ab6b0203fd9f976aefcd448e513c99f</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state1, const robot_state::RobotState &amp;state2, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkWorldCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>ae3347ac30f3a48481bfd513f13fd8745</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionWorld &amp;other_world) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkWorldCollision</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>adcc7eed09ee1eb17284e86bb0603dea7</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionWorld &amp;other_world, const AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionWorldFCL</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>af5a6557d418b5cc6a34d6ce38fdc59d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionWorldFCL</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>af2d58d5c1ebaa818e82c31b89e0a2b39</anchor>
      <arglist>(const WorldPtr &amp;world)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionWorldFCL</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>a09860144dd65213e63b16f19c536973e</anchor>
      <arglist>(const CollisionWorldFCL &amp;other, const WorldPtr &amp;world)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>distanceRobot</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>aabe8bc2c4a89db67f5ba2633fc13aa62</anchor>
      <arglist>(const DistanceRequest &amp;req, DistanceResult &amp;res, const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>distanceWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>a9e32f5b76eff4786936b65d4c254fee9</anchor>
      <arglist>(const DistanceRequest &amp;req, DistanceResult &amp;res, const CollisionWorld &amp;world) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWorld</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>ae5932707bd713058ef5e6cb67660044b</anchor>
      <arglist>(const WorldPtr &amp;world)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CollisionWorldFCL</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>a0483a297099f7a7f470fd08c5f749c3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkRobotCollisionHelper</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>af45a8accc81cf5848d68feb6eaed8d60</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionRobot &amp;robot, const robot_state::RobotState &amp;state, const AllowedCollisionMatrix *acm) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkWorldCollisionHelper</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>a113b28a8222dc2cee040e3d3dff7b57c</anchor>
      <arglist>(const CollisionRequest &amp;req, CollisionResult &amp;res, const CollisionWorld &amp;other_world, const AllowedCollisionMatrix *acm) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>constructFCLObject</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>aa5bb94b333f1cc4b8a8107e6087e80c3</anchor>
      <arglist>(const World::Object *obj, FCLObject &amp;fcl_obj) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateFCLObject</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>aff3d9f816f31c553ab242de17435186e</anchor>
      <arglist>(const std::string &amp;id)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, FCLObject &gt;</type>
      <name>fcl_objs_</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>a2a81c89b1d62ac0959b82effa1589afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; fcl::BroadPhaseCollisionManager &gt;</type>
      <name>manager_</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>a544bceaca7ba75ca7a470327a1f4d99e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>af781014e7cb137e4ee56a1f600cc6b1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>notifyObjectChange</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>a682cef94c17fe2542ab2037c3b42eeaa</anchor>
      <arglist>(const ObjectConstPtr &amp;obj, World::Action action)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>World::ObserverHandle</type>
      <name>observer_handle_</name>
      <anchorfile>classcollision__detection_1_1CollisionWorldFCL.html</anchorfile>
      <anchor>a8782c21e5476524c149f6d0163a97b69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>distance_field::compareEigen_Vector3i</name>
    <filename>structdistance__field_1_1compareEigen__Vector3i.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structdistance__field_1_1compareEigen__Vector3i.html</anchorfile>
      <anchor>afb4e81a3298502fd29edabedfceeabef</anchor>
      <arglist>(Eigen::Vector3i loc_1, Eigen::Vector3i loc_2) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>kinematic_constraints::ConstraintEvaluationResult</name>
    <filename>structkinematic__constraints_1_1ConstraintEvaluationResult.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstraintEvaluationResult</name>
      <anchorfile>structkinematic__constraints_1_1ConstraintEvaluationResult.html</anchorfile>
      <anchor>a6a121d87ffc8f87c8d8c78b522539cdd</anchor>
      <arglist>(bool result_satisfied=false, double dist=0.0)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>distance</name>
      <anchorfile>structkinematic__constraints_1_1ConstraintEvaluationResult.html</anchorfile>
      <anchor>ae917c18ef345ce872cd7c0478a8d854a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>satisfied</name>
      <anchorfile>structkinematic__constraints_1_1ConstraintEvaluationResult.html</anchorfile>
      <anchor>a6e75dfd6bc22e54b0fb643ae2f094072</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>constraint_samplers::ConstraintSampler</name>
    <filename>classconstraint__samplers_1_1ConstraintSampler.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>configure</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>abf1a7d584e85f2bcab5fffec837be549</anchor>
      <arglist>(const moveit_msgs::Constraints &amp;constr)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstraintSampler</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>a327856a0ff6a92b65660360db3b855b2</anchor>
      <arglist>(const planning_scene::PlanningSceneConstPtr &amp;scene, const std::string &amp;group_name)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getFrameDependency</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>a3abeee7c3d6f1290770f2f2b6b899952</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGroupName</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>a73e1f8272f6a2abbfd2325b93a33fd0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const robot_state::GroupStateValidityCallbackFn &amp;</type>
      <name>getGroupStateValidityCallback</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>aff18b24b45c2cfdb9751c09eaebf63af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const robot_model::JointModelGroup *</type>
      <name>getJointModelGroup</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>aefbfc4cde4193d20ec38756e1136e35c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>a288fc27c2d5c66808a5193e0a3262a25</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>const planning_scene::PlanningSceneConstPtr &amp;</type>
      <name>getPlanningScene</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>ac2d86c56e339f5b8017212692e01f256</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getVerbose</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>a9f55f5e48555f5dbffc80686e104be13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>a53275d9f3b5968569444789d0c8172a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>project</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>a5ed9123cb982f13dacf6bb85162282ed</anchor>
      <arglist>(robot_state::RobotState &amp;state)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>project</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>ad235359c012e74cf2e6bbdca46b72980</anchor>
      <arglist>(robot_state::RobotState &amp;state, unsigned int max_attempts)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sample</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>a7c82a09fe71759ed17ee994fcbb83be0</anchor>
      <arglist>(robot_state::RobotState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sample</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>a2f562ea3606428fa02dec757afcd7d3b</anchor>
      <arglist>(robot_state::RobotState &amp;state, unsigned int max_attempts)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sample</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>a0f9689f5c6ac9b09297fa351d83c1950</anchor>
      <arglist>(robot_state::RobotState &amp;state, const robot_state::RobotState &amp;reference_state)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>sample</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>ac374efadff01e0d9c1d4ca29ef01ea99</anchor>
      <arglist>(robot_state::RobotState &amp;state, const robot_state::RobotState &amp;reference_state, unsigned int max_attempts)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGroupStateValidityCallback</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>a5b2c2b65c6a938551754d77ab4a285fb</anchor>
      <arglist>(const robot_state::GroupStateValidityCallbackFn &amp;callback)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVerbose</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>ad3086f8dac5aacffbb0118a6e4316543</anchor>
      <arglist>(bool verbose)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstraintSampler</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>a1a2a22be6e3083c27454e640bd288e9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>DEFAULT_MAX_SAMPLING_ATTEMPTS</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>a3465ff880fd7ad70e0a06ad963db94cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>ab9b7e3ef1f1feb1442f90adf8e85ed09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>frame_depends_</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>a555339724f8c5ccce8fb8c0efb68b0ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>robot_state::GroupStateValidityCallbackFn</type>
      <name>group_state_validity_callback_</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>aa00fe716b7dafdc9f94edd2c5e68c1ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>is_valid_</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>a3494239b7adbd3324a5e6c23ef158b2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const robot_model::JointModelGroup *</type>
      <name>jmg_</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>aae75d742d8fb66ac520bad96a5591e96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>planning_scene::PlanningSceneConstPtr</type>
      <name>scene_</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>adfe56e73fcf942c9d2411c2faf766d24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verbose_</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSampler.html</anchorfile>
      <anchor>acf19f1537ee8059d194d62ef488751b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>constraint_samplers::ConstraintSamplerAllocator</name>
    <filename>classconstraint__samplers_1_1ConstraintSamplerAllocator.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual ConstraintSamplerPtr</type>
      <name>alloc</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSamplerAllocator.html</anchorfile>
      <anchor>ab488441c5ee7e1c9cae57aca7588b201</anchor>
      <arglist>(const planning_scene::PlanningSceneConstPtr &amp;scene, const std::string &amp;group_name, const moveit_msgs::Constraints &amp;constr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>canService</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSamplerAllocator.html</anchorfile>
      <anchor>af2f1e107132d382eb7bc3142e862a04a</anchor>
      <arglist>(const planning_scene::PlanningSceneConstPtr &amp;scene, const std::string &amp;group_name, const moveit_msgs::Constraints &amp;constr) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstraintSamplerAllocator</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSamplerAllocator.html</anchorfile>
      <anchor>aa7ed12a12daf6be1666f86b4d65001c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstraintSamplerAllocator</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSamplerAllocator.html</anchorfile>
      <anchor>ac83b2f0623866f25362b6e2b7bd7e8dd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>constraint_samplers::ConstraintSamplerManager</name>
    <filename>classconstraint__samplers_1_1ConstraintSamplerManager.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstraintSamplerManager</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSamplerManager.html</anchorfile>
      <anchor>ac044476925e095d2e81f803a9bc85d55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSamplerAllocator</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSamplerManager.html</anchorfile>
      <anchor>a4ca518d5def517db7c255bc32db9d470</anchor>
      <arglist>(const ConstraintSamplerAllocatorPtr &amp;sa)</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSamplerPtr</type>
      <name>selectSampler</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSamplerManager.html</anchorfile>
      <anchor>a92585eceb79c454434a3439867a0bedd</anchor>
      <arglist>(const planning_scene::PlanningSceneConstPtr &amp;scene, const std::string &amp;group_name, const moveit_msgs::Constraints &amp;constr) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstraintSamplerPtr</type>
      <name>selectDefaultSampler</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSamplerManager.html</anchorfile>
      <anchor>a1d10bfb5979b25595edb38f37613ad5c</anchor>
      <arglist>(const planning_scene::PlanningSceneConstPtr &amp;scene, const std::string &amp;group_name, const moveit_msgs::Constraints &amp;constr)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ConstraintSamplerAllocatorPtr &gt;</type>
      <name>sampler_alloc_</name>
      <anchorfile>classconstraint__samplers_1_1ConstraintSamplerManager.html</anchorfile>
      <anchor>ab4ee5829025c2e66a1cfbf9cae73b103</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit::ConstructException</name>
    <filename>classmoveit_1_1ConstructException.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstructException</name>
      <anchorfile>classmoveit_1_1ConstructException.html</anchorfile>
      <anchor>ab8c9926ec487e1aa9d263cae3f7e5349</anchor>
      <arglist>(const std::string &amp;what_arg)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>collision_detection::Contact</name>
    <filename>structcollision__detection_1_1Contact.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>body_name_1</name>
      <anchorfile>structcollision__detection_1_1Contact.html</anchorfile>
      <anchor>a6ed6eacd986f503b417efae901ffa8e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>body_name_2</name>
      <anchorfile>structcollision__detection_1_1Contact.html</anchorfile>
      <anchor>a17cac839ecd8b20afecad9be0f7a8ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyType</type>
      <name>body_type_1</name>
      <anchorfile>structcollision__detection_1_1Contact.html</anchorfile>
      <anchor>a7749f57024428d651f4c30431d96fb64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyType</type>
      <name>body_type_2</name>
      <anchorfile>structcollision__detection_1_1Contact.html</anchorfile>
      <anchor>a77dd79552aee3f46e665943e3816e136</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>depth</name>
      <anchorfile>structcollision__detection_1_1Contact.html</anchorfile>
      <anchor>aa1356af20d7ea62ce3db9cf0f10e8cbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>normal</name>
      <anchorfile>structcollision__detection_1_1Contact.html</anchorfile>
      <anchor>a7a14ee7b6500b6185e9fc74757a1bba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW Eigen::Vector3d</type>
      <name>pos</name>
      <anchorfile>structcollision__detection_1_1Contact.html</anchorfile>
      <anchor>aa1a2936afccf6b9354db7e9f98399339</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>moveit_controller_manager::MoveItControllerManager::ControllerState</name>
    <filename>structmoveit__controller__manager_1_1MoveItControllerManager_1_1ControllerState.html</filename>
    <member kind="function">
      <type></type>
      <name>ControllerState</name>
      <anchorfile>structmoveit__controller__manager_1_1MoveItControllerManager_1_1ControllerState.html</anchorfile>
      <anchor>a510e528287c0e6977a38aec81090fb2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>active_</name>
      <anchorfile>structmoveit__controller__manager_1_1MoveItControllerManager_1_1ControllerState.html</anchorfile>
      <anchor>a9662b3e0ee095e656a05ac7c3e1e51da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>default_</name>
      <anchorfile>structmoveit__controller__manager_1_1MoveItControllerManager_1_1ControllerState.html</anchorfile>
      <anchor>a39c22cef9e0dea88feb2b2c7ef7e30f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>collision_detection::CostSource</name>
    <filename>structcollision__detection_1_1CostSource.html</filename>
    <member kind="function">
      <type>double</type>
      <name>getVolume</name>
      <anchorfile>structcollision__detection_1_1CostSource.html</anchorfile>
      <anchor>ade31246456ae117c78c9870a4e154566</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structcollision__detection_1_1CostSource.html</anchorfile>
      <anchor>a1e0f1352f46f773ba37ec52a856aa6d4</anchor>
      <arglist>(const CostSource &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>boost::array&lt; double, 3 &gt;</type>
      <name>aabb_max</name>
      <anchorfile>structcollision__detection_1_1CostSource.html</anchorfile>
      <anchor>a333da8c9811daba059e6adf333f8930c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::array&lt; double, 3 &gt;</type>
      <name>aabb_min</name>
      <anchorfile>structcollision__detection_1_1CostSource.html</anchorfile>
      <anchor>afc40c3a65b0da8e8ff0ea0a4a21f7f0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>cost</name>
      <anchorfile>structcollision__detection_1_1CostSource.html</anchorfile>
      <anchor>a8ff40e19d042347863a708ac7e61264b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>collision_detection::DistanceData</name>
    <filename>structcollision__detection_1_1DistanceData.html</filename>
    <member kind="function">
      <type></type>
      <name>DistanceData</name>
      <anchorfile>structcollision__detection_1_1DistanceData.html</anchorfile>
      <anchor>ac3bc2808b7d32b455df4629e2173e04f</anchor>
      <arglist>(const DistanceRequest *req, DistanceResult *res)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DistanceData</name>
      <anchorfile>structcollision__detection_1_1DistanceData.html</anchorfile>
      <anchor>adf20d6cdbc158d5609da9f6121ffd665</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>done</name>
      <anchorfile>structcollision__detection_1_1DistanceData.html</anchorfile>
      <anchor>aea4fb2b0e878a9080b3c04c028cb0381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DistanceRequest *</type>
      <name>req</name>
      <anchorfile>structcollision__detection_1_1DistanceData.html</anchorfile>
      <anchor>a45a51c8632077a394123fb5a9613c0aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceResult *</type>
      <name>res</name>
      <anchorfile>structcollision__detection_1_1DistanceData.html</anchorfile>
      <anchor>a38e36dbd044c5740696990524c83b93e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>distance_field::DistanceField</name>
    <filename>classdistance__field_1_1DistanceField.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addOcTreeToField</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a5a5de29eff3bd1764e15abda23946cc1</anchor>
      <arglist>(const octomap::OcTree *octree)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addPointsToField</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a625b0a940086c822c703172a4f01e67c</anchor>
      <arglist>(const EigenSTL::vector_Vector3d &amp;points)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addShapeToField</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>adeca93ccdc0704a448e56a77f9a3b8cd</anchor>
      <arglist>(const shapes::Shape *shape, const Eigen::Isometry3d &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>MOVEIT_DEPRECATED void</type>
      <name>addShapeToField</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a150b2a4182ad8b35fafff8e8aa5aa69d</anchor>
      <arglist>(const shapes::Shape *shape, const geometry_msgs::Pose &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceField</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a791448b54ae178b106f933388b68deca</anchor>
      <arglist>(double size_x, double size_y, double size_z, double resolution, double origin_x, double origin_y, double origin_z)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getDistance</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>afe3d2c4d985084a897aeb4920a2e6f3f</anchor>
      <arglist>(double x, double y, double z) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getDistance</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a7e1c6fa3881fd942d27fa73e1bdc5d55</anchor>
      <arglist>(int x, int y, int z) const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistanceGradient</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a77e5031ac098ee01e3c1c197459b5569</anchor>
      <arglist>(double x, double y, double z, double &amp;gradient_x, double &amp;gradient_y, double &amp;gradient_z, bool &amp;in_bounds) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGradientMarkers</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>ad664e1d09993d9f25b5c8e6ccb72acc1</anchor>
      <arglist>(double min_radius, double max_radius, const std::string &amp;frame_id, const ros::Time &amp;stamp, visualization_msgs::MarkerArray &amp;marker_array) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getIsoSurfaceMarkers</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a11ce4da3a4e580431279b86511ba0931</anchor>
      <arglist>(double min_distance, double max_distance, const std::string &amp;frame_id, const ros::Time stamp, visualization_msgs::Marker &amp;marker) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getOriginX</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a3dd55c4ca2ebd759c60cb31819a04931</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getOriginY</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a4c539b1bda4c24c21f0ab1c504ac3e6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getOriginZ</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a83409a204b350b66d1f2653a7b5d39b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlaneMarkers</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a85f085f75df47e2a3f883f29fec07f9e</anchor>
      <arglist>(PlaneVisualizationType type, double length, double width, double height, const Eigen::Vector3d &amp;origin, const std::string &amp;frame_id, const ros::Time stamp, visualization_msgs::Marker &amp;marker) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getProjectionPlanes</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a4a8de9e267b14b5251a64fce913d4c4d</anchor>
      <arglist>(const std::string &amp;frame_id, const ros::Time &amp;stamp, double max_distance, visualization_msgs::Marker &amp;marker) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getResolution</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a27fe8ea64652d5277b53f09a77c9b108</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getShapePoints</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>abd7ae7db9c6791d12199ee0c7226b98b</anchor>
      <arglist>(const shapes::Shape *shape, const Eigen::Isometry3d &amp;pose, EigenSTL::vector_Vector3d *points)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSizeX</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>aa90011bde94cf83b61bed6bd43368752</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSizeY</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a42d39882b775b9e1f86b9776a966bd1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSizeZ</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>aa8e77c65dbde420bd1c9807e79b3adbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getUninitializedDistance</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a51d46c3d2cc8d412d64dd8015cd3e710</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getXNumCells</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a0014563f9f1c74ccf60d1d20a3af2b78</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getYNumCells</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>ae57048dd1fc4f867c88db969f0d41593</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getZNumCells</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>af51959bcd7efdb18f60207075d09b964</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>gridToWorld</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>ad78c36666019889271444f912edef4c2</anchor>
      <arglist>(int x, int y, int z, double &amp;world_x, double &amp;world_y, double &amp;world_z) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isCellValid</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a657363a1be60726539dd40d13ff17383</anchor>
      <arglist>(int x, int y, int z) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveShapeInField</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>ab53c792990adde7bb6fbf3acd39d3a01</anchor>
      <arglist>(const shapes::Shape *shape, const Eigen::Isometry3d &amp;old_pose, const Eigen::Isometry3d &amp;new_pose)</arglist>
    </member>
    <member kind="function">
      <type>MOVEIT_DEPRECATED void</type>
      <name>moveShapeInField</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>aac95bac722ec9d3bc20c9653b92b13af</anchor>
      <arglist>(const shapes::Shape *shape, const geometry_msgs::Pose &amp;old_pose, const geometry_msgs::Pose &amp;new_pose)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>readFromStream</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a6d5f9b4d22432893a55fe3117562a7d9</anchor>
      <arglist>(std::istream &amp;stream)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>removePointsFromField</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a292e7bad50dad1e00f1659aa83f5486c</anchor>
      <arglist>(const EigenSTL::vector_Vector3d &amp;points)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeShapeFromField</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a6f5841f58cf2362b0d9cb2b3d98b172b</anchor>
      <arglist>(const shapes::Shape *shape, const Eigen::Isometry3d &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>MOVEIT_DEPRECATED void</type>
      <name>removeShapeFromField</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>ad720b9e2483969559d6684aa6b4a7c15</anchor>
      <arglist>(const shapes::Shape *shape, const geometry_msgs::Pose &amp;pose)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a639b28a18cee64bb427b672a81169060</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updatePointsInField</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a154f82da8747de3e7f0ee609561d28a2</anchor>
      <arglist>(const EigenSTL::vector_Vector3d &amp;old_points, const EigenSTL::vector_Vector3d &amp;new_points)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>worldToGrid</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a23af274792c1986b9367541b9b00774f</anchor>
      <arglist>(double world_x, double world_y, double world_z, int &amp;x, int &amp;y, int &amp;z) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>writeToStream</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a8b2990594502d9528b085cfcc5a2b3b1</anchor>
      <arglist>(std::ostream &amp;stream) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DistanceField</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a941d8bf848072280cb503fee80242ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getOcTreePoints</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>ac76beae97cadc2d47fe5d9846fcb9ab4</anchor>
      <arglist>(const octomap::OcTree *octree, EigenSTL::vector_Vector3d *points)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setPoint</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a41d21f72423e44671d3fbe9a4d5b5182</anchor>
      <arglist>(int xCell, int yCell, int zCell, double dist, geometry_msgs::Point &amp;point, std_msgs::ColorRGBA &amp;color, double max_distance) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>inv_twice_resolution_</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a0f052454f85c43fdcde63338fb96b1fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>origin_x_</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a9679d9f9f5724114ff010995838945d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>origin_y_</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>af3bd9cd384633c1ffe2d5a60a77f0864</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>origin_z_</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a48de21c9910bc1ccbdd3348f18aefd50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>resolution_</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a0e437085f02a89a34ffae207ab953832</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>size_x_</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>abaa110acf0cb6452d6b3563ce6a3da9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>size_y_</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a9680bf8c4d8fd62269eb33da7464a86a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>size_z_</name>
      <anchorfile>classdistance__field_1_1DistanceField.html</anchorfile>
      <anchor>a17b30c8ffd41fa9709a91503686380e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>collision_detection::DistanceRequest</name>
    <filename>structcollision__detection_1_1DistanceRequest.html</filename>
    <member kind="function">
      <type></type>
      <name>DistanceRequest</name>
      <anchorfile>structcollision__detection_1_1DistanceRequest.html</anchorfile>
      <anchor>afe8db02d769f3b1715b72574489197e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableGroup</name>
      <anchorfile>structcollision__detection_1_1DistanceRequest.html</anchorfile>
      <anchor>ad546dd125192033cf13922c52559f2a0</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;kmodel)</arglist>
    </member>
    <member kind="variable">
      <type>const AllowedCollisionMatrix *</type>
      <name>acm</name>
      <anchorfile>structcollision__detection_1_1DistanceRequest.html</anchorfile>
      <anchor>ad59ba3aa3de18225797b9119c1848600</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::set&lt; const robot_model::LinkModel * &gt; *</type>
      <name>active_components_only</name>
      <anchorfile>structcollision__detection_1_1DistanceRequest.html</anchorfile>
      <anchor>a5f915ac3f1d2afbe977e44c2dc63b9f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>compute_gradient</name>
      <anchorfile>structcollision__detection_1_1DistanceRequest.html</anchorfile>
      <anchor>a0c59bfc01fad7b8dbdb6121057b64984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>distance_threshold</name>
      <anchorfile>structcollision__detection_1_1DistanceRequest.html</anchorfile>
      <anchor>a9e0adb38c090f38b6dae7a18a237aa9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_nearest_points</name>
      <anchorfile>structcollision__detection_1_1DistanceRequest.html</anchorfile>
      <anchor>af1142aa4548e9577db3fc9dab1917b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_signed_distance</name>
      <anchorfile>structcollision__detection_1_1DistanceRequest.html</anchorfile>
      <anchor>ac004290481e3a6c3f30e305cec82f132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>group_name</name>
      <anchorfile>structcollision__detection_1_1DistanceRequest.html</anchorfile>
      <anchor>a83e4a62b14c022ce24e2473a5dc7e555</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>max_contacts_per_body</name>
      <anchorfile>structcollision__detection_1_1DistanceRequest.html</anchorfile>
      <anchor>a95e2754133ea61ff5a577c89908b8a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceRequestType</type>
      <name>type</name>
      <anchorfile>structcollision__detection_1_1DistanceRequest.html</anchorfile>
      <anchor>ab4c792a7bf743908123c4abd293e5321</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>structcollision__detection_1_1DistanceRequest.html</anchorfile>
      <anchor>a6594f8027f80df032c091f8e9fc342ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>collision_detection::DistanceResult</name>
    <filename>structcollision__detection_1_1DistanceResult.html</filename>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structcollision__detection_1_1DistanceResult.html</anchorfile>
      <anchor>aeec5f7998d5cd07811f9b5b3e90b1c1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceResult</name>
      <anchorfile>structcollision__detection_1_1DistanceResult.html</anchorfile>
      <anchor>aed61fd48c7b9041ff3a7c698dd5a97c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>collision</name>
      <anchorfile>structcollision__detection_1_1DistanceResult.html</anchorfile>
      <anchor>aaf2adbb6448ac2e011839b2b3c1702f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceMap</type>
      <name>distances</name>
      <anchorfile>structcollision__detection_1_1DistanceResult.html</anchorfile>
      <anchor>a5f4a33fc2e1e6b9f33ef854c6d802355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceResultsData</type>
      <name>minimum_distance</name>
      <anchorfile>structcollision__detection_1_1DistanceResult.html</anchorfile>
      <anchor>ae5c407b132e71061910a67c57f64b399</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>collision_detection::DistanceResultsData</name>
    <filename>structcollision__detection_1_1DistanceResultsData.html</filename>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structcollision__detection_1_1DistanceResultsData.html</anchorfile>
      <anchor>ac1a049122af9eb2852bf65924ba81106</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceResultsData</name>
      <anchorfile>structcollision__detection_1_1DistanceResultsData.html</anchorfile>
      <anchor>aa5ce12b5c5bd176af19e6724e267fee6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structcollision__detection_1_1DistanceResultsData.html</anchorfile>
      <anchor>a72f9d6ead1dd1e98cc6d819cb1faa3d1</anchor>
      <arglist>(const DistanceResultsData &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>structcollision__detection_1_1DistanceResultsData.html</anchorfile>
      <anchor>a8d94bef6bf6b520f0f986241f502c03b</anchor>
      <arglist>(const DistanceResultsData &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structcollision__detection_1_1DistanceResultsData.html</anchorfile>
      <anchor>ac33c0a1a4cc47171dc63254efc1bc7b1</anchor>
      <arglist>(const DistanceResultsData &amp;other)</arglist>
    </member>
    <member kind="variable">
      <type>BodyType</type>
      <name>body_types</name>
      <anchorfile>structcollision__detection_1_1DistanceResultsData.html</anchorfile>
      <anchor>a67f620d2c41b7fcf64fb49c507abeba2</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>distance</name>
      <anchorfile>structcollision__detection_1_1DistanceResultsData.html</anchorfile>
      <anchor>af039324ae60d7a8852ee366b86b58a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>link_names</name>
      <anchorfile>structcollision__detection_1_1DistanceResultsData.html</anchorfile>
      <anchor>ad13f8fe7798440e0dfe638074341ea19</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>nearest_points</name>
      <anchorfile>structcollision__detection_1_1DistanceResultsData.html</anchorfile>
      <anchor>a09a2c21cc0c89be6de2404211a0a4632</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>normal</name>
      <anchorfile>structcollision__detection_1_1DistanceResultsData.html</anchorfile>
      <anchor>a5049f7e3a2040935bb9933f786647120</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>dynamics_solver::DynamicsSolver</name>
    <filename>classdynamics__solver_1_1DynamicsSolver.html</filename>
    <member kind="function">
      <type></type>
      <name>DynamicsSolver</name>
      <anchorfile>classdynamics__solver_1_1DynamicsSolver.html</anchorfile>
      <anchor>abbf622b9f16e30b37254aea370c4063f</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;robot_model, const std::string &amp;group_name, const geometry_msgs::Vector3 &amp;gravity_vector)</arglist>
    </member>
    <member kind="function">
      <type>const robot_model::JointModelGroup *</type>
      <name>getGroup</name>
      <anchorfile>classdynamics__solver_1_1DynamicsSolver.html</anchorfile>
      <anchor>aa06145ee2c41b9df66c298ae262603db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getMaxPayload</name>
      <anchorfile>classdynamics__solver_1_1DynamicsSolver.html</anchorfile>
      <anchor>aadecf11b20c6dc035b96cb48ddd908a7</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;joint_angles, double &amp;payload, unsigned int &amp;joint_saturated) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>getMaxTorques</name>
      <anchorfile>classdynamics__solver_1_1DynamicsSolver.html</anchorfile>
      <anchor>a7c96fdca058791f388073924651b5f86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPayloadTorques</name>
      <anchorfile>classdynamics__solver_1_1DynamicsSolver.html</anchorfile>
      <anchor>a9c36b0a3f9283e9d572482dfe0581599</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;joint_angles, double payload, std::vector&lt; double &gt; &amp;joint_torques) const </arglist>
    </member>
    <member kind="function">
      <type>const robot_model::RobotModelConstPtr &amp;</type>
      <name>getRobotModel</name>
      <anchorfile>classdynamics__solver_1_1DynamicsSolver.html</anchorfile>
      <anchor>a5a58b77f982829ef2f84aacfe03e8fd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTorques</name>
      <anchorfile>classdynamics__solver_1_1DynamicsSolver.html</anchorfile>
      <anchor>a11840a3e00f2f92e4c4e2f24f10bd8d2</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;joint_angles, const std::vector&lt; double &gt; &amp;joint_velocities, const std::vector&lt; double &gt; &amp;joint_accelerations, const std::vector&lt; geometry_msgs::Wrench &gt; &amp;wrenches, std::vector&lt; double &gt; &amp;torques) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>base_name_</name>
      <anchorfile>classdynamics__solver_1_1DynamicsSolver.html</anchorfile>
      <anchor>ac1527a1992db3f4635dfc8baa93e3ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; KDL::ChainIdSolver_RNE &gt;</type>
      <name>chain_id_solver_</name>
      <anchorfile>classdynamics__solver_1_1DynamicsSolver.html</anchorfile>
      <anchor>a2f7914666900348e4e55f8704956f0f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>gravity_</name>
      <anchorfile>classdynamics__solver_1_1DynamicsSolver.html</anchorfile>
      <anchor>a67fd9b46c8a577d0176810f77c02f5be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const robot_model::JointModelGroup *</type>
      <name>joint_model_group_</name>
      <anchorfile>classdynamics__solver_1_1DynamicsSolver.html</anchorfile>
      <anchor>a2c4dbe608030ada424b72f5b6c0b9042</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>KDL::Chain</type>
      <name>kdl_chain_</name>
      <anchorfile>classdynamics__solver_1_1DynamicsSolver.html</anchorfile>
      <anchor>ac53fe395e56a8a83448233a2a41a0ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>max_torques_</name>
      <anchorfile>classdynamics__solver_1_1DynamicsSolver.html</anchorfile>
      <anchor>a54b7b5a653e7105b92919344266d85eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>num_joints_</name>
      <anchorfile>classdynamics__solver_1_1DynamicsSolver.html</anchorfile>
      <anchor>a24b7b963fd091088c385ea1789c74e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>num_segments_</name>
      <anchorfile>classdynamics__solver_1_1DynamicsSolver.html</anchorfile>
      <anchor>a2af1dc1ec6b3b3584265f14274fe40d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>robot_model::RobotModelConstPtr</type>
      <name>robot_model_</name>
      <anchorfile>classdynamics__solver_1_1DynamicsSolver.html</anchorfile>
      <anchor>a3b1a03a537454ea312c09dfb18aff2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>robot_state::RobotStatePtr</type>
      <name>state_</name>
      <anchorfile>classdynamics__solver_1_1DynamicsSolver.html</anchorfile>
      <anchor>a0004fd7adba03170228ff4cf2ce9b583</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>tip_name_</name>
      <anchorfile>classdynamics__solver_1_1DynamicsSolver.html</anchorfile>
      <anchor>a7f9e03add308ac20bdd8b3d04447a251</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</name>
    <filename>classEIGEN__MAKE__ALIGNED__OPERATOR__NEW.html</filename>
  </compound>
  <compound kind="class">
    <name>moveit::Exception</name>
    <filename>classmoveit_1_1Exception.html</filename>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>classmoveit_1_1Exception.html</anchorfile>
      <anchor>a5961694588be7919b27ee3bda00b90fd</anchor>
      <arglist>(const std::string &amp;what_arg)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>moveit_controller_manager::ExecutionStatus</name>
    <filename>structmoveit__controller__manager_1_1ExecutionStatus.html</filename>
    <member kind="enumvalue">
      <name>ABORTED</name>
      <anchorfile>structmoveit__controller__manager_1_1ExecutionStatus.html</anchorfile>
      <anchor>a09075c47bbda14f1df49a0a0f27188fdafd9d76a952171c26cbc76dcf2abb9603</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>structmoveit__controller__manager_1_1ExecutionStatus.html</anchorfile>
      <anchor>a09075c47bbda14f1df49a0a0f27188fda5b6d588d060587599b4c294dba797ad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PREEMPTED</name>
      <anchorfile>structmoveit__controller__manager_1_1ExecutionStatus.html</anchorfile>
      <anchor>a09075c47bbda14f1df49a0a0f27188fda6fa599f1cfd2e76272fcda4a709a6ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RUNNING</name>
      <anchorfile>structmoveit__controller__manager_1_1ExecutionStatus.html</anchorfile>
      <anchor>a09075c47bbda14f1df49a0a0f27188fda40b4bcefa905b1e4df91145b37f36547</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUCCEEDED</name>
      <anchorfile>structmoveit__controller__manager_1_1ExecutionStatus.html</anchorfile>
      <anchor>a09075c47bbda14f1df49a0a0f27188fda9cb40c0ff9c15273ba1411df0dba2704</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMED_OUT</name>
      <anchorfile>structmoveit__controller__manager_1_1ExecutionStatus.html</anchorfile>
      <anchor>a09075c47bbda14f1df49a0a0f27188fda9fc16cd47413bbde788560fa942b4f3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN</name>
      <anchorfile>structmoveit__controller__manager_1_1ExecutionStatus.html</anchorfile>
      <anchor>a09075c47bbda14f1df49a0a0f27188fda6959210f72a44f38a5f704901ee8ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Value</name>
      <anchorfile>structmoveit__controller__manager_1_1ExecutionStatus.html</anchorfile>
      <anchor>a09075c47bbda14f1df49a0a0f27188fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN</name>
      <anchorfile>structmoveit__controller__manager_1_1ExecutionStatus.html</anchorfile>
      <anchor>a09075c47bbda14f1df49a0a0f27188fda6959210f72a44f38a5f704901ee8ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RUNNING</name>
      <anchorfile>structmoveit__controller__manager_1_1ExecutionStatus.html</anchorfile>
      <anchor>a09075c47bbda14f1df49a0a0f27188fda40b4bcefa905b1e4df91145b37f36547</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUCCEEDED</name>
      <anchorfile>structmoveit__controller__manager_1_1ExecutionStatus.html</anchorfile>
      <anchor>a09075c47bbda14f1df49a0a0f27188fda9cb40c0ff9c15273ba1411df0dba2704</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PREEMPTED</name>
      <anchorfile>structmoveit__controller__manager_1_1ExecutionStatus.html</anchorfile>
      <anchor>a09075c47bbda14f1df49a0a0f27188fda6fa599f1cfd2e76272fcda4a709a6ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMED_OUT</name>
      <anchorfile>structmoveit__controller__manager_1_1ExecutionStatus.html</anchorfile>
      <anchor>a09075c47bbda14f1df49a0a0f27188fda9fc16cd47413bbde788560fa942b4f3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABORTED</name>
      <anchorfile>structmoveit__controller__manager_1_1ExecutionStatus.html</anchorfile>
      <anchor>a09075c47bbda14f1df49a0a0f27188fdafd9d76a952171c26cbc76dcf2abb9603</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>structmoveit__controller__manager_1_1ExecutionStatus.html</anchorfile>
      <anchor>a09075c47bbda14f1df49a0a0f27188fda5b6d588d060587599b4c294dba797ad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>asString</name>
      <anchorfile>structmoveit__controller__manager_1_1ExecutionStatus.html</anchorfile>
      <anchor>a666e567385b8bd0996a6abd84f72e412</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExecutionStatus</name>
      <anchorfile>structmoveit__controller__manager_1_1ExecutionStatus.html</anchorfile>
      <anchor>a1aec13f64312601b857f21d4f812701d</anchor>
      <arglist>(Value value=UNKNOWN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>structmoveit__controller__manager_1_1ExecutionStatus.html</anchorfile>
      <anchor>a6f4f0863601e9f4eb665fe074dd922c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Value</name>
      <anchorfile>structmoveit__controller__manager_1_1ExecutionStatus.html</anchorfile>
      <anchor>a55ebe8725e7b6ff75899cf1e743dc353</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>status_</name>
      <anchorfile>structmoveit__controller__manager_1_1ExecutionStatus.html</anchorfile>
      <anchor>a955347f8caa8872e4bcc05673025e1b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FclCollisionDetectionTester</name>
    <filename>classFclCollisionDetectionTester.html</filename>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetUp</name>
      <anchorfile>classFclCollisionDetectionTester.html</anchorfile>
      <anchor>a6a035403133a442e44b0193770eb2c5a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>TearDown</name>
      <anchorfile>classFclCollisionDetectionTester.html</anchorfile>
      <anchor>a6f9a1fe658cefc2fdcb019514f8412b8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>collision_detection::AllowedCollisionMatrixPtr</type>
      <name>acm_</name>
      <anchorfile>classFclCollisionDetectionTester.html</anchorfile>
      <anchor>a26878cf24fc44bd335f6966e554934f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>collision_detection::CollisionRobotPtr</type>
      <name>crobot_</name>
      <anchorfile>classFclCollisionDetectionTester.html</anchorfile>
      <anchor>a6ac8601a9289d09a0cadb3dbb377006e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>collision_detection::CollisionWorldPtr</type>
      <name>cworld_</name>
      <anchorfile>classFclCollisionDetectionTester.html</anchorfile>
      <anchor>ae2ab48591bb8bf933cc66e5999f2c412</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>kinect_dae_resource_</name>
      <anchorfile>classFclCollisionDetectionTester.html</anchorfile>
      <anchor>a865cc97b9b1499a4623e260c178b0003</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>robot_model::RobotModelPtr</type>
      <name>kmodel_</name>
      <anchorfile>classFclCollisionDetectionTester.html</anchorfile>
      <anchor>a951b34db530e0eb70b6df1cb2bba4d1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>srdf::ModelSharedPtr</type>
      <name>srdf_model_</name>
      <anchorfile>classFclCollisionDetectionTester.html</anchorfile>
      <anchor>a22a90abe347519f9ea43c93f36e27455</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>srdf_ok_</name>
      <anchorfile>classFclCollisionDetectionTester.html</anchorfile>
      <anchor>a1633596e021e81e17ca91763276e6cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>urdf::ModelInterfaceSharedPtr</type>
      <name>urdf_model_</name>
      <anchorfile>classFclCollisionDetectionTester.html</anchorfile>
      <anchor>a02459250b0420206b3bf44ea8ad27e38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>urdf_ok_</name>
      <anchorfile>classFclCollisionDetectionTester.html</anchorfile>
      <anchor>aecd85c6d52081e8ab53c809024f62428</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>collision_detection::FCLGeometry</name>
    <filename>structcollision__detection_1_1FCLGeometry.html</filename>
    <member kind="function">
      <type></type>
      <name>FCLGeometry</name>
      <anchorfile>structcollision__detection_1_1FCLGeometry.html</anchorfile>
      <anchor>a85f21d5a6ac13b77d7dc4a1aee56380e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FCLGeometry</name>
      <anchorfile>structcollision__detection_1_1FCLGeometry.html</anchorfile>
      <anchor>ac73cb54790749dc97b53e95227ea1afe</anchor>
      <arglist>(fcl::CollisionGeometry *collision_geometry, const robot_model::LinkModel *link, int shape_index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FCLGeometry</name>
      <anchorfile>structcollision__detection_1_1FCLGeometry.html</anchorfile>
      <anchor>a007e90d46fd2a732a931030588ac8e13</anchor>
      <arglist>(fcl::CollisionGeometry *collision_geometry, const robot_state::AttachedBody *ab, int shape_index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FCLGeometry</name>
      <anchorfile>structcollision__detection_1_1FCLGeometry.html</anchorfile>
      <anchor>a353b8b83f5e00ed5a0dfaf58a54687bb</anchor>
      <arglist>(fcl::CollisionGeometry *collision_geometry, const World::Object *obj, int shape_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateCollisionGeometryData</name>
      <anchorfile>structcollision__detection_1_1FCLGeometry.html</anchorfile>
      <anchor>af74636e4d9a1600dfc40e1d5d6bdf834</anchor>
      <arglist>(const T *data, int shape_index, bool newType)</arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; fcl::CollisionGeometry &gt;</type>
      <name>collision_geometry_</name>
      <anchorfile>structcollision__detection_1_1FCLGeometry.html</anchorfile>
      <anchor>a120481e2afc2ed0de1c7af8224de9eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CollisionGeometryDataPtr</type>
      <name>collision_geometry_data_</name>
      <anchorfile>structcollision__detection_1_1FCLGeometry.html</anchorfile>
      <anchor>a1a5b3caa2681c5e8d2be288ab1304358</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>collision_detection::FCLManager</name>
    <filename>structcollision__detection_1_1FCLManager.html</filename>
    <member kind="variable">
      <type>std::shared_ptr&lt; fcl::BroadPhaseCollisionManager &gt;</type>
      <name>manager_</name>
      <anchorfile>structcollision__detection_1_1FCLManager.html</anchorfile>
      <anchor>a9fe4b956f59b8014a76571c05584ac21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCLObject</type>
      <name>object_</name>
      <anchorfile>structcollision__detection_1_1FCLManager.html</anchorfile>
      <anchor>ac9f1d3e890e89dc627bdaf9603f4e23b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>collision_detection::FCLObject</name>
    <filename>structcollision__detection_1_1FCLObject.html</filename>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structcollision__detection_1_1FCLObject.html</anchorfile>
      <anchor>afe436f6b187e547b27790f2b314113d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerTo</name>
      <anchorfile>structcollision__detection_1_1FCLObject.html</anchorfile>
      <anchor>abdb7ebb5cc4f85d8049b7de3921bd5f0</anchor>
      <arglist>(fcl::BroadPhaseCollisionManager *manager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterFrom</name>
      <anchorfile>structcollision__detection_1_1FCLObject.html</anchorfile>
      <anchor>ac82da2a94538495254ff07398dcb37ef</anchor>
      <arglist>(fcl::BroadPhaseCollisionManager *manager)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; FCLGeometryConstPtr &gt;</type>
      <name>collision_geometry_</name>
      <anchorfile>structcollision__detection_1_1FCLObject.html</anchorfile>
      <anchor>a87c823141eec943ba5bc1e54e6e54f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; FCLCollisionObjectPtr &gt;</type>
      <name>collision_objects_</name>
      <anchorfile>structcollision__detection_1_1FCLObject.html</anchorfile>
      <anchor>a3630415ff5a7132694acd4a5088d62d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>collision_detection::FCLShapeCache</name>
    <filename>structcollision__detection_1_1FCLShapeCache.html</filename>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const shapes::Shape &gt;</type>
      <name>ShapeKey</name>
      <anchorfile>structcollision__detection_1_1FCLShapeCache.html</anchorfile>
      <anchor>abacc2bb8b3af102ecfa37101f6a7497d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; ShapeKey, FCLGeometryConstPtr, std::owner_less&lt; ShapeKey &gt;&gt;</type>
      <name>ShapeMap</name>
      <anchorfile>structcollision__detection_1_1FCLShapeCache.html</anchorfile>
      <anchor>a7a04d910e4d240eaa298d4433101fa70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bumpUseCount</name>
      <anchorfile>structcollision__detection_1_1FCLShapeCache.html</anchorfile>
      <anchor>aab73b9cbb871a1f3cd659372c1368cf7</anchor>
      <arglist>(bool force=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FCLShapeCache</name>
      <anchorfile>structcollision__detection_1_1FCLShapeCache.html</anchorfile>
      <anchor>a8eed8220cc5740855bfdcefafaa484c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>clean_count_</name>
      <anchorfile>structcollision__detection_1_1FCLShapeCache.html</anchorfile>
      <anchor>acaad998544948c51e08a64d6af603e0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::mutex</type>
      <name>lock_</name>
      <anchorfile>structcollision__detection_1_1FCLShapeCache.html</anchorfile>
      <anchor>aa438ca4d79ef6a2309724a09cf0e7dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ShapeMap</type>
      <name>map_</name>
      <anchorfile>structcollision__detection_1_1FCLShapeCache.html</anchorfile>
      <anchor>a6f185c9254095950b29dbe8b491c5673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>MAX_CLEAN_COUNT</name>
      <anchorfile>structcollision__detection_1_1FCLShapeCache.html</anchorfile>
      <anchor>a77b3bc9cdb357dfd103ad4ab3a19d2ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit::core::FixedJointModel</name>
    <filename>classmoveit_1_1core_1_1FixedJointModel.html</filename>
    <base>moveit::core::JointModel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeTransform</name>
      <anchorfile>classmoveit_1_1core_1_1FixedJointModel.html</anchorfile>
      <anchor>a24aa6ee9adc1039fd0524665f60c2af0</anchor>
      <arglist>(const double *joint_values, Eigen::Isometry3d &amp;transf) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1FixedJointModel.html</anchorfile>
      <anchor>a5a47a4b4ebc0c550ce2b382252290d1f</anchor>
      <arglist>(const Eigen::Isometry3d &amp;transf, double *joint_values) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classmoveit_1_1core_1_1FixedJointModel.html</anchorfile>
      <anchor>ad9ed4899d3c90f09be457f1c99d50dd9</anchor>
      <arglist>(const double *values1, const double *values2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>enforcePositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1FixedJointModel.html</anchorfile>
      <anchor>aed06a6dc3593f5101a03c707e87eb1db</anchor>
      <arglist>(double *values, const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FixedJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1FixedJointModel.html</anchorfile>
      <anchor>ac3d9c4b5b0335c51bcb441e798162863</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classmoveit_1_1core_1_1FixedJointModel.html</anchorfile>
      <anchor>af9972a673397fa0435df9e4b3ff7556a</anchor>
      <arglist>(const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getStateSpaceDimension</name>
      <anchorfile>classmoveit_1_1core_1_1FixedJointModel.html</anchorfile>
      <anchor>a1a295e1727ef6cd22c1c1c37b546c911</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVariableDefaultPositions</name>
      <anchorfile>classmoveit_1_1core_1_1FixedJointModel.html</anchorfile>
      <anchor>ab5634d004853677911e6584bb16347fa</anchor>
      <arglist>(double *values, const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVariableRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1FixedJointModel.html</anchorfile>
      <anchor>a6d07ace79d21484e953afce18c61bd7e</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVariableRandomPositionsNearBy</name>
      <anchorfile>classmoveit_1_1core_1_1FixedJointModel.html</anchorfile>
      <anchor>ae3f7f308ec51c8427a797e7638b84bd2</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const Bounds &amp;other_bounds, const double *near, const double distance) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classmoveit_1_1core_1_1FixedJointModel.html</anchorfile>
      <anchor>aae6d33e5f3df2edcc7ed9f2cc58e4de1</anchor>
      <arglist>(const double *from, const double *to, const double t, double *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>satisfiesPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1FixedJointModel.html</anchorfile>
      <anchor>af408f2b04d2824130c709bb4afa37d75</anchor>
      <arglist>(const double *values, const Bounds &amp;other_bounds, double margin) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit::core::FloatingJointModel</name>
    <filename>classmoveit_1_1core_1_1FloatingJointModel.html</filename>
    <base>moveit::core::JointModel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeTransform</name>
      <anchorfile>classmoveit_1_1core_1_1FloatingJointModel.html</anchorfile>
      <anchor>a73a9f5c83ab6080ba7fcc290ffe77072</anchor>
      <arglist>(const double *joint_values, Eigen::Isometry3d &amp;transf) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1FloatingJointModel.html</anchorfile>
      <anchor>a2fde7bc379a64403afa3718ce3a98074</anchor>
      <arglist>(const Eigen::Isometry3d &amp;transf, double *joint_values) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classmoveit_1_1core_1_1FloatingJointModel.html</anchorfile>
      <anchor>a0d6383a2ffa939eb29daf1fedb263659</anchor>
      <arglist>(const double *values1, const double *values2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceRotation</name>
      <anchorfile>classmoveit_1_1core_1_1FloatingJointModel.html</anchorfile>
      <anchor>a66efcb75c5c98200e93263291714749f</anchor>
      <arglist>(const double *values1, const double *values2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceTranslation</name>
      <anchorfile>classmoveit_1_1core_1_1FloatingJointModel.html</anchorfile>
      <anchor>a14f03d6bc2231cb24673ecbbe1e7e454</anchor>
      <arglist>(const double *values1, const double *values2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>enforcePositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1FloatingJointModel.html</anchorfile>
      <anchor>a67eed6395f63a7e73eed0ff535fee04b</anchor>
      <arglist>(double *values, const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FloatingJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1FloatingJointModel.html</anchorfile>
      <anchor>afb8df46752a23ff52b42d7a5f2b315dc</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAngularDistanceWeight</name>
      <anchorfile>classmoveit_1_1core_1_1FloatingJointModel.html</anchorfile>
      <anchor>ae2ed970fdf06ac16b2d7a507500f4b40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classmoveit_1_1core_1_1FloatingJointModel.html</anchorfile>
      <anchor>a598243b14b7359398ad47b87a96b0ac4</anchor>
      <arglist>(const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getStateSpaceDimension</name>
      <anchorfile>classmoveit_1_1core_1_1FloatingJointModel.html</anchorfile>
      <anchor>a2b775ce6da5688e63e0a6663e4fecfd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVariableDefaultPositions</name>
      <anchorfile>classmoveit_1_1core_1_1FloatingJointModel.html</anchorfile>
      <anchor>afcc43928a37dc91314c65a88149d1bf6</anchor>
      <arglist>(double *values, const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVariableRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1FloatingJointModel.html</anchorfile>
      <anchor>acdd989ed78b8627385b75ee8e45648ee</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVariableRandomPositionsNearBy</name>
      <anchorfile>classmoveit_1_1core_1_1FloatingJointModel.html</anchorfile>
      <anchor>a1dc899ee2978d62d3846748301d23afb</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const Bounds &amp;other_bounds, const double *near, const double distance) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classmoveit_1_1core_1_1FloatingJointModel.html</anchorfile>
      <anchor>a472fa7f6bec7fdd9255540226b6030ba</anchor>
      <arglist>(const double *from, const double *to, const double t, double *state) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>normalizeRotation</name>
      <anchorfile>classmoveit_1_1core_1_1FloatingJointModel.html</anchorfile>
      <anchor>a49d08c3c338fbcfbc347a5cb5f6f6382</anchor>
      <arglist>(double *values) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>satisfiesPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1FloatingJointModel.html</anchorfile>
      <anchor>aa4e3242ba90ce3887eb38241c25e6fb2</anchor>
      <arglist>(const double *values, const Bounds &amp;other_bounds, double margin) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularDistanceWeight</name>
      <anchorfile>classmoveit_1_1core_1_1FloatingJointModel.html</anchorfile>
      <anchor>ab020c8034d9dbd851fe721358c60f43c</anchor>
      <arglist>(double weight)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>angular_distance_weight_</name>
      <anchorfile>classmoveit_1_1core_1_1FloatingJointModel.html</anchorfile>
      <anchor>aaebfd7c2f98f3b559611fa03f1f2db67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>moveit::core::JointModelGroup::GroupMimicUpdate</name>
    <filename>structmoveit_1_1core_1_1JointModelGroup_1_1GroupMimicUpdate.html</filename>
    <member kind="function">
      <type></type>
      <name>GroupMimicUpdate</name>
      <anchorfile>structmoveit_1_1core_1_1JointModelGroup_1_1GroupMimicUpdate.html</anchorfile>
      <anchor>a6a7437250106c2b8cb01ce72631e6519</anchor>
      <arglist>(int s, int d, double f, double o)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dest</name>
      <anchorfile>structmoveit_1_1core_1_1JointModelGroup_1_1GroupMimicUpdate.html</anchorfile>
      <anchor>a8b170f644c833ccb132010af0bc7b6d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>factor</name>
      <anchorfile>structmoveit_1_1core_1_1JointModelGroup_1_1GroupMimicUpdate.html</anchorfile>
      <anchor>aa7931f8b3e1399f278c809c44d100711</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>offset</name>
      <anchorfile>structmoveit_1_1core_1_1JointModelGroup_1_1GroupMimicUpdate.html</anchorfile>
      <anchor>a739a9037e7c25875df35f587f2f89e7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>src</name>
      <anchorfile>structmoveit_1_1core_1_1JointModelGroup_1_1GroupMimicUpdate.html</anchorfile>
      <anchor>aab4b8c2a51b1bd307badf82bc3922d3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>collision_detection::IfSameType</name>
    <filename>structcollision__detection_1_1IfSameType.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>structcollision__detection_1_1IfSameType.html</anchorfile>
      <anchor>a77184ec7f40c4b0b13de664a998360dea2c4cb697b53920e22ab13d8b5b0f3c9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>structcollision__detection_1_1IfSameType.html</anchorfile>
      <anchor>a77184ec7f40c4b0b13de664a998360dea2c4cb697b53920e22ab13d8b5b0f3c9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>collision_detection::IfSameType&lt; T, T &gt;</name>
    <filename>structcollision__detection_1_1IfSameType_3_01T_00_01T_01_4.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>structcollision__detection_1_1IfSameType_3_01T_00_01T_01_4.html</anchorfile>
      <anchor>a21240c7f6277ffe3f5c0defc51cdbc99a1f7b0f4751a238bbbbf34bc6f875ae52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>structcollision__detection_1_1IfSameType_3_01T_00_01T_01_4.html</anchorfile>
      <anchor>a21240c7f6277ffe3f5c0defc51cdbc99a1f7b0f4751a238bbbbf34bc6f875ae52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>constraint_samplers::IKConstraintSampler</name>
    <filename>classconstraint__samplers_1_1IKConstraintSampler.html</filename>
    <base>constraint_samplers::ConstraintSampler</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>configure</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>aba23f7e115df416c5c907e0a00b605c6</anchor>
      <arglist>(const moveit_msgs::Constraints &amp;constr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>configure</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>a8c8e7cc0009fbaebea6c5952d3de76cb</anchor>
      <arglist>(const IKSamplingPose &amp;sp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getIKTimeout</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>a6ef4d5057d64401b4cb1a29a9f0aad88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getLinkName</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>a624965eae065a8780ca3654923c2aea8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>a2e17417ab5ff46ca568dcf3eeae45643</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const kinematic_constraints::OrientationConstraintPtr &amp;</type>
      <name>getOrientationConstraint</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>a50f8b0e420589b3ee0643d7c8f47a78d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const kinematic_constraints::PositionConstraintPtr &amp;</type>
      <name>getPositionConstraint</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>a544d4a752ce0abb8016444547c051440</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSamplingVolume</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>a3b30c6b1b2868fa0b3c0b70d8aca7267</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKConstraintSampler</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>a71b64a00d23adf7c7ae07998db5c968c</anchor>
      <arglist>(const planning_scene::PlanningSceneConstPtr &amp;scene, const std::string &amp;group_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>project</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>abe307a8bd1c8075d2544543f826a0d1f</anchor>
      <arglist>(robot_state::RobotState &amp;state, unsigned int max_attempts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sample</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>aa568ad688e3c0ef5dcfd2e4af93bac01</anchor>
      <arglist>(robot_state::RobotState &amp;state, const robot_state::RobotState &amp;reference_state, unsigned int max_attempts)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>samplePose</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>a13f45a5f04e13a2559e76d1e0162e31f</anchor>
      <arglist>(Eigen::Vector3d &amp;pos, Eigen::Quaterniond &amp;quat, const robot_state::RobotState &amp;ks, unsigned int max_attempts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIKTimeout</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>a8c0e53fc0c1ebd695f29f024977195ea</anchor>
      <arglist>(double timeout)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>callIK</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>a42d401535b2897b4082de4a1342aa495</anchor>
      <arglist>(const geometry_msgs::Pose &amp;ik_query, const kinematics::KinematicsBase::IKCallbackFn &amp;adapted_ik_validity_callback, double timeout, robot_state::RobotState &amp;state, bool use_as_seed)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>a7d713f06412f7b2b75e28db4e108ade5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>loadIKSolver</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>a1fa42512ec6d3b2e83bcbeb8de6a77d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sampleHelper</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>a17bfe2320f6ab8dcf25f843e57ef3252</anchor>
      <arglist>(robot_state::RobotState &amp;state, const robot_state::RobotState &amp;reference_state, unsigned int max_attempts, bool project)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>a3fb4672d6808bafaecf71a7d5ef09351</anchor>
      <arglist>(robot_state::RobotState &amp;state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Isometry3d</type>
      <name>eef_to_ik_tip_transform_</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>a573d61474cda1c99f285b3d12744786c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>ik_frame_</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>ab163c6c12e7ac00a83a170132ce65df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ik_timeout_</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>a0da607ce551b81d3c6e89a0b5b3641cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>kinematics::KinematicsBaseConstPtr</type>
      <name>kb_</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>a9bf84e228c77af26913e7806c98ed1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>need_eef_to_ik_tip_transform_</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>a9460adaab73fff23c5c046673f2744b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>random_numbers::RandomNumberGenerator</type>
      <name>random_number_generator_</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>acc7d17dfee03bff7ffa8afb5f0ca3098</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IKSamplingPose</type>
      <name>sampling_pose_</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>a34fe78556fc5ac8c58f920a76db20f34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>transform_ik_</name>
      <anchorfile>classconstraint__samplers_1_1IKConstraintSampler.html</anchorfile>
      <anchor>ae3b2c279ebfb5118326d9897a69c669d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>constraint_samplers::IKSamplingPose</name>
    <filename>structconstraint__samplers_1_1IKSamplingPose.html</filename>
    <member kind="function">
      <type></type>
      <name>IKSamplingPose</name>
      <anchorfile>structconstraint__samplers_1_1IKSamplingPose.html</anchorfile>
      <anchor>a474c8e64f5557e558870bcbc72541d59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKSamplingPose</name>
      <anchorfile>structconstraint__samplers_1_1IKSamplingPose.html</anchorfile>
      <anchor>abaa7760e360cd4cc4fa62f9b5d81ffa5</anchor>
      <arglist>(const kinematic_constraints::PositionConstraint &amp;pc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKSamplingPose</name>
      <anchorfile>structconstraint__samplers_1_1IKSamplingPose.html</anchorfile>
      <anchor>a8d2aee4c202f42e9f7cf99f0f9a3e152</anchor>
      <arglist>(const kinematic_constraints::OrientationConstraint &amp;oc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKSamplingPose</name>
      <anchorfile>structconstraint__samplers_1_1IKSamplingPose.html</anchorfile>
      <anchor>af47678630e26ebec60d9f52dae28f7db</anchor>
      <arglist>(const kinematic_constraints::PositionConstraint &amp;pc, const kinematic_constraints::OrientationConstraint &amp;oc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKSamplingPose</name>
      <anchorfile>structconstraint__samplers_1_1IKSamplingPose.html</anchorfile>
      <anchor>afca8f0f9959aa5768d94356a997568da</anchor>
      <arglist>(const kinematic_constraints::PositionConstraintPtr &amp;pc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKSamplingPose</name>
      <anchorfile>structconstraint__samplers_1_1IKSamplingPose.html</anchorfile>
      <anchor>a22364fa12d742df7c0139aeedcaefb35</anchor>
      <arglist>(const kinematic_constraints::OrientationConstraintPtr &amp;oc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKSamplingPose</name>
      <anchorfile>structconstraint__samplers_1_1IKSamplingPose.html</anchorfile>
      <anchor>a813ced15555db1af43fe5fae38487aaf</anchor>
      <arglist>(const kinematic_constraints::PositionConstraintPtr &amp;pc, const kinematic_constraints::OrientationConstraintPtr &amp;oc)</arglist>
    </member>
    <member kind="variable">
      <type>kinematic_constraints::OrientationConstraintPtr</type>
      <name>orientation_constraint_</name>
      <anchorfile>structconstraint__samplers_1_1IKSamplingPose.html</anchorfile>
      <anchor>ae8c83403251d25cc6180c97815116dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>kinematic_constraints::PositionConstraintPtr</type>
      <name>position_constraint_</name>
      <anchorfile>structconstraint__samplers_1_1IKSamplingPose.html</anchorfile>
      <anchor>a4a169bd2011b2d5f9204c157f752e503</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>trajectory_processing::IterativeParabolicTimeParameterization</name>
    <filename>classtrajectory__processing_1_1IterativeParabolicTimeParameterization.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>computeTimeStamps</name>
      <anchorfile>classtrajectory__processing_1_1IterativeParabolicTimeParameterization.html</anchorfile>
      <anchor>a0790c50a91df22d403e2ea6e774595bd</anchor>
      <arglist>(robot_trajectory::RobotTrajectory &amp;trajectory, const double max_velocity_scaling_factor=1.0, const double max_acceleration_scaling_factor=1.0) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeParabolicTimeParameterization</name>
      <anchorfile>classtrajectory__processing_1_1IterativeParabolicTimeParameterization.html</anchorfile>
      <anchor>aafc1545091e44155d9a9a4fc7c3eb54a</anchor>
      <arglist>(unsigned int max_iterations=100, double max_time_change_per_it=.01)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IterativeParabolicTimeParameterization</name>
      <anchorfile>classtrajectory__processing_1_1IterativeParabolicTimeParameterization.html</anchorfile>
      <anchor>a300f5897c66f04b92be201b767741b68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>applyAccelerationConstraints</name>
      <anchorfile>classtrajectory__processing_1_1IterativeParabolicTimeParameterization.html</anchorfile>
      <anchor>a909ff7801a46ef37527f01ab557866fa</anchor>
      <arglist>(robot_trajectory::RobotTrajectory &amp;rob_trajectory, std::vector&lt; double &gt; &amp;time_diff, const double max_acceleration_scaling_factor) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>applyVelocityConstraints</name>
      <anchorfile>classtrajectory__processing_1_1IterativeParabolicTimeParameterization.html</anchorfile>
      <anchor>a0703216e0a025333e0f59b6ed38ed3d0</anchor>
      <arglist>(robot_trajectory::RobotTrajectory &amp;rob_trajectory, std::vector&lt; double &gt; &amp;time_diff, const double max_velocity_scaling_factor) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>findT1</name>
      <anchorfile>classtrajectory__processing_1_1IterativeParabolicTimeParameterization.html</anchorfile>
      <anchor>a5d03aef0857022e2603b07e0c5382fde</anchor>
      <arglist>(const double d1, const double d2, double t1, const double t2, const double a_max) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>findT2</name>
      <anchorfile>classtrajectory__processing_1_1IterativeParabolicTimeParameterization.html</anchorfile>
      <anchor>a9b92b377a967ba48862e432c4537a81f</anchor>
      <arglist>(const double d1, const double d2, const double t1, double t2, const double a_max) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>max_iterations_</name>
      <anchorfile>classtrajectory__processing_1_1IterativeParabolicTimeParameterization.html</anchorfile>
      <anchor>a883f6192a1356cf79685a80a9fe51f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>max_time_change_per_it_</name>
      <anchorfile>classtrajectory__processing_1_1IterativeParabolicTimeParameterization.html</anchorfile>
      <anchor>ad87bfe8edd974a393a1aecd3b7c8ffb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>trajectory_processing::IterativeSplineParameterization</name>
    <filename>classtrajectory__processing_1_1IterativeSplineParameterization.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>computeTimeStamps</name>
      <anchorfile>classtrajectory__processing_1_1IterativeSplineParameterization.html</anchorfile>
      <anchor>afac91ea192dd69fb7ad4445988e8f486</anchor>
      <arglist>(robot_trajectory::RobotTrajectory &amp;trajectory, const double max_velocity_scaling_factor=1.0, const double max_acceleration_scaling_factor=1.0) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSplineParameterization</name>
      <anchorfile>classtrajectory__processing_1_1IterativeSplineParameterization.html</anchorfile>
      <anchor>aeaed6a07d2db755a1826cf556bb2024b</anchor>
      <arglist>(bool add_points=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IterativeSplineParameterization</name>
      <anchorfile>classtrajectory__processing_1_1IterativeSplineParameterization.html</anchorfile>
      <anchor>ae5542aba436a73f15b93e3cd5319b139</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>add_points_</name>
      <anchorfile>classtrajectory__processing_1_1IterativeSplineParameterization.html</anchorfile>
      <anchor>a73b2c97f41df27227b70635fa2e6dbc7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>kinematic_constraints::JointConstraint</name>
    <filename>classkinematic__constraints_1_1JointConstraint.html</filename>
    <base>kinematic_constraints::KinematicConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>a9522ee646129f3a2a7c34ba3ef0f3c2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>configure</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>aea1a0d4914b51b28c8907723f0a88b80</anchor>
      <arglist>(const moveit_msgs::JointConstraint &amp;jc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstraintEvaluationResult</type>
      <name>decide</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>a4fcc5d88c9ec34913dfa00ca7f9b5c5f</anchor>
      <arglist>(const robot_state::RobotState &amp;state, bool verbose=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>enabled</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>a708f890e5ea2881f15b0f7bafd32713d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equal</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>a29d17b1cf023754b73688202d00d461c</anchor>
      <arglist>(const KinematicConstraint &amp;other, double margin) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDesiredJointPosition</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>a601e18906b7cb09237317036dce7c437</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const robot_model::JointModel *</type>
      <name>getJointModel</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>a85682213c995e938c45e69aa28746aaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getJointToleranceAbove</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>ae4dce98088f56c737a872a59f4b4927b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getJointToleranceBelow</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>a58e16b3b0b4a05d6f0f692ef5d2932ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getJointVariableIndex</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>aabea232f3764d24b6f9becbc1a81646d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getJointVariableName</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>aec0b56cfc1729ec864baf3b0926d0ea3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getLocalVariableName</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>ad0a8099b37445248a7a12e37ee990222</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointConstraint</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>ad17e8b8dcc03dff9fefc9ffc4897585e</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>ab188e3e9a6c8a6db2e04f51323576c48</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>joint_is_continuous_</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>a50ae9c6257a4c56035912b0ec6f3fdd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const robot_model::JointModel *</type>
      <name>joint_model_</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>a85180e7dc9be6cc70cbb76c12eed624f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>joint_position_</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>ac9f0353766fde0b31077950e9c8c99b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>joint_tolerance_above_</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>a44b5159e503c787c39a06fb35f4c2d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>joint_tolerance_below_</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>a0a81a0a4934464e0948063a6e39d1442</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>joint_variable_index_</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>a30b40d1aa0877db3f14b795c6c7e2516</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>joint_variable_name_</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>a13456deb2ec5a4d6379eb838c7b22490</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>local_variable_name_</name>
      <anchorfile>classkinematic__constraints_1_1JointConstraint.html</anchorfile>
      <anchor>aff8be4fc4cc12ee3a57fbb6395501d3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>constraint_samplers::JointConstraintSampler</name>
    <filename>classconstraint__samplers_1_1JointConstraintSampler.html</filename>
    <base>constraint_samplers::ConstraintSampler</base>
    <class kind="struct">constraint_samplers::JointConstraintSampler::JointInfo</class>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>configure</name>
      <anchorfile>classconstraint__samplers_1_1JointConstraintSampler.html</anchorfile>
      <anchor>ad8204b4c16f6b8ca52eaf3abd205f9d5</anchor>
      <arglist>(const moveit_msgs::Constraints &amp;constr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>configure</name>
      <anchorfile>classconstraint__samplers_1_1JointConstraintSampler.html</anchorfile>
      <anchor>ae8d005674ad13829c59268417125cbdc</anchor>
      <arglist>(const std::vector&lt; kinematic_constraints::JointConstraint &gt; &amp;jc)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getConstrainedJointCount</name>
      <anchorfile>classconstraint__samplers_1_1JointConstraintSampler.html</anchorfile>
      <anchor>a8d1f81c24e6b9eb5dda1016a81b96aa7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classconstraint__samplers_1_1JointConstraintSampler.html</anchorfile>
      <anchor>ab1747a9440b99368892076e7d4124412</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getUnconstrainedJointCount</name>
      <anchorfile>classconstraint__samplers_1_1JointConstraintSampler.html</anchorfile>
      <anchor>a6158d27a9c6866ddb1ace54f87d78195</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointConstraintSampler</name>
      <anchorfile>classconstraint__samplers_1_1JointConstraintSampler.html</anchorfile>
      <anchor>a5ab1ae0dc80cd605321973b4c67af5f8</anchor>
      <arglist>(const planning_scene::PlanningSceneConstPtr &amp;scene, const std::string &amp;group_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>project</name>
      <anchorfile>classconstraint__samplers_1_1JointConstraintSampler.html</anchorfile>
      <anchor>acaf497f1f46f2522d700c165c02164a6</anchor>
      <arglist>(robot_state::RobotState &amp;state, unsigned int max_attempts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sample</name>
      <anchorfile>classconstraint__samplers_1_1JointConstraintSampler.html</anchorfile>
      <anchor>a9ced901b6efc90faa14b75ec48efe95f</anchor>
      <arglist>(robot_state::RobotState &amp;state, const robot_state::RobotState &amp;ks, unsigned int max_attempts)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classconstraint__samplers_1_1JointConstraintSampler.html</anchorfile>
      <anchor>adaeaf71603e048c78ecaa63a04d10ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; JointInfo &gt;</type>
      <name>bounds_</name>
      <anchorfile>classconstraint__samplers_1_1JointConstraintSampler.html</anchorfile>
      <anchor>a7ff0c54a1a134ebcef4f1bd858249279</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>random_numbers::RandomNumberGenerator</type>
      <name>random_number_generator_</name>
      <anchorfile>classconstraint__samplers_1_1JointConstraintSampler.html</anchorfile>
      <anchor>a7223fb493f4952a7df08767d24d397d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>uindex_</name>
      <anchorfile>classconstraint__samplers_1_1JointConstraintSampler.html</anchorfile>
      <anchor>a0aa03374e4baf8b44719c39a63497407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const robot_model::JointModel * &gt;</type>
      <name>unbounded_</name>
      <anchorfile>classconstraint__samplers_1_1JointConstraintSampler.html</anchorfile>
      <anchor>ad8264b54ac99456db1de8d5029ef3ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>values_</name>
      <anchorfile>classconstraint__samplers_1_1JointConstraintSampler.html</anchorfile>
      <anchor>aca457b05054663da13345b04b619a6af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>constraint_samplers::JointConstraintSampler::JointInfo</name>
    <filename>structconstraint__samplers_1_1JointConstraintSampler_1_1JointInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>JointInfo</name>
      <anchorfile>structconstraint__samplers_1_1JointConstraintSampler_1_1JointInfo.html</anchorfile>
      <anchor>ab41b1f132fb51a31ba1075aa7846a2a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>potentiallyAdjustMinMaxBounds</name>
      <anchorfile>structconstraint__samplers_1_1JointConstraintSampler_1_1JointInfo.html</anchorfile>
      <anchor>af731723fa8ead441c80f36eca2ff35ea</anchor>
      <arglist>(double min, double max)</arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>index_</name>
      <anchorfile>structconstraint__samplers_1_1JointConstraintSampler_1_1JointInfo.html</anchorfile>
      <anchor>a85d91b1be1efddf82729bd598c49139f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max_bound_</name>
      <anchorfile>structconstraint__samplers_1_1JointConstraintSampler_1_1JointInfo.html</anchorfile>
      <anchor>a442aeb1c2222931c7dd46d443e1c1319</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>min_bound_</name>
      <anchorfile>structconstraint__samplers_1_1JointConstraintSampler_1_1JointInfo.html</anchorfile>
      <anchor>a0a4fafc6e6d4597050f431e075306ea7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit::core::JointModel</name>
    <filename>classmoveit_1_1core_1_1JointModel.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; VariableBounds &gt;</type>
      <name>Bounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a585a9962f4bb2bdb3517d872c24fed28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FIXED</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6c1c75a4d125fd607f48bff4ca019b2ca3bb8e782777500ec4a3fd63ab9841d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLOATING</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6c1c75a4d125fd607f48bff4ca019b2cac4a170adfb20c4e0e68c3a04df8b7799</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>JointType</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6c1c75a4d125fd607f48bff4ca019b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6c1c75a4d125fd607f48bff4ca019b2caa253217ef470e1bda8720760952ccc44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REVOLUTE</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6c1c75a4d125fd607f48bff4ca019b2cabda24dea11e97876e90ff25d99f820d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRISMATIC</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6c1c75a4d125fd607f48bff4ca019b2cad75bc00aed238751e73511f4b5d68323</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLANAR</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6c1c75a4d125fd607f48bff4ca019b2ca860d7991d396f897cfc2f3deee4842c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLOATING</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6c1c75a4d125fd607f48bff4ca019b2cac4a170adfb20c4e0e68c3a04df8b7799</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FIXED</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6c1c75a4d125fd607f48bff4ca019b2ca3bb8e782777500ec4a3fd63ab9841d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLANAR</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6c1c75a4d125fd607f48bff4ca019b2ca860d7991d396f897cfc2f3deee4842c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRISMATIC</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6c1c75a4d125fd607f48bff4ca019b2cad75bc00aed238751e73511f4b5d68323</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REVOLUTE</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6c1c75a4d125fd607f48bff4ca019b2cabda24dea11e97876e90ff25d99f820d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6c1c75a4d125fd607f48bff4ca019b2caa253217ef470e1bda8720760952ccc44</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDescendantJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a9c6aba80a57f945cfd6eaf27e77f62a0</anchor>
      <arglist>(const JointModel *joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDescendantLinkModel</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>af2ff54654807c779e5d26447e3c04731</anchor>
      <arglist>(const LinkModel *link)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMimicRequest</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a0d8a20a3fde866bfca14e0202b6e889c</anchor>
      <arglist>(const JointModel *joint)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>ab4ba9eac1f786fdeb152012f396daab8</anchor>
      <arglist>(const double *value1, const double *value2) const =0</arglist>
    </member>
    <member kind="function">
      <type>const LinkModel *</type>
      <name>getChildLinkModel</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a3483942e9992d06e355c5d21840a94a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getDescendantJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a0726b0bc5a36104fc1ece3dce743076f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const LinkModel * &gt; &amp;</type>
      <name>getDescendantLinkModels</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>af9faf6e87ebad92559d76439d8fe53e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistanceFactor</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>ad32b9dbbb127cb3bd6fcf1d8bafd38fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>ab4d475f99c2633cbdee7551829e07969</anchor>
      <arglist>(const Bounds &amp;other_bounds) const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>af501b17eca8a4d3a5c6a926ee01840af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const JointModel *</type>
      <name>getMimic</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a21e16ae30648375e56d51e2fadc91caf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMimicFactor</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a2483af4a45f3012910c301c1c74c4e65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMimicOffset</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a8846a7d71dc4b03f125ee53b13d25d5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getMimicRequests</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a86a0e124cf2e51975ecb775838e10ddb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>ab9329cf5d4c21779e586860a4c12d1cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getNonFixedDescendantJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6cde709bf459ad8b8aa3b4fc743b3011</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const LinkModel *</type>
      <name>getParentLinkModel</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a63af31f234f41804648491ab83ec33ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getStateSpaceDimension</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a46cac444de8f276139ff53359823f6fb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>JointType</type>
      <name>getType</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a17a4c66425888df27c53c84bb1fa0585</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTypeName</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>af5c1d2f2c4b31ed3bf5d3b6f3b335202</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a75ba5c8d4a4ae1781482f308ced8a17e</anchor>
      <arglist>(const double *from, const double *to, const double t, double *state) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a4bec369bee4057227628e54b55775c79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointModel</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a1f7d5542ac0ccd8cde728e101db378b8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChildLinkModel</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a2bd3073dc3a65110300618d0eaf0de56</anchor>
      <arglist>(const LinkModel *link)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistanceFactor</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a5ef18e2febdec02d920ad360790c7555</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMimic</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>aa6972fb53e1c0d022357b4d965e1eca7</anchor>
      <arglist>(const JointModel *mimic, double factor, double offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParentLinkModel</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>aa5a16069ef76dcf1e3b15c8325fd1f29</anchor>
      <arglist>(const LinkModel *link)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPassive</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>ae56f7b5353ea04884521b4b648811330</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JointModel</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6783e4aa52f405b187fa40e2acc509aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getVariableNames</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a8dd5657afadb9f4f5c86962a2c68060a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getLocalVariableNames</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a8b91d3c19e2e80076f3ced9660a5ce1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasVariable</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>ae7617e5f4d52eed081d22e2f79d84f7a</anchor>
      <arglist>(const std::string &amp;variable) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getVariableCount</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a0f8ac33e57fdfe9d1ec1ea2586d63c5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstVariableIndex</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6411d94fcff52c54b7c7b6f51402e17d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFirstVariableIndex</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>ade8d1c3c3c02b635c5fbb9fedab6a096</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getJointIndex</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6fa874602033bef6b640ab9dc5990d74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointIndex</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a51f806bb2ef0336e3a49a1dfc3b0a848</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalVariableIndex</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a5cd26149cd923740abccdc8cfd893176</anchor>
      <arglist>(const std::string &amp;variable) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableDefaultPositions</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>ab606f6e1a076886412e73c3ba579fedf</anchor>
      <arglist>(double *values) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getVariableDefaultPositions</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>ae36f401a3f18994bf1ea7d357249c063</anchor>
      <arglist>(double *values, const Bounds &amp;other_bounds) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a1a1431264d163315f92079e4b6efe0ea</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getVariableRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a43bb8bbd34bb9bea7c7c98fadd379175</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const Bounds &amp;other_bounds) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableRandomPositionsNearBy</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>ae7f89190a6f8a5549214c6bdbb8ddc85</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const double *near, const double distance) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getVariableRandomPositionsNearBy</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6339810c332b8112d281c90dceae14fa</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const Bounds &amp;other_bounds, const double *near, const double distance) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a52c3840d55d42ab777557a40c85f5c7b</anchor>
      <arglist>(const double *values, double margin=0.0) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>satisfiesPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>adfaa39f935e5c1bc2ecc4b93d12ff9a6</anchor>
      <arglist>(const double *values, const Bounds &amp;other_bounds, double margin) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enforcePositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>aebda508eb637922f95e70c11051dfd9e</anchor>
      <arglist>(double *values) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>enforcePositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a52697682475c074c9b477f21f6c1b1e4</anchor>
      <arglist>(double *values, const Bounds &amp;other_bounds) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesVelocityBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a9b4e1c39f6303466797cf2bdce99d26d</anchor>
      <arglist>(const double *values, double margin=0.0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>satisfiesVelocityBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a756b63d7a8468adcbe80be8ca26b6332</anchor>
      <arglist>(const double *values, const Bounds &amp;other_bounds, double margin) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enforceVelocityBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a1c49840d9bbf1867486002461d35d406</anchor>
      <arglist>(double *values) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>enforceVelocityBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a0006d5c94ed938e285d3c8e01094a273</anchor>
      <arglist>(double *values, const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function">
      <type>const VariableBounds &amp;</type>
      <name>getVariableBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a5e6c6d20c556490e9af9974338b8d8ce</anchor>
      <arglist>(const std::string &amp;variable) const </arglist>
    </member>
    <member kind="function">
      <type>const Bounds &amp;</type>
      <name>getVariableBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a8dbb38ea20868f85b4d8458ba1d537e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a4aa3e6fa081382e311a4d81beefbb16c</anchor>
      <arglist>(const std::string &amp;variable, const VariableBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a879f39fa67d3274446861cb4cd8103ee</anchor>
      <arglist>(const std::vector&lt; moveit_msgs::JointLimits &gt; &amp;jlim)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; moveit_msgs::JointLimits &gt; &amp;</type>
      <name>getVariableBoundsMsg</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a33096a18b0abf024bdb41d5381911da1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeTransform</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a58d9998af67f3e9d00847813131cb728</anchor>
      <arglist>(const double *joint_values, Eigen::Isometry3d &amp;transf) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a5dc64747f5bc73a9cdfd91e149aa2976</anchor>
      <arglist>(const Eigen::Isometry3d &amp;transform, double *joint_values) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeVariableBoundsMsg</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>ab28d5b68df30fb92b77c42e353f6051c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const LinkModel *</type>
      <name>child_link_model_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>afd0fb441db87acc6e6ebddac5ca86eef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const JointModel * &gt;</type>
      <name>descendant_joint_models_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a4da353d4ead8fe5d322e667ad53e7dc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const LinkModel * &gt;</type>
      <name>descendant_link_models_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>ad9cd565db3b99c6f5c5f26c7af1f7d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>distance_factor_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>ab9f66f4455b08f59e6c677c1e1873c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>first_variable_index_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>aabd47a61b9e8247fcc739eb15c1520a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>joint_index_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>aa0dc8fd0b04d7dc7884e4d492aa6dd33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>local_variable_names_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>ab9aa3c5b474a8dadc04bc006974126b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const JointModel *</type>
      <name>mimic_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a2904f066d9d7fc67580a667ffa7c7610</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mimic_factor_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a67cc3f404fad6a0834dae7b6066998b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mimic_offset_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a57d46b347f34f847fc3152194bc787ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const JointModel * &gt;</type>
      <name>mimic_requests_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a5edee43d00ec6bc933ecff6a9f74ad1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a4ffe425a9df21403ee475c28c7949c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const JointModel * &gt;</type>
      <name>non_fixed_descendant_joint_models_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a69d9aa09bbc0a34e9ab27e05a6d87529</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const LinkModel *</type>
      <name>parent_link_model_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a8676282a63df3030e31a2c18a7519479</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>passive_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a80f0796f00099737a4a235a4593c31f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JointType</type>
      <name>type_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a3033dbd517101655c93f3a4a7259b03e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bounds</type>
      <name>variable_bounds_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a484dd6d22e03da1cc45306f753c8b01a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; moveit_msgs::JointLimits &gt;</type>
      <name>variable_bounds_msg_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a9776bc9d31514d8c90a1765a47d2a6a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VariableIndexMap</type>
      <name>variable_index_map_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a178aefc19b9cc3a1398bfcd844e87341</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>variable_names_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>afc4c6e2275ac4de0c7b23fe7c827962e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getVariableNames</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a8dd5657afadb9f4f5c86962a2c68060a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getLocalVariableNames</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a8b91d3c19e2e80076f3ced9660a5ce1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasVariable</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>ae7617e5f4d52eed081d22e2f79d84f7a</anchor>
      <arglist>(const std::string &amp;variable) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getVariableCount</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a0f8ac33e57fdfe9d1ec1ea2586d63c5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstVariableIndex</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6411d94fcff52c54b7c7b6f51402e17d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFirstVariableIndex</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>ade8d1c3c3c02b635c5fbb9fedab6a096</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getJointIndex</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6fa874602033bef6b640ab9dc5990d74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointIndex</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a51f806bb2ef0336e3a49a1dfc3b0a848</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalVariableIndex</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a5cd26149cd923740abccdc8cfd893176</anchor>
      <arglist>(const std::string &amp;variable) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableDefaultPositions</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>ab606f6e1a076886412e73c3ba579fedf</anchor>
      <arglist>(double *values) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getVariableDefaultPositions</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>ae36f401a3f18994bf1ea7d357249c063</anchor>
      <arglist>(double *values, const Bounds &amp;other_bounds) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a1a1431264d163315f92079e4b6efe0ea</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getVariableRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a43bb8bbd34bb9bea7c7c98fadd379175</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const Bounds &amp;other_bounds) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableRandomPositionsNearBy</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>ae7f89190a6f8a5549214c6bdbb8ddc85</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const double *near, const double distance) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getVariableRandomPositionsNearBy</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a6339810c332b8112d281c90dceae14fa</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const Bounds &amp;other_bounds, const double *near, const double distance) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a52c3840d55d42ab777557a40c85f5c7b</anchor>
      <arglist>(const double *values, double margin=0.0) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>satisfiesPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>adfaa39f935e5c1bc2ecc4b93d12ff9a6</anchor>
      <arglist>(const double *values, const Bounds &amp;other_bounds, double margin) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enforcePositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>aebda508eb637922f95e70c11051dfd9e</anchor>
      <arglist>(double *values) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>enforcePositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a52697682475c074c9b477f21f6c1b1e4</anchor>
      <arglist>(double *values, const Bounds &amp;other_bounds) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesVelocityBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a9b4e1c39f6303466797cf2bdce99d26d</anchor>
      <arglist>(const double *values, double margin=0.0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>satisfiesVelocityBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a756b63d7a8468adcbe80be8ca26b6332</anchor>
      <arglist>(const double *values, const Bounds &amp;other_bounds, double margin) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enforceVelocityBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a1c49840d9bbf1867486002461d35d406</anchor>
      <arglist>(double *values) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>enforceVelocityBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a0006d5c94ed938e285d3c8e01094a273</anchor>
      <arglist>(double *values, const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function">
      <type>const VariableBounds &amp;</type>
      <name>getVariableBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a5e6c6d20c556490e9af9974338b8d8ce</anchor>
      <arglist>(const std::string &amp;variable) const </arglist>
    </member>
    <member kind="function">
      <type>const Bounds &amp;</type>
      <name>getVariableBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a8dbb38ea20868f85b4d8458ba1d537e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a4aa3e6fa081382e311a4d81beefbb16c</anchor>
      <arglist>(const std::string &amp;variable, const VariableBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a879f39fa67d3274446861cb4cd8103ee</anchor>
      <arglist>(const std::vector&lt; moveit_msgs::JointLimits &gt; &amp;jlim)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; moveit_msgs::JointLimits &gt; &amp;</type>
      <name>getVariableBoundsMsg</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a33096a18b0abf024bdb41d5381911da1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeTransform</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a58d9998af67f3e9d00847813131cb728</anchor>
      <arglist>(const double *joint_values, Eigen::Isometry3d &amp;transf) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1JointModel.html</anchorfile>
      <anchor>a5dc64747f5bc73a9cdfd91e149aa2976</anchor>
      <arglist>(const Eigen::Isometry3d &amp;transform, double *joint_values) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit::core::JointModelGroup</name>
    <filename>classmoveit_1_1core_1_1JointModelGroup.html</filename>
    <class kind="struct">moveit::core::JointModelGroup::GroupMimicUpdate</class>
    <class kind="struct">moveit::core::JointModelGroup::KinematicsSolver</class>
    <member kind="typedef">
      <type>std::map&lt; const JointModelGroup *, KinematicsSolver &gt;</type>
      <name>KinematicsSolverMap</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a32b3333691b1bbb89768c01e64c9cd53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDefaultState</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a97eef3a7852d30eac1554bff1a0fca5a</anchor>
      <arglist>(const std::string &amp;name, const std::map&lt; std::string, double &gt; &amp;default_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachEndEffector</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a3ab2febe943eef00bfd5e4f83d235da8</anchor>
      <arglist>(const std::string &amp;eef_name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canSetStateFromIK</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ad40d0e6668a79302376e4613dfc32ab5</anchor>
      <arglist>(const std::string &amp;tip) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>adf0cb909f80f800f9560fb9a37e80dca</anchor>
      <arglist>(const double *state1, const double *state2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enforcePositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a9914e6f2973a33868db7377004207c5c</anchor>
      <arglist>(double *state) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enforcePositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ad2df3d386a22348d299ed67671e9c79a</anchor>
      <arglist>(double *state, const JointBoundsVector &amp;active_joint_bounds) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getActiveJointModelNames</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a47c5c4263398ddac2c5a5cf4fa93dc22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getActiveJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>aecf01507774da563e239aadf773f7e90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const JointBoundsVector &amp;</type>
      <name>getActiveJointModelsBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a00e9796b20734912cf8b871437e636ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getAttachedEndEffectorNames</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ad22e5279a0301189d6c17e7468b696de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const JointModel *</type>
      <name>getCommonRoot</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ae263c82f186a20427182afd3e377b378</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const srdf::Model::Group &amp;</type>
      <name>getConfig</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a6ee6792993f614d0532edccd116d56f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getContinuousJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a6d3931abf6e94287cab1dbcc5973bd33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDefaultIKAttempts</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>aaf9e732507fdc82d9d913f1208ad7da3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDefaultIKTimeout</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>aed809751ee3dc3907e3a315117c199ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getDefaultStateNames</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a063269ea99b2b8824e318072f6569ae5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getEndEffectorName</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a9841966c92821fe6580a13b1f64652fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::pair&lt; std::string, std::string &gt; &amp;</type>
      <name>getEndEffectorParentGroup</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ad2fdb7d1175fbc0ee988c3806bcad843</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getEndEffectorTips</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>afc107639d85ecda0495ff205450ba325</anchor>
      <arglist>(std::vector&lt; const LinkModel * &gt; &amp;tips) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getEndEffectorTips</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a5d571e8f8aafc0e02520eeef9f555523</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;tips) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getFixedJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a1108fef3ff5bad73b608313b8b83d7d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::pair&lt; KinematicsSolver, KinematicsSolverMap &gt; &amp;</type>
      <name>getGroupKinematics</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a17d06760361f8e2a7fcbe1038b4e7734</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const JointModel *</type>
      <name>getJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>aa0cbe40388148b0f507f2bae2ba0a151</anchor>
      <arglist>(const std::string &amp;joint) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getJointModelNames</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a60e9bdc6078d99d390998b26e39fe505</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a641429bf2307a4ed0b17cb138e4436bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getJointRoots</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ae48b6786d179b96d832a9fb5d709cc2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; unsigned int &gt; &amp;</type>
      <name>getKinematicsSolverJointBijection</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a80392604bb86f782591e30d003526564</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const LinkModel *</type>
      <name>getLinkModel</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ac25acc3d651a14bcbe23f97949f6cfae</anchor>
      <arglist>(const std::string &amp;link) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getLinkModelNames</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a115c312a0275780963bb3af9d2cd23a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getLinkModelNamesWithCollisionGeometry</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a970f3193a20f42e7ab8c20693575aeec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const LinkModel * &gt; &amp;</type>
      <name>getLinkModels</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a06bcfc1304007ce0545de323946e11d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a5f3741e0fe62d4ae62fcb420a0997238</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a329f5ab0d1ae3753b4f3484a42c7a6c8</anchor>
      <arglist>(const JointBoundsVector &amp;active_joint_bounds) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getMimicJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ac970702408c5d1bf51fc4b11a9fdc3a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ac7ba3d4ba4c37e31ff3cdf7b0502994d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const moveit::core::LinkModel *</type>
      <name>getOnlyOneEndEffectorTip</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a048773a05e60967b6aa8a56ab9eabc18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RobotModel &amp;</type>
      <name>getParentModel</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>aaaa321b8aca838432f6ddf1307cc2d7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const kinematics::KinematicsBaseConstPtr &amp;</type>
      <name>getSolverInstance</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a7df7cab3cea16c31218987ed4664422c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const kinematics::KinematicsBasePtr &amp;</type>
      <name>getSolverInstance</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>af30f04c295368462c9d25e373a92f28c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getSubgroupNames</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a7140c3e40220e84a87186667d6f32d5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSubgroups</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>aebf1e15df3ae728790c6f24eae8cf216</anchor>
      <arglist>(std::vector&lt; const JointModelGroup * &gt; &amp;sub_groups) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getUpdatedLinkModelNames</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a1f36a629306629389be176ef5d701a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const LinkModel * &gt; &amp;</type>
      <name>getUpdatedLinkModels</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ab4b451b82f628518f4467fe7b8cdadfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; const LinkModel * &gt; &amp;</type>
      <name>getUpdatedLinkModelsSet</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>afd173b402cc9612d3342930de30e25fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const LinkModel * &gt; &amp;</type>
      <name>getUpdatedLinkModelsWithGeometry</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ab1ea215c271a630a5c614300b91d23d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getUpdatedLinkModelsWithGeometryNames</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a679f6b1b732a7eb47e208bedea38481b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; std::string &gt; &amp;</type>
      <name>getUpdatedLinkModelsWithGeometryNamesSet</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>afaaeef325429e7e5159875a7ca1bbdc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; const LinkModel * &gt; &amp;</type>
      <name>getUpdatedLinkModelsWithGeometrySet</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>af4c596852bc591a6f955c08a214e543b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getVariableCount</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a1cfada44e6b4a6bad76c28876fe1125f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getVariableDefaultPositions</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ad6755d962dd87a1beab910efc64023b0</anchor>
      <arglist>(const std::string &amp;name, std::map&lt; std::string, double &gt; &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableDefaultPositions</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>adb43b5e2b60fd414eb83d8145030852e</anchor>
      <arglist>(std::map&lt; std::string, double &gt; &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableDefaultPositions</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>aa60c6ac723ee731655da996bb0d7d6a7</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableDefaultPositions</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>aa0497992fd89cebf1517a9b9467b719e</anchor>
      <arglist>(double *values) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVariableGroupIndex</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a8f6b77144cb00cfb401d947fd7a8badd</anchor>
      <arglist>(const std::string &amp;variable) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>getVariableIndexList</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ad10a3d57848aabbf3f0c2cff89f165a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getVariableNames</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>af71879e49624523c0d2cc85986925190</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>adf86f67a97fb9ef2f1fb27c4deab81a6</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a8a286bf915b588fac59d9def54ff8aa2</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, std::vector&lt; double &gt; &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a55cc8d59cb298dd71ff247fd73b85c88</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const JointBoundsVector &amp;active_joint_bounds) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableRandomPositionsNearBy</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ab34fb8dc61f0d3de6dc1ea459c95118a</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const double *near, const double distance) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableRandomPositionsNearBy</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>aaef049999a5894217d15c6a5ee1e891c</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, std::vector&lt; double &gt; &amp;values, const std::vector&lt; double &gt; &amp;near, double distance) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableRandomPositionsNearBy</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a83a6fdc461581d14d8088633c9a8770e</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, std::vector&lt; double &gt; &amp;values, const std::vector&lt; double &gt; &amp;near, const std::map&lt; JointModel::JointType, double &gt; &amp;distance_map) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableRandomPositionsNearBy</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>aa965c26447d694b7f3cd49d969a54173</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, std::vector&lt; double &gt; &amp;values, const std::vector&lt; double &gt; &amp;near, const std::vector&lt; double &gt; &amp;distances) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableRandomPositionsNearBy</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a4294d4785b8be729647d8dc107b3b2dd</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const JointBoundsVector &amp;active_joint_bounds, const double *near, const double distance) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableRandomPositionsNearBy</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ae88762f9283b7ce94abbfd9dbf5d76d7</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const JointBoundsVector &amp;active_joint_bounds, const double *near, const std::map&lt; JointModel::JointType, double &gt; &amp;distance_map) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableRandomPositionsNearBy</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a31563dae6ba5c7408b940cecff5d21cb</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const JointBoundsVector &amp;active_joint_bounds, const double *near, const std::vector&lt; double &gt; &amp;distances) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a3891a3676a777fe919a3f55472e40bd9</anchor>
      <arglist>(const std::string &amp;joint) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLinkModel</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a94794fccdcf6b954105e95dfd48edafd</anchor>
      <arglist>(const std::string &amp;link) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ae653db2870466f78c04e3296d310537c</anchor>
      <arglist>(const double *from, const double *to, double t, double *state) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChain</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a8a07382c1fcdc02de415536008150cac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContiguousWithinState</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a18ac7c926bf024bcf67bee53ca5aa697</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEndEffector</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ab581c7891d6cd6bed12f9fcbfb262b4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinkUpdated</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a06b911862f0542c87b1facd0d7dbd00a</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSingleDOFJoints</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>acd5fbe34bc579e59398b1fb212af6b21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSubgroup</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>af527f0c89361e296d8f9d5940b77c9d6</anchor>
      <arglist>(const std::string &amp;group) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointModelGroup</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a6577c9a301c97b83ef75f11943160c56</anchor>
      <arglist>(const std::string &amp;name, const srdf::Model::Group &amp;config, const std::vector&lt; const JointModel * &gt; &amp;joint_vector, const RobotModel *parent_model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGroupInfo</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a5f6fe544b90beab30652c048a86992c4</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>aaefffdc44c328f556bc5b4378c8388fa</anchor>
      <arglist>(const double *state, double margin=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a0a624e7d3a3b0517e41a046f4daab9aa</anchor>
      <arglist>(const double *state, const JointBoundsVector &amp;active_joint_bounds, double margin=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultIKAttempts</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ab7c9cfcc61ca77758a52a59ba9eecf9e</anchor>
      <arglist>(unsigned int ik_attempts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultIKTimeout</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a254a0225896a3dddefc75dec2c731fb4</anchor>
      <arglist>(double ik_timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEndEffectorName</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a5d378996df1584d9215cdb0edd8b76eb</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEndEffectorParent</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>aedc11a9de50041c4fb2fcde24c8c9e1e</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;link)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setRedundantJoints</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a71f61736039358fa8dfb33965840fc70</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;joints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSolverAllocators</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a4957d709813c2e4044fbfb28daf9d3a4</anchor>
      <arglist>(const SolverAllocatorFn &amp;solver, const SolverAllocatorMapFn &amp;solver_map=SolverAllocatorMapFn())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSolverAllocators</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a14667b0e463d402bd94adc8a1b6e1800</anchor>
      <arglist>(const std::pair&lt; SolverAllocatorFn, SolverAllocatorMapFn &gt; &amp;solvers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubgroupNames</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ae4fe1ec476ac40a3d5c0c08482d71678</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;subgroups)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JointModelGroup</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ab9ae54e2d4be6eecae3d37b4b9817d0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>computeIKIndexBijection</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>add479a5e225f9e1009f12d7de61bbdab</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;ik_jnames, std::vector&lt; unsigned int &gt; &amp;joint_bijection) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateMimicJoints</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>afae00a3b94243c97c83448a1e6f82c01</anchor>
      <arglist>(double *values) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>active_joint_model_name_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ad58f89bab27cef84e9068b0790396db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>active_joint_model_start_index_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a7b3b83ebdc6953264809d6e527ce6a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const JointModel * &gt;</type>
      <name>active_joint_model_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a20f0c64059f0139256c5b0d5d77a2c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JointBoundsVector</type>
      <name>active_joint_models_bounds_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a646b3a848b46be53d9d0313fa3c8c02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>attached_end_effector_names_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a63a4ead998378b42997416b7662026a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const JointModel *</type>
      <name>common_root_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a5610371e81be8fcbea9b78bb1699308b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>srdf::Model::Group</type>
      <name>config_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a614b94d775c3f80d63ee5b543e896d6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const JointModel * &gt;</type>
      <name>continuous_joint_model_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a0ea08bf05d420cf693622e4baa836003</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, std::map&lt; std::string, double &gt; &gt;</type>
      <name>default_states_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a30f69b9561ceefa176bd7aef36e8cfca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>default_states_names_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a55eae5f841483aaf8d95590c082b4c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>end_effector_name_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>affd308403b6384e22f45fa5519bf9315</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; std::string, std::string &gt;</type>
      <name>end_effector_parent_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ad23c9bb7d002b3b83e337a2434758270</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const JointModel * &gt;</type>
      <name>fixed_joints_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>af71f3aa0f403a89b9f83435d47a0bc03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; KinematicsSolver, KinematicsSolverMap &gt;</type>
      <name>group_kinematics_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a991041b3a3f08e3286c7344a4210deb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; GroupMimicUpdate &gt;</type>
      <name>group_mimic_update_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a8f51350ccc901aa4e373ac9938e56046</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>is_chain_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a4b3f51ce2f506d1d554709cbfdbc049a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>is_contiguous_index_list_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a0c58597f96f92ef349027ca548077197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>is_single_dof_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>af30898be3ad9fd414e20037e7ba99cc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JointModelMapConst</type>
      <name>joint_model_map_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a6c3099df6d0c294da49ad79d770d18f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>joint_model_name_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ae25cd55caf6eabbf3eb6213f1a4d2847</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const JointModel * &gt;</type>
      <name>joint_model_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a07ee5b853f93d629079b9ce3acbd0891</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const JointModel * &gt;</type>
      <name>joint_roots_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a239fc9f99a4b77a3185aad34f9b5601f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VariableIndexMap</type>
      <name>joint_variables_index_map_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ac94c88c58cf1a8f6e608f61369369287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinkModelMapConst</type>
      <name>link_model_map_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a5e4a635b3336b85af25f81de02695f3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>link_model_name_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>aac5e7c059e5446d24f723c8e6f8e26ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const LinkModel * &gt;</type>
      <name>link_model_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a25953584233d2d0cf20c92ae775f4ca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>link_model_with_geometry_name_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>af6c80baae14099ede7887faac8475882</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const LinkModel * &gt;</type>
      <name>link_model_with_geometry_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>aa4d20fa0d39607b6c332d8fa2f2af9af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const JointModel * &gt;</type>
      <name>mimic_joints_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>aa76df7a65ab1038fe994abb4ea12cd47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a058f6b292fd9f67ab0d6fc3b89780fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const RobotModel *</type>
      <name>parent_model_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>ade867d7f18e2a6b88c0b13f254aa836f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>subgroup_names_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a7df7237f857a1d8cd1e6bd22874edcdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>subgroup_names_set_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>af15ca39beeba5be049866ff4bd951a8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>updated_link_model_name_set_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>aa6d3fc3c80fd2be70aa1cc0933ba2288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>updated_link_model_name_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a37b94d371c93195724d89b8860f90fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; const LinkModel * &gt;</type>
      <name>updated_link_model_set_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a7f270068fb7ee9973c930abbdb89e2d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const LinkModel * &gt;</type>
      <name>updated_link_model_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a71fa1e2c4df3d51f2673ce1df9be781e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>updated_link_model_with_geometry_name_set_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a7bae2bd456355c1bc218f9485eb55ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>updated_link_model_with_geometry_name_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>acb0e2e802ce68e3668e5d53ae2e33b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; const LinkModel * &gt;</type>
      <name>updated_link_model_with_geometry_set_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a01bfac0268c983848cb05689454f60de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const LinkModel * &gt;</type>
      <name>updated_link_model_with_geometry_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a2c0b693e35a220fbcb947dd10c22c8d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>variable_count_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a941ce003fea5321bb6d0cf7e7dc63dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>variable_index_list_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a03454944991783dd960c825587e341e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>variable_names_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a49aef2ea6e9837bd40c17c4272fc8d42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>variable_names_set_</name>
      <anchorfile>classmoveit_1_1core_1_1JointModelGroup.html</anchorfile>
      <anchor>a73f032d55a6936ad8c4a8a0eb22c6a91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>moveit::core::JumpThreshold</name>
    <filename>structmoveit_1_1core_1_1JumpThreshold.html</filename>
    <member kind="function">
      <type></type>
      <name>JumpThreshold</name>
      <anchorfile>structmoveit_1_1core_1_1JumpThreshold.html</anchorfile>
      <anchor>af6cf4df8ad3b6a6b41317aa010e0e8c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JumpThreshold</name>
      <anchorfile>structmoveit_1_1core_1_1JumpThreshold.html</anchorfile>
      <anchor>afe221c758823f10c2435053e7fbc0af2</anchor>
      <arglist>(double jt_factor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JumpThreshold</name>
      <anchorfile>structmoveit_1_1core_1_1JumpThreshold.html</anchorfile>
      <anchor>a743c6b4c64ffa9a40ceabbba09d7f8c0</anchor>
      <arglist>(double jt_revolute, double jt_prismatic)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>factor</name>
      <anchorfile>structmoveit_1_1core_1_1JumpThreshold.html</anchorfile>
      <anchor>ae2ed5c56e85a645821c4609ac3fc4149</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>prismatic</name>
      <anchorfile>structmoveit_1_1core_1_1JumpThreshold.html</anchorfile>
      <anchor>accfda6b7a21b1e6f0b52ce0b0e96b035</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>revolute</name>
      <anchorfile>structmoveit_1_1core_1_1JumpThreshold.html</anchorfile>
      <anchor>aca22036ac33a9ab9bbc5b7750dcb0419</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>kinematic_constraints::KinematicConstraint</name>
    <filename>classkinematic__constraints_1_1KinematicConstraint.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ConstraintType</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a3580cb0bd862d44e8a215fe5fd525b35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_CONSTRAINT</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a3580cb0bd862d44e8a215fe5fd525b35aa174d64cb8361ed8b46cf483b9d177b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JOINT_CONSTRAINT</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a3580cb0bd862d44e8a215fe5fd525b35ac04abbd57eaba8d87587eb3f0f456b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSITION_CONSTRAINT</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a3580cb0bd862d44e8a215fe5fd525b35af36a5624148dcf013d21680f1c959714</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ORIENTATION_CONSTRAINT</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a3580cb0bd862d44e8a215fe5fd525b35ad9807996b92af99bc92b1b89f25e12dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VISIBILITY_CONSTRAINT</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a3580cb0bd862d44e8a215fe5fd525b35a5374b6c8fe4f18b643f1e0ef41843ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JOINT_CONSTRAINT</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a3580cb0bd862d44e8a215fe5fd525b35ac04abbd57eaba8d87587eb3f0f456b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ORIENTATION_CONSTRAINT</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a3580cb0bd862d44e8a215fe5fd525b35ad9807996b92af99bc92b1b89f25e12dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSITION_CONSTRAINT</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a3580cb0bd862d44e8a215fe5fd525b35af36a5624148dcf013d21680f1c959714</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_CONSTRAINT</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a3580cb0bd862d44e8a215fe5fd525b35aa174d64cb8361ed8b46cf483b9d177b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VISIBILITY_CONSTRAINT</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a3580cb0bd862d44e8a215fe5fd525b35a5374b6c8fe4f18b643f1e0ef41843ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a274f48adeec52887ecc31858c5f938d7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstraintEvaluationResult</type>
      <name>decide</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a3f1b4eeaf1cf8a66bfc7299f121d97bc</anchor>
      <arglist>(const robot_state::RobotState &amp;state, bool verbose=false) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>enabled</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a941e7334e9bd320492d00c4ff49f81d2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equal</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a7275ec0d99e4dd0429c0f6c0ad9930a4</anchor>
      <arglist>(const KinematicConstraint &amp;other, double margin) const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getConstraintWeight</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a6a4ae5a9427c3a4b22d0f4a499e35b98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const robot_model::RobotModelConstPtr &amp;</type>
      <name>getRobotModel</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a4305e930358f91e23654f3d55eb93a4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstraintType</type>
      <name>getType</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a1260acf3141f85c3bee2e36fd64da54d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KinematicConstraint</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>ad5c81b774059efc88488b447a2235ceb</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a93e22de073ad0673a5bab5b1ab956f65</anchor>
      <arglist>(std::ostream &amp;=std::cout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KinematicConstraint</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a5d2307e87ec83d4a593f2ddb2a974fdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>constraint_weight_</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a14f8ecf91788ec7188058521d308e2b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>robot_model::RobotModelConstPtr</type>
      <name>robot_model_</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a6b9914be6269dd548d8f7f44ae825434</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstraintType</type>
      <name>type_</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraint.html</anchorfile>
      <anchor>a2a67bff0f308501192c11fe63ff48f80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>kinematic_constraints::KinematicConstraintSet</name>
    <filename>classkinematic__constraints_1_1KinematicConstraintSet.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>a5d684ae7ff62266c2ce1bf44ef595f0a</anchor>
      <arglist>(const moveit_msgs::Constraints &amp;c, const robot_state::Transforms &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>aa40451f0a0ea70f68df0e29ce40d8591</anchor>
      <arglist>(const std::vector&lt; moveit_msgs::JointConstraint &gt; &amp;jc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>ae23c471ab648b1a85f1a866767e4c1fb</anchor>
      <arglist>(const std::vector&lt; moveit_msgs::PositionConstraint &gt; &amp;pc, const robot_state::Transforms &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>a1ef9786694e21e3cca4e7b561ac4955b</anchor>
      <arglist>(const std::vector&lt; moveit_msgs::OrientationConstraint &gt; &amp;oc, const robot_state::Transforms &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>a264dc0909b1e52f25de8ba7ee7b5e8f7</anchor>
      <arglist>(const std::vector&lt; moveit_msgs::VisibilityConstraint &gt; &amp;vc, const robot_state::Transforms &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>a3a4de9875c6106dc626ff1d9a816b3fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstraintEvaluationResult</type>
      <name>decide</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>a284fc348e8d67877b0a03a3d24ca095b</anchor>
      <arglist>(const robot_state::RobotState &amp;state, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>ConstraintEvaluationResult</type>
      <name>decide</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>ae0e5445c5146b9bc4f3beb591b502a6a</anchor>
      <arglist>(const robot_state::RobotState &amp;state, std::vector&lt; ConstraintEvaluationResult &gt; &amp;results, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>af2955f14b8feb31a4060f8886743a7d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>af66f40f676428e629d548c9d8e7a0fdb</anchor>
      <arglist>(const KinematicConstraintSet &amp;other, double margin) const </arglist>
    </member>
    <member kind="function">
      <type>const moveit_msgs::Constraints &amp;</type>
      <name>getAllConstraints</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>addf37c9e6f0ebc6c390a4b8196b660b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; moveit_msgs::JointConstraint &gt; &amp;</type>
      <name>getJointConstraints</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>abbcb11e919e7d6ffd1f1122bb420dab6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; moveit_msgs::OrientationConstraint &gt; &amp;</type>
      <name>getOrientationConstraints</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>abee212f227d7e5e4ee72f85cefe4a087</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; moveit_msgs::PositionConstraint &gt; &amp;</type>
      <name>getPositionConstraints</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>a0eb3d95c1d9d12db587f6dd26d3fcd12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; moveit_msgs::VisibilityConstraint &gt; &amp;</type>
      <name>getVisibilityConstraints</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>aa782ebd4a934728cfb4c951ce1c33947</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KinematicConstraintSet</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>a8240a7e303a238417fcc459adf0387f1</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>acdc603471bcf9ebbd324e4519ff19072</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KinematicConstraintSet</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>aa222044704dde9426fdc9a11b3d45bc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>moveit_msgs::Constraints</type>
      <name>all_constraints_</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>abf8e95a0807d5682a1b6c0c1b831e421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; moveit_msgs::JointConstraint &gt;</type>
      <name>joint_constraints_</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>a7cc0b097cd2c9e1cfdf235276780e2fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; KinematicConstraintPtr &gt;</type>
      <name>kinematic_constraints_</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>acc80f4b1de67f5e1797416585df250bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; moveit_msgs::OrientationConstraint &gt;</type>
      <name>orientation_constraints_</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>ad04aa3f60f7cf719efb760dfaeebae90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; moveit_msgs::PositionConstraint &gt;</type>
      <name>position_constraints_</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>a828b7f65b580c67a587ccca43413d08c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>robot_model::RobotModelConstPtr</type>
      <name>robot_model_</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>a49630377d47a42450536db677041d586</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; moveit_msgs::VisibilityConstraint &gt;</type>
      <name>visibility_constraints_</name>
      <anchorfile>classkinematic__constraints_1_1KinematicConstraintSet.html</anchorfile>
      <anchor>a2b3d2a5b4324c89397c98c8eac957512</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>kinematics::KinematicsBase</name>
    <filename>classkinematics_1_1KinematicsBase.html</filename>
    <member kind="typedef">
      <type>boost::function&lt; void(const geometry_msgs::Pose &amp;ik_pose, const std::vector&lt; double &gt; &amp;ik_solution, moveit_msgs::MoveItErrorCodes &amp;error_code)&gt;</type>
      <name>IKCallbackFn</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>ab56abb588898e9baeebc5bc67bfc74ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getBaseFrame</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>afe5eb397a992fa6764fca135765bbf9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDefaultTimeout</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>ac96713d5aaf392ecb7f258f7cf69f498</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getGroupName</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a505d62a64fc774a53ccfb8eaf8253ed0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::vector&lt; std::string &gt; &amp;</type>
      <name>getJointNames</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a116303b23cc6c0b105b7aa058901a90a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::vector&lt; std::string &gt; &amp;</type>
      <name>getLinkNames</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a2b827d9a0368aea4f9e81808c267d8a9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getPositionFK</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a0e79179c232829543345269c7e839e27</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;link_names, const std::vector&lt; double &gt; &amp;joint_angles, std::vector&lt; geometry_msgs::Pose &gt; &amp;poses) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getPositionIK</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a1e17be86371e1df09bfbf0273b4f4139</anchor>
      <arglist>(const geometry_msgs::Pose &amp;ik_pose, const std::vector&lt; double &gt; &amp;ik_seed_state, std::vector&lt; double &gt; &amp;solution, moveit_msgs::MoveItErrorCodes &amp;error_code, const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions()) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getPositionIK</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>abf6d20852d81fa499a8853a150c7b5b5</anchor>
      <arglist>(const std::vector&lt; geometry_msgs::Pose &gt; &amp;ik_poses, const std::vector&lt; double &gt; &amp;ik_seed_state, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;solutions, KinematicsResult &amp;result, const kinematics::KinematicsQueryOptions &amp;options) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getRedundantJoints</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>adf2d16019dae95ca263831a44aa29d27</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; &amp;redundant_joint_indices) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSearchDiscretization</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a6b588c863d1af3647551e8ca13fe92c4</anchor>
      <arglist>(int joint_index=0) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; DiscretizationMethod &gt;</type>
      <name>getSupportedDiscretizationMethods</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a48ce07136ebb2972d96c72be0fb77bf4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getTipFrame</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>ae34ca5415b64fbe245671f18bf6b8951</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; std::string &gt; &amp;</type>
      <name>getTipFrames</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a2a8a56e85af0a759f463cfff5ec9985a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>initialize</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a578ce439078dee2370694c56b07e1ea2</anchor>
      <arglist>(const std::string &amp;robot_description, const std::string &amp;group_name, const std::string &amp;base_frame, const std::string &amp;tip_frame, double search_discretization)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initialize</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>ab729cd7ec61aa3b43d3d5820e8f64a49</anchor>
      <arglist>(const std::string &amp;robot_description, const std::string &amp;group_name, const std::string &amp;base_frame, const std::vector&lt; std::string &gt; &amp;tip_frames, double search_discretization)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KinematicsBase</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a46ea01b9d8de66ecc4228b0d2a39df47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>searchPositionIK</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a408f7eb9fef4e46ca38b4a08a72fd505</anchor>
      <arglist>(const geometry_msgs::Pose &amp;ik_pose, const std::vector&lt; double &gt; &amp;ik_seed_state, double timeout, std::vector&lt; double &gt; &amp;solution, moveit_msgs::MoveItErrorCodes &amp;error_code, const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions()) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>searchPositionIK</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a37ad4bd4a8c84adfc9ee361005cea6ea</anchor>
      <arglist>(const geometry_msgs::Pose &amp;ik_pose, const std::vector&lt; double &gt; &amp;ik_seed_state, double timeout, const std::vector&lt; double &gt; &amp;consistency_limits, std::vector&lt; double &gt; &amp;solution, moveit_msgs::MoveItErrorCodes &amp;error_code, const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions()) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>searchPositionIK</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a0292dee35c9c6b68967597ac18fcad77</anchor>
      <arglist>(const geometry_msgs::Pose &amp;ik_pose, const std::vector&lt; double &gt; &amp;ik_seed_state, double timeout, std::vector&lt; double &gt; &amp;solution, const IKCallbackFn &amp;solution_callback, moveit_msgs::MoveItErrorCodes &amp;error_code, const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions()) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>searchPositionIK</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a1019de635acc7165e337ff4c7c11f3f9</anchor>
      <arglist>(const geometry_msgs::Pose &amp;ik_pose, const std::vector&lt; double &gt; &amp;ik_seed_state, double timeout, const std::vector&lt; double &gt; &amp;consistency_limits, std::vector&lt; double &gt; &amp;solution, const IKCallbackFn &amp;solution_callback, moveit_msgs::MoveItErrorCodes &amp;error_code, const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions()) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>searchPositionIK</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a899767e95ce008b04c762afeb6f10e9b</anchor>
      <arglist>(const std::vector&lt; geometry_msgs::Pose &gt; &amp;ik_poses, const std::vector&lt; double &gt; &amp;ik_seed_state, double timeout, const std::vector&lt; double &gt; &amp;consistency_limits, std::vector&lt; double &gt; &amp;solution, const IKCallbackFn &amp;solution_callback, moveit_msgs::MoveItErrorCodes &amp;error_code, const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions(), const moveit::core::RobotState *context_state=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultTimeout</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a6fffaaeb6ef4753c069e7d1d48d6cbf5</anchor>
      <arglist>(double timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setRedundantJoints</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>aece5cc8cb89ce4f06b4923b77940a380</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;redundant_joint_indices)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setRedundantJoints</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>ae8596c4d8eaf32ea9d00c07629c8c00a</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;redundant_joint_names)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSearchDiscretization</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a1ab7f68c8d7d694f9dd35bd14a150c0a</anchor>
      <arglist>(double sd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSearchDiscretization</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>aceee87eac8147a2f4d5f3904c2abdced</anchor>
      <arglist>(const std::map&lt; int, double &gt; &amp;discretization)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValues</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a9c1a92074da23350010227819f955a72</anchor>
      <arglist>(const std::string &amp;robot_description, const std::string &amp;group_name, const std::string &amp;base_frame, const std::string &amp;tip_frame, double search_discretization)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValues</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a382259b506544902fbf8ed4a5d8ab1ed</anchor>
      <arglist>(const std::string &amp;robot_description, const std::string &amp;group_name, const std::string &amp;base_frame, const std::vector&lt; std::string &gt; &amp;tip_frames, double search_discretization)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsGroup</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>af1b024fdedd9425e2d3790066ec16254</anchor>
      <arglist>(const moveit::core::JointModelGroup *jmg, std::string *error_text_out=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KinematicsBase</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>ab2446ecb0ff3c644ee57c94bdf3407bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DEFAULT_SEARCH_DISCRETIZATION</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>ad1cf8914589eaad778935c805300e243</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DEFAULT_TIMEOUT</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>abbbaaf2548c5f94248ccded217ae7945</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>lookupParam</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>abca2f7f3e448ffe3ecc9905e04131ffa</anchor>
      <arglist>(const std::string &amp;param, T &amp;val, const T &amp;default_val) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>base_frame_</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>ad296ccd146499f8614714bed7259d537</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>default_timeout_</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a9b62e730ef87351b713423d3670453bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>group_name_</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a5fea5fd67a7bb2bebcfcb1136fc8f0fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, double &gt;</type>
      <name>redundant_joint_discretization_</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a3f74c84c86cee7d52779017686f6f68d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>redundant_joint_indices_</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a4904dd307711ed67bf0a098a93aef0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>robot_description_</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>ae7591108b8d3aedb37397ff6bc6ec199</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>search_discretization_</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a5e0dc59abf23db6b9802b45b955f456b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; DiscretizationMethod &gt;</type>
      <name>supported_methods_</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a69b54d01277b23db209f7b58d4f8b7e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>tip_frame_</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a4ff58029a0b678778908c24e224815bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>tip_frames_</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>aa4b2a4f00dc56aa5a7296b226aa09944</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::string</type>
      <name>removeSlash</name>
      <anchorfile>classkinematics_1_1KinematicsBase.html</anchorfile>
      <anchor>a057cf110890c155eeea09df794f6d165</anchor>
      <arglist>(const std::string &amp;str) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>kinematics_metrics::KinematicsMetrics</name>
    <filename>classkinematics__metrics_1_1KinematicsMetrics.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>getManipulability</name>
      <anchorfile>classkinematics__metrics_1_1KinematicsMetrics.html</anchorfile>
      <anchor>a8bc0ff4bbb402031460232dfe9a1f18d</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const std::string &amp;group_name, double &amp;condition_number, bool translation=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getManipulability</name>
      <anchorfile>classkinematics__metrics_1_1KinematicsMetrics.html</anchorfile>
      <anchor>a71a41e590418bfa2fb883b3f5836e737</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const robot_model::JointModelGroup *joint_model_group, double &amp;condition_number, bool translation=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getManipulabilityEllipsoid</name>
      <anchorfile>classkinematics__metrics_1_1KinematicsMetrics.html</anchorfile>
      <anchor>a199e4eca6d21d1d68b361e692ef0ea72</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const std::string &amp;group_name, Eigen::MatrixXcd &amp;eigen_values, Eigen::MatrixXcd &amp;eigen_vectors) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getManipulabilityEllipsoid</name>
      <anchorfile>classkinematics__metrics_1_1KinematicsMetrics.html</anchorfile>
      <anchor>a2613b7d2a050415ca06c0c1633a8cd10</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const robot_model::JointModelGroup *joint_model_group, Eigen::MatrixXcd &amp;eigen_values, Eigen::MatrixXcd &amp;eigen_vectors) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getManipulabilityIndex</name>
      <anchorfile>classkinematics__metrics_1_1KinematicsMetrics.html</anchorfile>
      <anchor>a933a9483f76272827e56207572d31145</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const std::string &amp;group_name, double &amp;manipulability_index, bool translation=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getManipulabilityIndex</name>
      <anchorfile>classkinematics__metrics_1_1KinematicsMetrics.html</anchorfile>
      <anchor>a524adfee4e4aad1d9388d2d6a1ccffd0</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const robot_model::JointModelGroup *joint_model_group, double &amp;manipulability_index, bool translation=false) const </arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>getPenaltyMultiplier</name>
      <anchorfile>classkinematics__metrics_1_1KinematicsMetrics.html</anchorfile>
      <anchor>a046cc397347c99fd3bbeeabb6c73bcea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KinematicsMetrics</name>
      <anchorfile>classkinematics__metrics_1_1KinematicsMetrics.html</anchorfile>
      <anchor>ac2c4ebcc7bbc936ab51ab5015a6c7439</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;robot_model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPenaltyMultiplier</name>
      <anchorfile>classkinematics__metrics_1_1KinematicsMetrics.html</anchorfile>
      <anchor>a51e4bb668cdf56ede1895e44273a9dc7</anchor>
      <arglist>(double multiplier)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>robot_model::RobotModelConstPtr</type>
      <name>robot_model_</name>
      <anchorfile>classkinematics__metrics_1_1KinematicsMetrics.html</anchorfile>
      <anchor>a68ba3db611ba28b7c5b11d3b470a5f43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>getJointLimitsPenalty</name>
      <anchorfile>classkinematics__metrics_1_1KinematicsMetrics.html</anchorfile>
      <anchor>a212ae249024321169638b8af3ee4e661</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const robot_model::JointModelGroup *joint_model_group) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>penalty_multiplier_</name>
      <anchorfile>classkinematics__metrics_1_1KinematicsMetrics.html</anchorfile>
      <anchor>ac88dc4381ea15602d3f542e21ae7a98f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>kinematics::KinematicsQueryOptions</name>
    <filename>structkinematics_1_1KinematicsQueryOptions.html</filename>
    <member kind="function">
      <type></type>
      <name>KinematicsQueryOptions</name>
      <anchorfile>structkinematics_1_1KinematicsQueryOptions.html</anchorfile>
      <anchor>aa6468d8e1fb94e8980f38219ab6112d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>DiscretizationMethod</type>
      <name>discretization_method</name>
      <anchorfile>structkinematics_1_1KinematicsQueryOptions.html</anchorfile>
      <anchor>a1d37bb742d4858a971f8e11cee1607ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>lock_redundant_joints</name>
      <anchorfile>structkinematics_1_1KinematicsQueryOptions.html</anchorfile>
      <anchor>a249917caa95dc48e2c9d31fcb104401b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>return_approximate_solution</name>
      <anchorfile>structkinematics_1_1KinematicsQueryOptions.html</anchorfile>
      <anchor>af8cfcb8d188f739c584d33292878bf0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>kinematics::KinematicsResult</name>
    <filename>structkinematics_1_1KinematicsResult.html</filename>
    <member kind="variable">
      <type>KinematicError</type>
      <name>kinematic_error</name>
      <anchorfile>structkinematics_1_1KinematicsResult.html</anchorfile>
      <anchor>a8358c6dd1ed8f01ffe1a3dfa89fe698b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>solution_percentage</name>
      <anchorfile>structkinematics_1_1KinematicsResult.html</anchorfile>
      <anchor>aa953cd93e27fe047ee0c850a8f59c512</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>moveit::core::JointModelGroup::KinematicsSolver</name>
    <filename>structmoveit_1_1core_1_1JointModelGroup_1_1KinematicsSolver.html</filename>
    <member kind="function">
      <type></type>
      <name>KinematicsSolver</name>
      <anchorfile>structmoveit_1_1core_1_1JointModelGroup_1_1KinematicsSolver.html</anchorfile>
      <anchor>af970addcc0b385a5d1ab8ae14712f5a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>structmoveit_1_1core_1_1JointModelGroup_1_1KinematicsSolver.html</anchorfile>
      <anchor>ade718ac1b1724a3cc5f4c80beaebb5c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmoveit_1_1core_1_1JointModelGroup_1_1KinematicsSolver.html</anchorfile>
      <anchor>a2b00d0cd58c375bca29f5d2dfb8928fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>SolverAllocatorFn</type>
      <name>allocator_</name>
      <anchorfile>structmoveit_1_1core_1_1JointModelGroup_1_1KinematicsSolver.html</anchorfile>
      <anchor>abf447be92276bece38eec6c92b8bb7b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>bijection_</name>
      <anchorfile>structmoveit_1_1core_1_1JointModelGroup_1_1KinematicsSolver.html</anchorfile>
      <anchor>a40480202bf9f06b3b7cdd92f761f4de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>default_ik_attempts_</name>
      <anchorfile>structmoveit_1_1core_1_1JointModelGroup_1_1KinematicsSolver.html</anchorfile>
      <anchor>a818676c9d99dff0755b1acfa11f2c39c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>default_ik_timeout_</name>
      <anchorfile>structmoveit_1_1core_1_1JointModelGroup_1_1KinematicsSolver.html</anchorfile>
      <anchor>a971a70577752991d2d4bc5881dc42dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>kinematics::KinematicsBasePtr</type>
      <name>solver_instance_</name>
      <anchorfile>structmoveit_1_1core_1_1JointModelGroup_1_1KinematicsSolver.html</anchorfile>
      <anchor>aee1ac13230abea36b8d67eea54164ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>kinematics::KinematicsBaseConstPtr</type>
      <name>solver_instance_const_</name>
      <anchorfile>structmoveit_1_1core_1_1JointModelGroup_1_1KinematicsSolver.html</anchorfile>
      <anchor>a68e2589b891bdfa770890e31ccd5ee9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit::core::LinkModel</name>
    <filename>classmoveit_1_1core_1_1LinkModel.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addAssociatedFixedTransform</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a9fc0ba69509b6e9c3e29cc57cfad2ecd</anchor>
      <arglist>(const LinkModel *link_model, const Eigen::Isometry3d &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChildJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a75716acf7c30b1d81bce6658ca896b23</anchor>
      <arglist>(const JointModel *joint)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>areCollisionOriginTransformsIdentity</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a9deecc978aeba4ee2f359a711a7b9459</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const LinkTransformMap &amp;</type>
      <name>getAssociatedFixedTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a19c0346526b6fb65d57433ce5bd2f4ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>getCenteredBoundingBoxOffset</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>ad9f0226287794b757be29076d2064cc2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getChildJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>ab5e8dbd3fedaf9b3ff8cd1e368b526a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const EigenSTL::vector_Isometry3d &amp;</type>
      <name>getCollisionOriginTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a27033b95e367e248d477ea0d4d260fc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstCollisionBodyTransformIndex</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a88a4d9a724effdff3d7140c22fc12bb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getJointOriginTransform</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a0b68ee7f94f0f0b9cc8c4b0af2b78aec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLinkIndex</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a9477e34d19b398a79c0628eca7b45bb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a740b92dcc79944c9412c91f549959cea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const JointModel *</type>
      <name>getParentJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>adf2c93cdc2ffc92595633779cc648cb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const LinkModel *</type>
      <name>getParentLinkModel</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>af46ff660f696b744f18b6c63e94a9507</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>getShapeExtentsAtOrigin</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>aa6df2b6e7c3e63d664a2dbdc4ddf26f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; shapes::ShapeConstPtr &gt; &amp;</type>
      <name>getShapes</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>aa3e0210ad68448a6acc4918119160685</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getVisualMeshFilename</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a90ef5e471952c59441a6876021a67e8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getVisualMeshOrigin</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a29994d4244e57486d6292f6c1db95184</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>getVisualMeshScale</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a15880bcc60873cf0ebc25f474f214f00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>jointOriginTransformIsIdentity</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a1e4ba590d97a821f683490d268183804</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>LinkModel</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>aecd93297ebbbad8f8aa052c7c35ec1f3</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parentJointIsFixed</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a068fdbc0f468475dc8a72c9be21ce5ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFirstCollisionBodyTransformIndex</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a71c198ec59d4c4389bb29ccd4847d4e1</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGeometry</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a77830405460333197be4ba84af70ec06</anchor>
      <arglist>(const std::vector&lt; shapes::ShapeConstPtr &gt; &amp;shapes, const EigenSTL::vector_Isometry3d &amp;origins)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointOriginTransform</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>ac742dc6c7e8f9fb99497dfb505df906e</anchor>
      <arglist>(const Eigen::Isometry3d &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinkIndex</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>abe9f6509438d641ce5c45a8b432366ec</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParentJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>ab2cd3fe0febcd09ebd6f56690e2a2229</anchor>
      <arglist>(const JointModel *joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParentLinkModel</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>aa48f5a6f16c91299a451c21fbeef757d</anchor>
      <arglist>(const LinkModel *link)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisualMesh</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a4589c754516558e0214c2263c3d58583</anchor>
      <arglist>(const std::string &amp;visual_mesh, const Eigen::Isometry3d &amp;origin, const Eigen::Vector3d &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LinkModel</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>ac8675c197c1308e855678e09bcde521d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LinkTransformMap</type>
      <name>associated_fixed_transforms_</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>aae7dbe03da4f1ddccbda355290ca581b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Vector3d</type>
      <name>centered_bounding_box_offset_</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a8f3a6bd1c9c1a2453506d3d8a7a96427</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const JointModel * &gt;</type>
      <name>child_joint_models_</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a423c7c9e0275f5c136ef4ff9fe7260c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EigenSTL::vector_Isometry3d</type>
      <name>collision_origin_transform_</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>ad2409c58aff489b6051c53c89546e35f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>collision_origin_transform_is_identity_</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>ab2fd5356e5440a8e194e489aa33cfa15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>first_collision_body_transform_index_</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a1563813c0a696bab629b5fa70278edb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>is_parent_joint_fixed_</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a9d0c25dd7e7e2efeec49049883cf9127</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Isometry3d</type>
      <name>joint_origin_transform_</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>ae73aa3cbb0f036a34574bbb2dd3f02b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>joint_origin_transform_is_identity_</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>abc77b6cac17f73e0eb8889ce1b15d8a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>link_index_</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a50078482af7ca0331aff3c69c15124bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a05a954b4dee56e534ef88ee9e514952f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const JointModel *</type>
      <name>parent_joint_model_</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a374624207339f4625decc951e6347db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const LinkModel *</type>
      <name>parent_link_model_</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a79d7417adf07400f4142b58562a6f4a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Vector3d</type>
      <name>shape_extents_</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a93ed4000d9baa0806d87a3344138f25b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; shapes::ShapeConstPtr &gt;</type>
      <name>shapes_</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a5c10fe50f5c47635f3e1f30c80a24a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>visual_mesh_filename_</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a984b66fa356c4c5533e25755e877b78e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Isometry3d</type>
      <name>visual_mesh_origin_</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a33143600ddb0a187d075b94b4de7636d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Vector3d</type>
      <name>visual_mesh_scale_</name>
      <anchorfile>classmoveit_1_1core_1_1LinkModel.html</anchorfile>
      <anchor>a42d013f38c84f06653d5bdcbbf9b8ca2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LoadPlanningModelsPr2</name>
    <filename>classLoadPlanningModelsPr2.html</filename>
    <member kind="function" protection="protected">
      <type>kinematics::KinematicsBasePtr</type>
      <name>getKinematicsSolverLeftArm</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>a80574ea3fe44f2f51fe3c46b87df3200</anchor>
      <arglist>(const robot_model::JointModelGroup *jmg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>kinematics::KinematicsBasePtr</type>
      <name>getKinematicsSolverRightArm</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>a502b7de0e515414115ec9ebf6ec1eb47</anchor>
      <arglist>(const robot_model::JointModelGroup *jmg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetUp</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>a9b2068eb5817ad2fd987ed72ce8e4b8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetUp</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>a4584437ae8ba1bf07cde569b1643a0f0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetUp</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>a4584437ae8ba1bf07cde569b1643a0f0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetUp</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>a4584437ae8ba1bf07cde569b1643a0f0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetUp</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>a4584437ae8ba1bf07cde569b1643a0f0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>TearDown</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>a28d84fa5971e9161ff3f8c0330f4e8fb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>TearDown</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>acf4a419ed8c19809166320fab9a2265a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>TearDown</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>a28d84fa5971e9161ff3f8c0330f4e8fb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>TearDown</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>a28d84fa5971e9161ff3f8c0330f4e8fb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>TearDown</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>a28d84fa5971e9161ff3f8c0330f4e8fb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>robot_model::SolverAllocatorFn</type>
      <name>func_left_arm</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>abf8f04fe0b62e6e20892d866f0545924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>robot_model::SolverAllocatorFn</type>
      <name>func_right_arm</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>aa09313efc8388b053da9b0bca87db71a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>robot_model::RobotModelPtr</type>
      <name>kmodel</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>a2f91f2dac36e101e6834858f8a4ad924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>pr2_arm_kinematics::PR2ArmKinematicsPluginPtr</type>
      <name>pr2_kinematics_plugin_left_arm_</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>afc52d53788449834f6e800be4f610c61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>pr2_arm_kinematics::PR2ArmKinematicsPluginPtr</type>
      <name>pr2_kinematics_plugin_right_arm_</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>a5a7c582a41f5cc67265c0a855abdf564</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>planning_scene::PlanningScenePtr</type>
      <name>ps</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>a7acb6414a712e5ea40f386ce7262083e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>moveit::core::RobotModelConstPtr</type>
      <name>robot_model</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>a9b71ffff74cc687870ab824fa93a61ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>srdf::ModelSharedPtr</type>
      <name>srdf_model</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>aecda959372338ad3be78ffcfba4db512</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>srdf::ModelSharedPtr</type>
      <name>srdf_model_</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>ae9aa44e0e2c7dcc7eb81dd1f9d8ba499</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>srdf_ok_</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>a2278c493f6da5ea1bbee05a3c9ce753f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>urdf::ModelInterfaceSharedPtr</type>
      <name>urdf_model</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>a18ed4f22168f38a222d9cc76d81fd880</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>urdf::ModelInterfaceSharedPtr</type>
      <name>urdf_model_</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>a6d3da4ccac2204b83892f56028d50d58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>urdf_ok_</name>
      <anchorfile>classLoadPlanningModelsPr2.html</anchorfile>
      <anchor>a9ba43f397663aa8fb277865e8bd74047</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>moveit::core::MaxEEFStep</name>
    <filename>structmoveit_1_1core_1_1MaxEEFStep.html</filename>
    <member kind="function">
      <type></type>
      <name>MaxEEFStep</name>
      <anchorfile>structmoveit_1_1core_1_1MaxEEFStep.html</anchorfile>
      <anchor>a757a4d26f38ef34634c256fb459373d5</anchor>
      <arglist>(double translation=0.0, double rotation=0.0)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rotation</name>
      <anchorfile>structmoveit_1_1core_1_1MaxEEFStep.html</anchorfile>
      <anchor>a5b41a30b48f3d512307f6a2d7c536d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>translation</name>
      <anchorfile>structmoveit_1_1core_1_1MaxEEFStep.html</anchorfile>
      <anchor>a5989919ddc40e16bfc213bfde1cb81ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>planning_interface::MotionPlanDetailedResponse</name>
    <filename>structplanning__interface_1_1MotionPlanDetailedResponse.html</filename>
    <member kind="function">
      <type>void</type>
      <name>getMessage</name>
      <anchorfile>structplanning__interface_1_1MotionPlanDetailedResponse.html</anchorfile>
      <anchor>aeaf945b612456ad2ca33a65f90f78413</anchor>
      <arglist>(moveit_msgs::MotionPlanDetailedResponse &amp;msg) const </arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>description_</name>
      <anchorfile>structplanning__interface_1_1MotionPlanDetailedResponse.html</anchorfile>
      <anchor>ae4feba05ab23e6d2f806e766e23d83d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>moveit_msgs::MoveItErrorCodes</type>
      <name>error_code_</name>
      <anchorfile>structplanning__interface_1_1MotionPlanDetailedResponse.html</anchorfile>
      <anchor>aaf987b29fd7223bb19269ae62970c596</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>processing_time_</name>
      <anchorfile>structplanning__interface_1_1MotionPlanDetailedResponse.html</anchorfile>
      <anchor>a81dc1b63e35cb87a87e5ba2f9d3bffcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; robot_trajectory::RobotTrajectoryPtr &gt;</type>
      <name>trajectory_</name>
      <anchorfile>structplanning__interface_1_1MotionPlanDetailedResponse.html</anchorfile>
      <anchor>a7d750f1249f713717fe9a101f9f6fdd6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>planning_interface::MotionPlanResponse</name>
    <filename>structplanning__interface_1_1MotionPlanResponse.html</filename>
    <member kind="function">
      <type>void</type>
      <name>getMessage</name>
      <anchorfile>structplanning__interface_1_1MotionPlanResponse.html</anchorfile>
      <anchor>af1c9547180a700042342c8e278180f5c</anchor>
      <arglist>(moveit_msgs::MotionPlanResponse &amp;msg) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MotionPlanResponse</name>
      <anchorfile>structplanning__interface_1_1MotionPlanResponse.html</anchorfile>
      <anchor>af662fc8948c37f821ee8b2d212451811</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>moveit_msgs::MoveItErrorCodes</type>
      <name>error_code_</name>
      <anchorfile>structplanning__interface_1_1MotionPlanResponse.html</anchorfile>
      <anchor>a484745b70508b414757947b82a18aaa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>planning_time_</name>
      <anchorfile>structplanning__interface_1_1MotionPlanResponse.html</anchorfile>
      <anchor>a650d90c6d03969c1ff6410d6dfd69968</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>robot_trajectory::RobotTrajectoryPtr</type>
      <name>trajectory_</name>
      <anchorfile>structplanning__interface_1_1MotionPlanResponse.html</anchorfile>
      <anchor>aba269b9eb8f4d12cdc4fc62728cea619</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit_controller_manager::MoveItControllerHandle</name>
    <filename>classmoveit__controller__manager_1_1MoveItControllerHandle.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>cancelExecution</name>
      <anchorfile>classmoveit__controller__manager_1_1MoveItControllerHandle.html</anchorfile>
      <anchor>a9dc84b79d79cb87a155e694e1d391bcf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ExecutionStatus</type>
      <name>getLastExecutionStatus</name>
      <anchorfile>classmoveit__controller__manager_1_1MoveItControllerHandle.html</anchorfile>
      <anchor>a026cb044e58469556dc815fcd3fc7ce8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classmoveit__controller__manager_1_1MoveItControllerHandle.html</anchorfile>
      <anchor>a39d1d5aeb84e56da311d8d79b7babe7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MoveItControllerHandle</name>
      <anchorfile>classmoveit__controller__manager_1_1MoveItControllerHandle.html</anchorfile>
      <anchor>ae373a0d2bae0c31377a2d8b29628d18e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>sendTrajectory</name>
      <anchorfile>classmoveit__controller__manager_1_1MoveItControllerHandle.html</anchorfile>
      <anchor>abaaa439f6a545bd086622b06e2740091</anchor>
      <arglist>(const moveit_msgs::RobotTrajectory &amp;trajectory)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>waitForExecution</name>
      <anchorfile>classmoveit__controller__manager_1_1MoveItControllerHandle.html</anchorfile>
      <anchor>a98e5179962ff539746b2181eb1dee555</anchor>
      <arglist>(const ros::Duration &amp;timeout=ros::Duration(0))=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MoveItControllerHandle</name>
      <anchorfile>classmoveit__controller__manager_1_1MoveItControllerHandle.html</anchorfile>
      <anchor>a6abfaeedd8222814e428bb813446a76e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classmoveit__controller__manager_1_1MoveItControllerHandle.html</anchorfile>
      <anchor>a999bb5f2e886b813e71ba0cb873d926d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit_controller_manager::MoveItControllerManager</name>
    <filename>classmoveit__controller__manager_1_1MoveItControllerManager.html</filename>
    <class kind="struct">moveit_controller_manager::MoveItControllerManager::ControllerState</class>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getActiveControllers</name>
      <anchorfile>classmoveit__controller__manager_1_1MoveItControllerManager.html</anchorfile>
      <anchor>a0552af3c5fbccbb402882472bc28cc19</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MoveItControllerHandlePtr</type>
      <name>getControllerHandle</name>
      <anchorfile>classmoveit__controller__manager_1_1MoveItControllerManager.html</anchorfile>
      <anchor>a69b5304cc24a1f06938061c8ed2e9bec</anchor>
      <arglist>(const std::string &amp;name)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getControllerJoints</name>
      <anchorfile>classmoveit__controller__manager_1_1MoveItControllerManager.html</anchorfile>
      <anchor>af839f3623557bda10e57f4fb8f18b67c</anchor>
      <arglist>(const std::string &amp;name, std::vector&lt; std::string &gt; &amp;joints)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getControllersList</name>
      <anchorfile>classmoveit__controller__manager_1_1MoveItControllerManager.html</anchorfile>
      <anchor>a4875f8a6aaea5445ed521595dce8f67d</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ControllerState</type>
      <name>getControllerState</name>
      <anchorfile>classmoveit__controller__manager_1_1MoveItControllerManager.html</anchorfile>
      <anchor>a82a519ae13cdcf4db79e3460fa31456e</anchor>
      <arglist>(const std::string &amp;name)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MoveItControllerManager</name>
      <anchorfile>classmoveit__controller__manager_1_1MoveItControllerManager.html</anchorfile>
      <anchor>ab217085309a95bc44ea9c1b89e8dd5e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>switchControllers</name>
      <anchorfile>classmoveit__controller__manager_1_1MoveItControllerManager.html</anchorfile>
      <anchor>ae42e4f2824c9707cc52ab61853a9a85e</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;activate, const std::vector&lt; std::string &gt; &amp;deactivate)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MoveItControllerManager</name>
      <anchorfile>classmoveit__controller__manager_1_1MoveItControllerManager.html</anchorfile>
      <anchor>aa273cdf29bd9a2b034ffce591ab57e17</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit_sensor_manager::MoveItSensorManager</name>
    <filename>classmoveit__sensor__manager_1_1MoveItSensorManager.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual SensorInfo</type>
      <name>getSensorInfo</name>
      <anchorfile>classmoveit__sensor__manager_1_1MoveItSensorManager.html</anchorfile>
      <anchor>af40c320d5d39ce012431b7e364f14307</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getSensorsList</name>
      <anchorfile>classmoveit__sensor__manager_1_1MoveItSensorManager.html</anchorfile>
      <anchor>a8bd519eadbc86d3ac9be0f361b4d8a0a</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasSensors</name>
      <anchorfile>classmoveit__sensor__manager_1_1MoveItSensorManager.html</anchorfile>
      <anchor>a4416045b73ebe0ccd8188d789f3f245c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MoveItSensorManager</name>
      <anchorfile>classmoveit__sensor__manager_1_1MoveItSensorManager.html</anchorfile>
      <anchor>a478549c8c87064849a8d59662014949a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>pointSensorTo</name>
      <anchorfile>classmoveit__sensor__manager_1_1MoveItSensorManager.html</anchorfile>
      <anchor>a46de4ea040392f7416e16fefede8f450</anchor>
      <arglist>(const std::string &amp;name, const geometry_msgs::PointStamped &amp;target, moveit_msgs::RobotTrajectory &amp;sensor_trajectory)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MoveItSensorManager</name>
      <anchorfile>classmoveit__sensor__manager_1_1MoveItSensorManager.html</anchorfile>
      <anchor>a8a497a84de06e055f956d1cc4c642e99</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>collision_detection::World::Object</name>
    <filename>structcollision__detection_1_1World_1_1Object.html</filename>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchorfile>structcollision__detection_1_1World_1_1Object.html</anchorfile>
      <anchor>a9b016698d8daf614235d54fc06b52a72</anchor>
      <arglist>(const std::string &amp;id)</arglist>
    </member>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW std::string</type>
      <name>id_</name>
      <anchorfile>structcollision__detection_1_1World_1_1Object.html</anchorfile>
      <anchor>a97814296178b7dce41ffd0c6cbc644b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EigenSTL::vector_Isometry3d</type>
      <name>shape_poses_</name>
      <anchorfile>structcollision__detection_1_1World_1_1Object.html</anchorfile>
      <anchor>a1ee0807d07eacee16e5b9a786ba2e5a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; shapes::ShapeConstPtr &gt;</type>
      <name>shapes_</name>
      <anchorfile>structcollision__detection_1_1World_1_1Object.html</anchorfile>
      <anchor>aea8563e5d94d52663a8fb82d0680d6c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>collision_detection::World::Observer</name>
    <filename>classcollision__detection_1_1World_1_1Observer.html</filename>
    <member kind="function">
      <type></type>
      <name>Observer</name>
      <anchorfile>classcollision__detection_1_1World_1_1Observer.html</anchorfile>
      <anchor>a929e26d0213367201ffd10613b0932dd</anchor>
      <arglist>(const ObserverCallbackFn &amp;callback)</arglist>
    </member>
    <member kind="variable">
      <type>ObserverCallbackFn</type>
      <name>callback_</name>
      <anchorfile>classcollision__detection_1_1World_1_1Observer.html</anchorfile>
      <anchor>aca42116b6d32b1277ea4b09c61d923f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>collision_detection::World::ObserverHandle</name>
    <filename>classcollision__detection_1_1World_1_1ObserverHandle.html</filename>
    <member kind="function">
      <type></type>
      <name>ObserverHandle</name>
      <anchorfile>classcollision__detection_1_1World_1_1ObserverHandle.html</anchorfile>
      <anchor>a74908eee15a1fa286015b21576e846e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ObserverHandle</name>
      <anchorfile>classcollision__detection_1_1World_1_1ObserverHandle.html</anchorfile>
      <anchor>a3aae995d063b155d5ae42cacb640db8b</anchor>
      <arglist>(const Observer *o)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Observer *</type>
      <name>observer_</name>
      <anchorfile>classcollision__detection_1_1World_1_1ObserverHandle.html</anchorfile>
      <anchor>af0533b0e9261ccc1acb61fa2f792a884</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classcollision__detection_1_1World_1_1ObserverHandle.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OneRobot</name>
    <filename>classOneRobot.html</filename>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetUp</name>
      <anchorfile>classOneRobot.html</anchorfile>
      <anchor>abbb62430f4fc8a53041a3cc9854de7b3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>TearDown</name>
      <anchorfile>classOneRobot.html</anchorfile>
      <anchor>a01ba16bfad6905afb557bb99462ec513</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>moveit::core::RobotModelConstPtr</type>
      <name>robot_model</name>
      <anchorfile>classOneRobot.html</anchorfile>
      <anchor>a53c9c2966dac999810a14123d6e03fc7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>constraint_samplers::OrderSamplers</name>
    <filename>structconstraint__samplers_1_1OrderSamplers.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structconstraint__samplers_1_1OrderSamplers.html</anchorfile>
      <anchor>accd2cb8e9b10bbc1ec78932834a18fce</anchor>
      <arglist>(const ConstraintSamplerPtr &amp;a, const ConstraintSamplerPtr &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>kinematic_constraints::OrientationConstraint</name>
    <filename>classkinematic__constraints_1_1OrientationConstraint.html</filename>
    <base>kinematic_constraints::KinematicConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>a9c83da6e553be99f835ba5e9d93ab198</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>configure</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>a1af057b4e27299e91d350135a4d20b94</anchor>
      <arglist>(const moveit_msgs::OrientationConstraint &amp;oc, const robot_state::Transforms &amp;tf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstraintEvaluationResult</type>
      <name>decide</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>a65c3ceae66686b08f0aee76748d85ced</anchor>
      <arglist>(const robot_state::RobotState &amp;state, bool verbose=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>enabled</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>aab822015568e1dec1aad6583d76f1e50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equal</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>a430437b9693266310ad0feb6606ecc5b</anchor>
      <arglist>(const KinematicConstraint &amp;other, double margin) const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix3d &amp;</type>
      <name>getDesiredRotationMatrix</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>a3eb0ec023af6f5d5573d925214159643</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const robot_model::LinkModel *</type>
      <name>getLinkModel</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>a239c8cdaa079c9cb48529f18eba3d46b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getReferenceFrame</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>ab58c0f5044394b5265d2a2564e1a0be0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getXAxisTolerance</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>ae7fd530e7312bba6d795832dccaf1c95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getYAxisTolerance</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>ac7a40c0c8297dcc4cdce68367e9a497f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getZAxisTolerance</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>a855d1b619bfe9b523b5d3578d81640d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mobileReferenceFrame</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>a9d4ecf66bbfc83fcf93cde8343e95b88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientationConstraint</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>a34ea0fcf1d902f1699d014bacb398363</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>a041053e818970f15092bdae49822ddfb</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>absolute_x_axis_tolerance_</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>ad1dedfb7a16dd41844c4dd01a7ae91c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>absolute_y_axis_tolerance_</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>a641712ae042eca1fb24e80a0071a86bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>absolute_z_axis_tolerance_</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>aa06b51d160ebcf08509538edf224d1c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>desired_rotation_frame_id_</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>a74adde3245284cf06041b5d21bb49d7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix3d</type>
      <name>desired_rotation_matrix_</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>ac5c4e0b7f38fd7bd0adc0176b1e87f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix3d</type>
      <name>desired_rotation_matrix_inv_</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>aa53825dae2e5593ea3146def16345fff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const robot_model::LinkModel *</type>
      <name>link_model_</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>a2e5c677651c2396b719266b5d8cbb701</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mobile_frame_</name>
      <anchorfile>classkinematic__constraints_1_1OrientationConstraint.html</anchorfile>
      <anchor>a084b134c9e23337bf6f27f833f7df1d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>moveit::tools::Profiler::PerThread</name>
    <filename>structmoveit_1_1tools_1_1Profiler_1_1PerThread.html</filename>
    <member kind="variable">
      <type>std::map&lt; std::string, AvgInfo &gt;</type>
      <name>avg</name>
      <anchorfile>structmoveit_1_1tools_1_1Profiler_1_1PerThread.html</anchorfile>
      <anchor>a40545cc51596b678dba12e7cb79af1a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, unsigned long int &gt;</type>
      <name>events</name>
      <anchorfile>structmoveit_1_1tools_1_1Profiler_1_1PerThread.html</anchorfile>
      <anchor>a0ca247fdde4971b917597ac26187a14b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, TimeInfo &gt;</type>
      <name>time</name>
      <anchorfile>structmoveit_1_1tools_1_1Profiler_1_1PerThread.html</anchorfile>
      <anchor>abc1b82f5b9d80e016a3812448d95e296</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit::core::PlanarJointModel</name>
    <filename>classmoveit_1_1core_1_1PlanarJointModel.html</filename>
    <base>moveit::core::JointModel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeTransform</name>
      <anchorfile>classmoveit_1_1core_1_1PlanarJointModel.html</anchorfile>
      <anchor>ae62107a4a676278e0be770d1d56c3fa4</anchor>
      <arglist>(const double *joint_values, Eigen::Isometry3d &amp;transf) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1PlanarJointModel.html</anchorfile>
      <anchor>ab492618a1e8ca28431ba8503a20a1112</anchor>
      <arglist>(const Eigen::Isometry3d &amp;transf, double *joint_values) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classmoveit_1_1core_1_1PlanarJointModel.html</anchorfile>
      <anchor>aff9c3dfe4e1918bec2bbc3d12c791803</anchor>
      <arglist>(const double *values1, const double *values2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>enforcePositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1PlanarJointModel.html</anchorfile>
      <anchor>a183f04e8a77c9e1b2f6621ba43ba4fd6</anchor>
      <arglist>(double *values, const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAngularDistanceWeight</name>
      <anchorfile>classmoveit_1_1core_1_1PlanarJointModel.html</anchorfile>
      <anchor>a7fad0acc51d832a029c99394094783ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classmoveit_1_1core_1_1PlanarJointModel.html</anchorfile>
      <anchor>ad9e13260d0bfd0d985ac587b15801b3d</anchor>
      <arglist>(const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getStateSpaceDimension</name>
      <anchorfile>classmoveit_1_1core_1_1PlanarJointModel.html</anchorfile>
      <anchor>a8ed5c9d5035e7889ef445720f90e7d92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVariableDefaultPositions</name>
      <anchorfile>classmoveit_1_1core_1_1PlanarJointModel.html</anchorfile>
      <anchor>a4258c9e1df7cee978f2828f312ec2a5b</anchor>
      <arglist>(double *values, const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVariableRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1PlanarJointModel.html</anchorfile>
      <anchor>a4c5c735c05ed0f1a0e2ccb9534d4d3e9</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVariableRandomPositionsNearBy</name>
      <anchorfile>classmoveit_1_1core_1_1PlanarJointModel.html</anchorfile>
      <anchor>ac411cd97f7611153e994fec69be168b2</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const Bounds &amp;other_bounds, const double *near, const double distance) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classmoveit_1_1core_1_1PlanarJointModel.html</anchorfile>
      <anchor>a5ec4439ec73280f6b01f73ec55b57a7e</anchor>
      <arglist>(const double *from, const double *to, const double t, double *state) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>normalizeRotation</name>
      <anchorfile>classmoveit_1_1core_1_1PlanarJointModel.html</anchorfile>
      <anchor>ae958c67d1a9f66d2b423a608dabe4168</anchor>
      <arglist>(double *values) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlanarJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1PlanarJointModel.html</anchorfile>
      <anchor>a3c5ea7b3ddec05cb0bed05fff3bbd348</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>satisfiesPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1PlanarJointModel.html</anchorfile>
      <anchor>a8e691dc7793964ce0046869dd521873c</anchor>
      <arglist>(const double *values, const Bounds &amp;other_bounds, double margin) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularDistanceWeight</name>
      <anchorfile>classmoveit_1_1core_1_1PlanarJointModel.html</anchorfile>
      <anchor>a9332f1c43f519669e8b20e64e40088fe</anchor>
      <arglist>(double weight)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>angular_distance_weight_</name>
      <anchorfile>classmoveit_1_1core_1_1PlanarJointModel.html</anchorfile>
      <anchor>afc1ba90750959d2641d835c25defa24a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>planning_interface::PlannerConfigurationSettings</name>
    <filename>structplanning__interface_1_1PlannerConfigurationSettings.html</filename>
    <member kind="variable">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>config</name>
      <anchorfile>structplanning__interface_1_1PlannerConfigurationSettings.html</anchorfile>
      <anchor>a7092285a242bf58f88437fd03f9efc75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>group</name>
      <anchorfile>structplanning__interface_1_1PlannerConfigurationSettings.html</anchorfile>
      <anchor>a9cbdc5787cfd0b279d5669f4f53dcb31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structplanning__interface_1_1PlannerConfigurationSettings.html</anchorfile>
      <anchor>adb167e5a65186982ce9b542e62d84560</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>planning_interface::PlannerManager</name>
    <filename>classplanning__interface_1_1PlannerManager.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>canServiceRequest</name>
      <anchorfile>classplanning__interface_1_1PlannerManager.html</anchorfile>
      <anchor>a0820d5d3922f3cd0d5d3dd86185afb16</anchor>
      <arglist>(const MotionPlanRequest &amp;req) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getDescription</name>
      <anchorfile>classplanning__interface_1_1PlannerManager.html</anchorfile>
      <anchor>a94dd55d37ba70bef0e93524d40ff158f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PlannerConfigurationMap &amp;</type>
      <name>getPlannerConfigurations</name>
      <anchorfile>classplanning__interface_1_1PlannerManager.html</anchorfile>
      <anchor>ae2731bd9b2ae0d9b767bc3ec02ed8a42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlanningAlgorithms</name>
      <anchorfile>classplanning__interface_1_1PlannerManager.html</anchorfile>
      <anchor>a6847e2cbb0e60c16d8e918f633728d7f</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;algs) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PlanningContextPtr</type>
      <name>getPlanningContext</name>
      <anchorfile>classplanning__interface_1_1PlannerManager.html</anchorfile>
      <anchor>ae2b9e1bba8400baee49d031b4adf228c</anchor>
      <arglist>(const planning_scene::PlanningSceneConstPtr &amp;planning_scene, const MotionPlanRequest &amp;req, moveit_msgs::MoveItErrorCodes &amp;error_code) const =0</arglist>
    </member>
    <member kind="function">
      <type>PlanningContextPtr</type>
      <name>getPlanningContext</name>
      <anchorfile>classplanning__interface_1_1PlannerManager.html</anchorfile>
      <anchor>a6b7c7d47f70851669145c6e03baca83f</anchor>
      <arglist>(const planning_scene::PlanningSceneConstPtr &amp;planning_scene, const MotionPlanRequest &amp;req) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initialize</name>
      <anchorfile>classplanning__interface_1_1PlannerManager.html</anchorfile>
      <anchor>aa6ea0155324aa6140f412fd15593bc23</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;model, const std::string &amp;ns)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlannerManager</name>
      <anchorfile>classplanning__interface_1_1PlannerManager.html</anchorfile>
      <anchor>acee62db3ad174d3a7ff775f11b495558</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPlannerConfigurations</name>
      <anchorfile>classplanning__interface_1_1PlannerManager.html</anchorfile>
      <anchor>a5113ae0f3db5bc86805a13b6aeed605e</anchor>
      <arglist>(const PlannerConfigurationMap &amp;pcs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>terminate</name>
      <anchorfile>classplanning__interface_1_1PlannerManager.html</anchorfile>
      <anchor>add7f143e284717e58ea0fbd35bddc0f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlannerManager</name>
      <anchorfile>classplanning__interface_1_1PlannerManager.html</anchorfile>
      <anchor>ad47c3857dbccc4a10bbc62d7d5c7955a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PlannerConfigurationMap</type>
      <name>config_settings_</name>
      <anchorfile>classplanning__interface_1_1PlannerManager.html</anchorfile>
      <anchor>ad028a587c584d1c8378ab8672ff3006a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>planning_interface::PlanningContext</name>
    <filename>classplanning__interface_1_1PlanningContext.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classplanning__interface_1_1PlanningContext.html</anchorfile>
      <anchor>a92cfedf0e29ce7596c9bff24cee04b0f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGroupName</name>
      <anchorfile>classplanning__interface_1_1PlanningContext.html</anchorfile>
      <anchor>a26fcbf48d41882ad7a140c26d5ec0802</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MotionPlanRequest &amp;</type>
      <name>getMotionPlanRequest</name>
      <anchorfile>classplanning__interface_1_1PlanningContext.html</anchorfile>
      <anchor>a921310632564d17e94071cf2915c2526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classplanning__interface_1_1PlanningContext.html</anchorfile>
      <anchor>affffef57f6383590843cbcd9ece29a08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const planning_scene::PlanningSceneConstPtr &amp;</type>
      <name>getPlanningScene</name>
      <anchorfile>classplanning__interface_1_1PlanningContext.html</anchorfile>
      <anchor>a177f3e5824d3d23bb6bac53d9a8ae50f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlanningContext</name>
      <anchorfile>classplanning__interface_1_1PlanningContext.html</anchorfile>
      <anchor>af59cb55faa8277e37ed8968ffa7f080a</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMotionPlanRequest</name>
      <anchorfile>classplanning__interface_1_1PlanningContext.html</anchorfile>
      <anchor>ae88e3282ba23b70950e342f414fcf046</anchor>
      <arglist>(const MotionPlanRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlanningScene</name>
      <anchorfile>classplanning__interface_1_1PlanningContext.html</anchorfile>
      <anchor>a112440fb0e22251da0e36240dedfbfc8</anchor>
      <arglist>(const planning_scene::PlanningSceneConstPtr &amp;planning_scene)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>solve</name>
      <anchorfile>classplanning__interface_1_1PlanningContext.html</anchorfile>
      <anchor>af3d95dd741609c58847bd312b8b033e0</anchor>
      <arglist>(MotionPlanResponse &amp;res)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>solve</name>
      <anchorfile>classplanning__interface_1_1PlanningContext.html</anchorfile>
      <anchor>a7590fdf69a8cf0801799e802f9ea4d08</anchor>
      <arglist>(MotionPlanDetailedResponse &amp;res)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>terminate</name>
      <anchorfile>classplanning__interface_1_1PlanningContext.html</anchorfile>
      <anchor>a79272b058a0eeb78e64179cd044d779d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlanningContext</name>
      <anchorfile>classplanning__interface_1_1PlanningContext.html</anchorfile>
      <anchor>aaad625483db0c36934843403c9eb09d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>group_</name>
      <anchorfile>classplanning__interface_1_1PlanningContext.html</anchorfile>
      <anchor>a6ff16537c7acb5fe992958520f8f81de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classplanning__interface_1_1PlanningContext.html</anchorfile>
      <anchor>a2bcbcfdfa9dc44dc7169719d255777a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>planning_scene::PlanningSceneConstPtr</type>
      <name>planning_scene_</name>
      <anchorfile>classplanning__interface_1_1PlanningContext.html</anchorfile>
      <anchor>a1189f616c8d717463cc4c2c803ecce92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MotionPlanRequest</type>
      <name>request_</name>
      <anchorfile>classplanning__interface_1_1PlanningContext.html</anchorfile>
      <anchor>a45b8a13ce96325aa2566ca23bb205fe7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>planning_request_adapter::PlanningRequestAdapter</name>
    <filename>classplanning__request__adapter_1_1PlanningRequestAdapter.html</filename>
    <member kind="typedef">
      <type>boost::function&lt; bool(const planning_scene::PlanningSceneConstPtr &amp;planning_scene, const planning_interface::MotionPlanRequest &amp;req, planning_interface::MotionPlanResponse &amp;res)&gt;</type>
      <name>PlannerFn</name>
      <anchorfile>classplanning__request__adapter_1_1PlanningRequestAdapter.html</anchorfile>
      <anchor>acb647f4dc5550d7f72a94100e324dc76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adaptAndPlan</name>
      <anchorfile>classplanning__request__adapter_1_1PlanningRequestAdapter.html</anchorfile>
      <anchor>acbc287134ce47e224bfe25d9cbb02d89</anchor>
      <arglist>(const planning_interface::PlannerManagerPtr &amp;planner, const planning_scene::PlanningSceneConstPtr &amp;planning_scene, const planning_interface::MotionPlanRequest &amp;req, planning_interface::MotionPlanResponse &amp;res) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adaptAndPlan</name>
      <anchorfile>classplanning__request__adapter_1_1PlanningRequestAdapter.html</anchorfile>
      <anchor>a2e40fe69f24b6b29b2f5dc3e33217719</anchor>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>adaptAndPlan</name>
      <anchorfile>classplanning__request__adapter_1_1PlanningRequestAdapter.html</anchorfile>
      <anchor>a020800100612fb52835962535be95fdc</anchor>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getDescription</name>
      <anchorfile>classplanning__request__adapter_1_1PlanningRequestAdapter.html</anchorfile>
      <anchor>a74bf49dd3be5d3068093007b699296ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlanningRequestAdapter</name>
      <anchorfile>classplanning__request__adapter_1_1PlanningRequestAdapter.html</anchorfile>
      <anchor>a10c5289c657300cbc4ad495725a4c422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlanningRequestAdapter</name>
      <anchorfile>classplanning__request__adapter_1_1PlanningRequestAdapter.html</anchorfile>
      <anchor>ab5f66754a6bf91b5d0f07748013fa219</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>planning_request_adapter::PlanningRequestAdapterChain</name>
    <filename>classplanning__request__adapter_1_1PlanningRequestAdapterChain.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>adaptAndPlan</name>
      <anchorfile>classplanning__request__adapter_1_1PlanningRequestAdapterChain.html</anchorfile>
      <anchor>af81315994d61c9e47ca5922c2339f9c0</anchor>
      <arglist>(const planning_interface::PlannerManagerPtr &amp;planner, const planning_scene::PlanningSceneConstPtr &amp;planning_scene, const planning_interface::MotionPlanRequest &amp;req, planning_interface::MotionPlanResponse &amp;res) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adaptAndPlan</name>
      <anchorfile>classplanning__request__adapter_1_1PlanningRequestAdapterChain.html</anchorfile>
      <anchor>a7254359dec79bac7ce5b8c7caa638b84</anchor>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAdapter</name>
      <anchorfile>classplanning__request__adapter_1_1PlanningRequestAdapterChain.html</anchorfile>
      <anchor>abe0d3f2c8009df0743f4ece21205fc17</anchor>
      <arglist>(const PlanningRequestAdapterConstPtr &amp;adapter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlanningRequestAdapterChain</name>
      <anchorfile>classplanning__request__adapter_1_1PlanningRequestAdapterChain.html</anchorfile>
      <anchor>a0d6dd5f5953a781c92b3d942d9897b45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; PlanningRequestAdapterConstPtr &gt;</type>
      <name>adapters_</name>
      <anchorfile>classplanning__request__adapter_1_1PlanningRequestAdapterChain.html</anchorfile>
      <anchor>a325c4e9e6af929fdc15e7ca3b894ba62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>planning_scene::PlanningScene</name>
    <filename>classplanning__scene_1_1PlanningScene.html</filename>
    <class kind="struct">planning_scene::PlanningScene::CollisionDetector</class>
    <member kind="function">
      <type>void</type>
      <name>clearDiffs</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a86bafea7f524e4974764b001778268dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decoupleParent</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a9c1ced2bcec5848f91244342bb7dd571</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PlanningScenePtr</type>
      <name>diff</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ac388c9edebd17b90ff66e2930120c184</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PlanningScenePtr</type>
      <name>diff</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>aa9e96944e6ea1cc97c3b2d1adb8569a4</anchor>
      <arglist>(const moveit_msgs::PlanningScene &amp;msg) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAttachedCollisionObjectMsg</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a053e1780df7c996226d010c3926d95bc</anchor>
      <arglist>(moveit_msgs::AttachedCollisionObject &amp;attached_collision_obj, const std::string &amp;ns) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAttachedCollisionObjectMsgs</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a71619858bca995b359540d9eab02a87b</anchor>
      <arglist>(std::vector&lt; moveit_msgs::AttachedCollisionObject &gt; &amp;attached_collision_objs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getCollisionObjectMsg</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a41b6b8153034cd99990e0646727aec42</anchor>
      <arglist>(moveit_msgs::CollisionObject &amp;collision_obj, const std::string &amp;ns) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollisionObjectMsgs</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ad722d5b0d8e0111c4782ac9df7c6c086</anchor>
      <arglist>(std::vector&lt; moveit_msgs::CollisionObject &gt; &amp;collision_objs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCostSources</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a4f91092be95776777831d74bab1267ac</anchor>
      <arglist>(const robot_trajectory::RobotTrajectory &amp;trajectory, std::size_t max_costs, std::set&lt; collision_detection::CostSource &gt; &amp;costs, double overlap_fraction=0.9) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCostSources</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ad40b5909eeb621f93425580518c992b5</anchor>
      <arglist>(const robot_trajectory::RobotTrajectory &amp;trajectory, std::size_t max_costs, const std::string &amp;group_name, std::set&lt; collision_detection::CostSource &gt; &amp;costs, double overlap_fraction=0.9) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCostSources</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a8d67d2dd0942220562448db195aeb616</anchor>
      <arglist>(const robot_state::RobotState &amp;state, std::size_t max_costs, std::set&lt; collision_detection::CostSource &gt; &amp;costs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCostSources</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a028b64807fa8a905ddd567558913c43e</anchor>
      <arglist>(const robot_state::RobotState &amp;state, std::size_t max_costs, const std::string &amp;group_name, std::set&lt; collision_detection::CostSource &gt; &amp;costs) const </arglist>
    </member>
    <member kind="function">
      <type>const robot_state::RobotState &amp;</type>
      <name>getCurrentState</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a4abdad1f741d417f4f0a51c790dc4b21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>robot_state::RobotState &amp;</type>
      <name>getCurrentStateNonConst</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a008663029657da1a8461a9768e107561</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>robot_state::RobotStatePtr</type>
      <name>getCurrentStateUpdated</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ab2b07b21f342c6092757ef5ed1c6f8e6</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;update) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getKnownObjectColors</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>abf6b116be2c68cab9da3d53f3946788a</anchor>
      <arglist>(ObjectColorMap &amp;kc) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getKnownObjectTypes</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a33f34a78ba1048169e59f7c64f32a66a</anchor>
      <arglist>(ObjectTypeMap &amp;kc) const </arglist>
    </member>
    <member kind="function">
      <type>const MotionFeasibilityFn &amp;</type>
      <name>getMotionFeasibilityPredicate</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ada5f7031dfe116e2880beaac8572fcbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a5bebbc04372a88dd838597bdd430319b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std_msgs::ColorRGBA &amp;</type>
      <name>getObjectColor</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a085d458a04e994a862bdf2fbe69a2a64</anchor>
      <arglist>(const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getObjectColorMsgs</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ae423ea33a1684944aa47caf0a6b34c4b</anchor>
      <arglist>(std::vector&lt; moveit_msgs::ObjectColor &gt; &amp;object_colors) const </arglist>
    </member>
    <member kind="function">
      <type>const object_recognition_msgs::ObjectType &amp;</type>
      <name>getObjectType</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a1e8afd4a898214e5e6e37f2d8b830ba3</anchor>
      <arglist>(const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getOctomapMsg</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ac54eb3eee2ed8f504b87bc333f7d8468</anchor>
      <arglist>(octomap_msgs::OctomapWithPose &amp;octomap) const </arglist>
    </member>
    <member kind="function">
      <type>const PlanningSceneConstPtr &amp;</type>
      <name>getParent</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a48e497da44ba41335efc960b64800df7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlanningSceneDiffMsg</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a37552134e9d0c83da2106b1e2f53fea0</anchor>
      <arglist>(moveit_msgs::PlanningScene &amp;scene) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlanningSceneMsg</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a90a0d5360a2cad4e6cda053c9eab3f02</anchor>
      <arglist>(moveit_msgs::PlanningScene &amp;scene) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlanningSceneMsg</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a21b2247ab62239cd6c3d0ba633ce3c36</anchor>
      <arglist>(moveit_msgs::PlanningScene &amp;scene, const moveit_msgs::PlanningSceneComponents &amp;comp) const </arglist>
    </member>
    <member kind="function">
      <type>const robot_model::RobotModelConstPtr &amp;</type>
      <name>getRobotModel</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ad8e498bd7289d524ca8cfa6ad333f49c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StateFeasibilityFn &amp;</type>
      <name>getStateFeasibilityPredicate</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a9bea59cde4a80b09145e80fa872b82fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasObjectColor</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a2292faad10ec489a5f06f5f8e2d795a8</anchor>
      <arglist>(const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasObjectType</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>aac95e02f7050da94bf98e483c1dddd83</anchor>
      <arglist>(const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a9af87c91ec349dda9055c96eacb5033f</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;start_state, const moveit_msgs::RobotTrajectory &amp;trajectory, const std::string &amp;group=&quot;&quot;, bool verbose=false, std::vector&lt; std::size_t &gt; *invalid_index=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ab9b40a1744952a500da4118e24b6a5d0</anchor>
    </member>
    <member kind="function">
      <type>bool</type>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ad6d156746d3744ca37a4850aa277c2f3</anchor>
    </member>
    <member kind="function">
      <type>bool</type>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a46e46a23ef17632bcd95ea74bcf41c36</anchor>
    </member>
    <member kind="function">
      <type>bool</type>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a74c475ddc55b6ba77ab9af652c81a505</anchor>
    </member>
    <member kind="function">
      <type>bool</type>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a83e24e825fa9a146d63ab40ce911be47</anchor>
    </member>
    <member kind="function">
      <type>bool</type>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a29bd22f01895711f55807dd289ac48b1</anchor>
    </member>
    <member kind="function">
      <type>bool</type>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a61270301b05fac8287418a9b61e2f4eb</anchor>
      <arglist>(const robot_trajectory::RobotTrajectory &amp;trajectory, const std::string &amp;group=&quot;&quot;, bool verbose=false, std::vector&lt; std::size_t &gt; *invalid_index=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateConstrained</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a1c24489944835dffea2512768decfd3c</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;state, const moveit_msgs::Constraints &amp;constr, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateConstrained</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>afb1fb96ef46debca38dd123f216fd477</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const moveit_msgs::Constraints &amp;constr, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateConstrained</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a37064d52d8a6d18a5268574fc4cc69e2</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;state, const kinematic_constraints::KinematicConstraintSet &amp;constr, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateConstrained</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ade41b917e90a87ce3ecc1e4d3405fe83</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const kinematic_constraints::KinematicConstraintSet &amp;constr, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateFeasible</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a2ac5cd73d36632c10d79997b9caa3bba</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;state, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateFeasible</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a0df18708a18a03b69ec45a88638139b5</anchor>
      <arglist>(const robot_state::RobotState &amp;state, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateValid</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a37478403db644dbaa597d00cc81877d4</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;state, const std::string &amp;group=&quot;&quot;, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateValid</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a788f403a76aad5909d134ca7be831dbf</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const std::string &amp;group=&quot;&quot;, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateValid</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a3b6a994c78125d149680b587f51906a5</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;state, const moveit_msgs::Constraints &amp;constr, const std::string &amp;group=&quot;&quot;, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateValid</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a7398284ca60a7701f5072a8371278666</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const moveit_msgs::Constraints &amp;constr, const std::string &amp;group=&quot;&quot;, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateValid</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a906313a6a285127cfb9265035095f02d</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const kinematic_constraints::KinematicConstraintSet &amp;constr, const std::string &amp;group=&quot;&quot;, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadGeometryFromStream</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a82035a2556f936a857cf108add4a8e2d</anchor>
      <arglist>(std::istream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadGeometryFromStream</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>aa0310b2032f5ad24d658c5ff9653163a</anchor>
      <arglist>(std::istream &amp;in, const Eigen::Isometry3d &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlanningScene</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a5595d48893f6cd4c8d6bd4ac44ab2bdb</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;robot_model, collision_detection::WorldPtr world=collision_detection::WorldPtr(new collision_detection::World()))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlanningScene</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a36a8b76ab8405d811270200f03a85583</anchor>
      <arglist>(const urdf::ModelInterfaceSharedPtr &amp;urdf_model, const srdf::ModelConstSharedPtr &amp;srdf_model, collision_detection::WorldPtr world=collision_detection::WorldPtr(new collision_detection::World()))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printKnownObjects</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a57e64709205e45b13c90b4a153025a02</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processAttachedCollisionObjectMsg</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>af50bb83113f9d8fdceda75518ae51ee3</anchor>
      <arglist>(const moveit_msgs::AttachedCollisionObject &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processCollisionObjectMsg</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a6e808aa14fc02620115e0d6dc48ead8e</anchor>
      <arglist>(const moveit_msgs::CollisionObject &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processOctomapMsg</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a08b2d45a1353b9499484346d8f67023a</anchor>
      <arglist>(const octomap_msgs::OctomapWithPose &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processOctomapMsg</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>aace294dcc519e62304d58c1ca9afa2bd</anchor>
      <arglist>(const octomap_msgs::Octomap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processOctomapPtr</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ab1f85fd67f7dfbf7457e6f3c871d78de</anchor>
      <arglist>(const std::shared_ptr&lt; const octomap::OcTree &gt; &amp;octree, const Eigen::Isometry3d &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processPlanningSceneWorldMsg</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a2a8a1456d1aa588c896d104c102b2237</anchor>
      <arglist>(const moveit_msgs::PlanningSceneWorld &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushDiffs</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a8b45bb8fb3fecb10013000eeb728429d</anchor>
      <arglist>(const PlanningScenePtr &amp;scene)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllCollisionObjects</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ab67408c7f802d4c1ccb8e752cdf88df5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObjectColor</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>af25fb475284fa13842c6d0d0adeada78</anchor>
      <arglist>(const std::string &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObjectType</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>affd2a56defff437978f45848138b0a48</anchor>
      <arglist>(const std::string &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGeometryToStream</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a455ed0d21ede37a78cba69b0e2b96f23</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttachedBodyUpdateCallback</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a05c6e69da5de818935e4c919a11ad225</anchor>
      <arglist>(const robot_state::AttachedBodyCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCollisionObjectUpdateCallback</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>af4d4b22c13d9fc9f2ce94a0d7eb6b976</anchor>
      <arglist>(const collision_detection::World::ObserverCallbackFn &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentState</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a44521efbaabe91b2e3bd90c25e694b8c</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentState</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>abe5d5f332e7e217392e9188d19b1e5a2</anchor>
      <arglist>(const robot_state::RobotState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMotionFeasibilityPredicate</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a5e67aa8b256d1c2466444b32f2d44e4f</anchor>
      <arglist>(const MotionFeasibilityFn &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a12e0c529023f0a74b4718b78c17b43bc</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObjectColor</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>af7d73e38777a6f01827365883a6372e6</anchor>
      <arglist>(const std::string &amp;id, const std_msgs::ColorRGBA &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObjectType</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a8f74455b71c568225c129a20ea77d3c3</anchor>
      <arglist>(const std::string &amp;id, const object_recognition_msgs::ObjectType &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPlanningSceneDiffMsg</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ae4b004c4288d1311fef9aaf256d694b8</anchor>
      <arglist>(const moveit_msgs::PlanningScene &amp;scene)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPlanningSceneMsg</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a204ac40a670183a81e4e4509f10568c4</anchor>
      <arglist>(const moveit_msgs::PlanningScene &amp;scene)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateFeasibilityPredicate</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ae87ae61744b8bcfa6914c69b41170d07</anchor>
      <arglist>(const StateFeasibilityFn &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usePlanningSceneMsg</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a52b91fee4e2ab601a89f00824b785360</anchor>
      <arglist>(const moveit_msgs::PlanningScene &amp;scene)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PlanningScene</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a7ed9a6f5d6df518ba89a02c419573ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPlanningFrame</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a76955d9c20ffceef86151eb127565e9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const robot_state::Transforms &amp;</type>
      <name>getTransforms</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a41319fea3520b306a0ce194f5349562a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const robot_state::Transforms &amp;</type>
      <name>getTransforms</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a940dce785d3160c9c41e71c0d1789aa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>robot_state::Transforms &amp;</type>
      <name>getTransformsNonConst</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a243245a374d9d34eda67163c65e197fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getFrameTransform</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a4239584551cf1cfa096cdbbb04d2b38b</anchor>
      <arglist>(const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getFrameTransform</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a9c012948fb1348b66355479d4e5b1995</anchor>
      <arglist>(const std::string &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getFrameTransform</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a0e195d135e74bc0962c2e9bedcd9bd7f</anchor>
      <arglist>(robot_state::RobotState &amp;state, const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getFrameTransform</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>adc05ef0c260fa0b0fa7705e722467eae</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>knowsFrameTransform</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a25394e153b0733a98e56aa6778a07e2a</anchor>
      <arglist>(const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>knowsFrameTransform</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>aca931d9e8255e863c3f3bdd1437e0ee9</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCollisionDetector</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a48a7c7fbafbb29a87c20a98769045d9f</anchor>
      <arglist>(const collision_detection::CollisionDetectorAllocatorPtr &amp;allocator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActiveCollisionDetector</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ac2e8c853ad8af28a2632ae8c79f4bd83</anchor>
      <arglist>(const collision_detection::CollisionDetectorAllocatorPtr &amp;allocator, bool exclusive=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setActiveCollisionDetector</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a59d0255c2b99ab3655a247a3fa9437fc</anchor>
      <arglist>(const std::string &amp;collision_detector_name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getActiveCollisionDetectorName</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a55f5759548b06d528a06bf3589af2941</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollisionDetectorNames</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ac0d685767cb1da61aade1f1cbcb12c29</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names) const </arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::WorldConstPtr &amp;</type>
      <name>getWorld</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>aaa5d5d75d26a214250b99fc07eb2fd86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::WorldPtr &amp;</type>
      <name>getWorldNonConst</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>acaccdee7c4630cae3daff8abb8baaef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::CollisionWorldConstPtr &amp;</type>
      <name>getCollisionWorld</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ae95b0d184f6bb4cb8d0f23992d89d892</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::CollisionRobotConstPtr &amp;</type>
      <name>getCollisionRobot</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a46049a7debf5f45e16cdba7e39a58c7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::CollisionRobotConstPtr &amp;</type>
      <name>getCollisionRobotUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a1dcbb136d962567a500ca1dcf6c4aabc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::CollisionWorldConstPtr &amp;</type>
      <name>getCollisionWorld</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a9580c1ad0ec0572b6a5070a2c081cf0e</anchor>
      <arglist>(const std::string &amp;collision_detector_name) const </arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::CollisionRobotConstPtr &amp;</type>
      <name>getCollisionRobot</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>abeb699100aeccfd0018f75e4e5960f8a</anchor>
      <arglist>(const std::string &amp;collision_detector_name) const </arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::CollisionRobotConstPtr &amp;</type>
      <name>getCollisionRobotUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a45e5156e52b38b97a3a17036586d58cf</anchor>
      <arglist>(const std::string &amp;collision_detector_name) const </arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::CollisionRobotPtr &amp;</type>
      <name>getCollisionRobotNonConst</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a08135a94e663b42a0004afda5caf0744</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>propogateRobotPadding</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a51dd2649c2ae61c61251f5c52ef356fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::AllowedCollisionMatrix &amp;</type>
      <name>getAllowedCollisionMatrix</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a21ae71fc0810252f7d092d793b537d8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>collision_detection::AllowedCollisionMatrix &amp;</type>
      <name>getAllowedCollisionMatrixNonConst</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a1cb869a00855935aa81a20eda5ba3874</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateColliding</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>abd102b8b63f64ce9c31ce5cf4588a542</anchor>
      <arglist>(const std::string &amp;group=&quot;&quot;, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateColliding</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a4dbfbc6b47ad40d5874d62cc8b8db883</anchor>
      <arglist>(const std::string &amp;group=&quot;&quot;, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateColliding</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ac493fdc001877a42213a78429d27192a</anchor>
      <arglist>(robot_state::RobotState &amp;state, const std::string &amp;group=&quot;&quot;, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateColliding</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a23136f5d8f033eb40f6ea2e46092539a</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const std::string &amp;group=&quot;&quot;, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateColliding</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ae9078c7db0ad741acc83ace85c217d4f</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;state, const std::string &amp;group=&quot;&quot;, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a4ebcc755346e443319104e8b964f8faa</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a0c4b03f1a1e418c94ba7e3b3a1b43521</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a524922631dcc8a3486220b4d837bbbf9</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a5133adb7b44f5f9ffcdb0793e3ba85ac</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, const robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a47a5dad4e1887ba1a493bbadad79a17e</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a0ee7e6e96743e2b960a4bff0ea256df6</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, const robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollisionUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a548ecbe8c71328bcebb516eae50a7d20</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollisionUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a64ff47114c48ba0967df4077ed69c41a</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollisionUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ae63a4dc9e6e441d61e5162fd82f2dc42</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, const robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollisionUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a3f323552087659059547e48f3aef64da</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollisionUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>af515a959ad3bd4bac1b8d5d1aa636ef0</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollisionUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ac1cd1218ff9b7abc038a29da522c86ad</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, const robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>aea9edbc5c65137a736db5a86bd1fed08</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>aece58b2d85afaae38ea289439bff2974</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a99c1e6ec17557cbbf127339f3b9142d3</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>acd38b2dd08a1c61ccc993442aa8e5131</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, const robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>adcde383597056fdd74724570a63099df</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>aecae2dbfbdfb5cfa5bbe33e89cab2315</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, const robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingLinks</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ad0d87cd5782dac2bbcf84a259abea517</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;links)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingLinks</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a3745825e0de3449437905bd29fe85a70</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;links) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingLinks</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a5ea18d8c0190bbcba10346eb5202e374</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;links, robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingLinks</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a538a51805e3c9d3a41edd9689165970f</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;links, const robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingLinks</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ac13185b8d119ee407ca11e8bb4f688d0</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;links, robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingLinks</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a5da6fcc9226e09a883a17cd05f84594f</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;links, const robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingPairs</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>af4eb8439dd7d0397a780e7cdfcaf8a02</anchor>
      <arglist>(collision_detection::CollisionResult::ContactMap &amp;contacts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingPairs</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>af689a0e21b001cd937d50dd743eb0f51</anchor>
      <arglist>(collision_detection::CollisionResult::ContactMap &amp;contacts) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingPairs</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a73d7d0287bdbdb947eee772a1ec77d18</anchor>
      <arglist>(collision_detection::CollisionResult::ContactMap &amp;contacts, const robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingPairs</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a1861e58f7bf967796d32ed481f1010f0</anchor>
      <arglist>(collision_detection::CollisionResult::ContactMap &amp;contacts, robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingPairs</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a78f2af8b4385b436cb715286fff21815</anchor>
      <arglist>(collision_detection::CollisionResult::ContactMap &amp;contacts, robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingPairs</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a126e97dfb12e51046d68360ae63f7e0f</anchor>
      <arglist>(collision_detection::CollisionResult::ContactMap &amp;contacts, const robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ab032e61039f5869175a2c21e541fc63c</anchor>
      <arglist>(robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a42d033995e0157931afd1b7481c0afe6</anchor>
      <arglist>(const robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToCollisionUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a084aadfa9883fbc0af48c9d3924c4625</anchor>
      <arglist>(robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToCollisionUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a787850300cebca25ae17bef172e1baa1</anchor>
      <arglist>(const robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a68d42f96ff656bfa1e3b25f997f6c498</anchor>
      <arglist>(robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>afeefe48a32b1bfa41bb81fab61f72367</anchor>
      <arglist>(const robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToCollisionUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>abcd129cd5d6a657c1bfa93b2291c35dd</anchor>
      <arglist>(robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToCollisionUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a267694070a4537b25d35e6dc42db35ed</anchor>
      <arglist>(const robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PlanningScenePtr</type>
      <name>clone</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a2f90ac1da8d266085dea0c4766465f8f</anchor>
      <arglist>(const PlanningSceneConstPtr &amp;scene)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isEmpty</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a9455ab50e03671e68de980acd28fa8f9</anchor>
      <arglist>(const moveit_msgs::PlanningScene &amp;msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isEmpty</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a12110a2fcc31c24f5eec2a5a7baea7cb</anchor>
      <arglist>(const moveit_msgs::PlanningSceneWorld &amp;msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isEmpty</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ae2b84c24205f87506646b582cfc8f0a9</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;msg)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_SCENE_NAME</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>af4bad94974cd8d813fe5e370af163866</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>OCTOMAP_NS</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>af340f5d463d211e95da6c18b37dad9c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; std::string, CollisionDetectorPtr &gt;::const_iterator</type>
      <name>CollisionDetectorConstIterator</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ab70a36f3b68b6ef905fb1ca86b30d5ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; std::string, CollisionDetectorPtr &gt;::iterator</type>
      <name>CollisionDetectorIterator</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>aada7c611ff92bc2c4b9ea07634630b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>allocateCollisionDetectors</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a287d9d70dc43fd657a4ef3065be13f50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>allocateCollisionDetectors</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a060d9d8fa84b2ac11c02afff0d2cbb16</anchor>
      <arglist>(CollisionDetector &amp;detector)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>af2d526d4d2fbf75054743d74a5329d28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ac8b7f54842dab0b0b86ee8b4b5931d2e</anchor>
      <arglist>(CollisionDetector)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>PlanningScene</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ac9df1fa3e8fa712c9c3b36984f0ce8e8</anchor>
      <arglist>(const PlanningSceneConstPtr &amp;parent)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static robot_model::RobotModelPtr</type>
      <name>createRobotModel</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a9d2cf9ad4060b4dc02c3ad1e581ae659</anchor>
      <arglist>(const urdf::ModelInterfaceSharedPtr &amp;urdf_model, const srdf::ModelConstSharedPtr &amp;srdf_model)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>collision_detection::AllowedCollisionMatrixPtr</type>
      <name>acm_</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>aea2ecda7a0cff03181df5dd789e396bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CollisionDetectorPtr</type>
      <name>active_collision_</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a5269032bff4a1fd4050dbf0573ef8834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, CollisionDetectorPtr &gt;</type>
      <name>collision_</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a23d09d2804e5f00cafdb4eecb4a5d3b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>robot_state::AttachedBodyCallback</type>
      <name>current_state_attached_body_callback_</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a3ff455a5e61f749300a5fd50173003a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>collision_detection::World::ObserverCallbackFn</type>
      <name>current_world_object_update_callback_</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a060c2f0385d72f62c814c94b841104e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>collision_detection::World::ObserverHandle</type>
      <name>current_world_object_update_observer_handle_</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a449ba5e172b3779047e3cf66573e0b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>robot_state::TransformsPtr</type>
      <name>ftf_</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ad9a959c31e118b0c0dcf70c798c73ce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>robot_model::RobotModelConstPtr</type>
      <name>kmodel_</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ad7144aaead9cdf12573ab62788ae9e5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>robot_state::RobotStatePtr</type>
      <name>kstate_</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a1aa9bc474d3a6b88bb62d5546ca55ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MotionFeasibilityFn</type>
      <name>motion_feasibility_</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a851185375d617c4a9b6bb586278d9869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a9ad874776a2f80ca3e587795ef34b0d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; ObjectColorMap &gt;</type>
      <name>object_colors_</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>adbc7aa8370bce29605a318eba8a4a8ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; ObjectTypeMap &gt;</type>
      <name>object_types_</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a647cc1ece8de02ce7f91102a300eacac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PlanningSceneConstPtr</type>
      <name>parent_</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a0e1a2e5064f5591274d963d52fd47e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>StateFeasibilityFn</type>
      <name>state_feasibility_</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ac86d372ebf5438909a560637969868a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>collision_detection::WorldPtr</type>
      <name>world_</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a4fbcbf8ce7b37f7f0b8973cca058eb26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>collision_detection::WorldConstPtr</type>
      <name>world_const_</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ae9774ce487e77c3ac17e6045549c42d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>collision_detection::WorldDiffPtr</type>
      <name>world_diff_</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ae9f47219f441d3ea7d71dbf3d4a865c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>CollisionDetector</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>af9058ed1a3cee4d546ecf3010b33da1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPlanningFrame</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a76955d9c20ffceef86151eb127565e9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const robot_state::Transforms &amp;</type>
      <name>getTransforms</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a41319fea3520b306a0ce194f5349562a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const robot_state::Transforms &amp;</type>
      <name>getTransforms</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a940dce785d3160c9c41e71c0d1789aa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>robot_state::Transforms &amp;</type>
      <name>getTransformsNonConst</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a243245a374d9d34eda67163c65e197fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getFrameTransform</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a4239584551cf1cfa096cdbbb04d2b38b</anchor>
      <arglist>(const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getFrameTransform</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a9c012948fb1348b66355479d4e5b1995</anchor>
      <arglist>(const std::string &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getFrameTransform</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a0e195d135e74bc0962c2e9bedcd9bd7f</anchor>
      <arglist>(robot_state::RobotState &amp;state, const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getFrameTransform</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>adc05ef0c260fa0b0fa7705e722467eae</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>knowsFrameTransform</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a25394e153b0733a98e56aa6778a07e2a</anchor>
      <arglist>(const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>knowsFrameTransform</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>aca931d9e8255e863c3f3bdd1437e0ee9</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCollisionDetector</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a48a7c7fbafbb29a87c20a98769045d9f</anchor>
      <arglist>(const collision_detection::CollisionDetectorAllocatorPtr &amp;allocator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActiveCollisionDetector</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ac2e8c853ad8af28a2632ae8c79f4bd83</anchor>
      <arglist>(const collision_detection::CollisionDetectorAllocatorPtr &amp;allocator, bool exclusive=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setActiveCollisionDetector</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a59d0255c2b99ab3655a247a3fa9437fc</anchor>
      <arglist>(const std::string &amp;collision_detector_name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getActiveCollisionDetectorName</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a55f5759548b06d528a06bf3589af2941</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollisionDetectorNames</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ac0d685767cb1da61aade1f1cbcb12c29</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names) const </arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::WorldConstPtr &amp;</type>
      <name>getWorld</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>aaa5d5d75d26a214250b99fc07eb2fd86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::WorldPtr &amp;</type>
      <name>getWorldNonConst</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>acaccdee7c4630cae3daff8abb8baaef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::CollisionWorldConstPtr &amp;</type>
      <name>getCollisionWorld</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ae95b0d184f6bb4cb8d0f23992d89d892</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::CollisionRobotConstPtr &amp;</type>
      <name>getCollisionRobot</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a46049a7debf5f45e16cdba7e39a58c7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::CollisionRobotConstPtr &amp;</type>
      <name>getCollisionRobotUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a1dcbb136d962567a500ca1dcf6c4aabc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::CollisionWorldConstPtr &amp;</type>
      <name>getCollisionWorld</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a9580c1ad0ec0572b6a5070a2c081cf0e</anchor>
      <arglist>(const std::string &amp;collision_detector_name) const </arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::CollisionRobotConstPtr &amp;</type>
      <name>getCollisionRobot</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>abeb699100aeccfd0018f75e4e5960f8a</anchor>
      <arglist>(const std::string &amp;collision_detector_name) const </arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::CollisionRobotConstPtr &amp;</type>
      <name>getCollisionRobotUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a45e5156e52b38b97a3a17036586d58cf</anchor>
      <arglist>(const std::string &amp;collision_detector_name) const </arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::CollisionRobotPtr &amp;</type>
      <name>getCollisionRobotNonConst</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a08135a94e663b42a0004afda5caf0744</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>propogateRobotPadding</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a51dd2649c2ae61c61251f5c52ef356fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::AllowedCollisionMatrix &amp;</type>
      <name>getAllowedCollisionMatrix</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a21ae71fc0810252f7d092d793b537d8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>collision_detection::AllowedCollisionMatrix &amp;</type>
      <name>getAllowedCollisionMatrixNonConst</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a1cb869a00855935aa81a20eda5ba3874</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateColliding</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>abd102b8b63f64ce9c31ce5cf4588a542</anchor>
      <arglist>(const std::string &amp;group=&quot;&quot;, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateColliding</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a4dbfbc6b47ad40d5874d62cc8b8db883</anchor>
      <arglist>(const std::string &amp;group=&quot;&quot;, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateColliding</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ac493fdc001877a42213a78429d27192a</anchor>
      <arglist>(robot_state::RobotState &amp;state, const std::string &amp;group=&quot;&quot;, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateColliding</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a23136f5d8f033eb40f6ea2e46092539a</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const std::string &amp;group=&quot;&quot;, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateColliding</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ae9078c7db0ad741acc83ace85c217d4f</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;state, const std::string &amp;group=&quot;&quot;, bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a4ebcc755346e443319104e8b964f8faa</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a0c4b03f1a1e418c94ba7e3b3a1b43521</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a524922631dcc8a3486220b4d837bbbf9</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a5133adb7b44f5f9ffcdb0793e3ba85ac</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, const robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a47a5dad4e1887ba1a493bbadad79a17e</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a0ee7e6e96743e2b960a4bff0ea256df6</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, const robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollisionUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a548ecbe8c71328bcebb516eae50a7d20</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollisionUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a64ff47114c48ba0967df4077ed69c41a</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollisionUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ae63a4dc9e6e441d61e5162fd82f2dc42</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, const robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollisionUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a3f323552087659059547e48f3aef64da</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollisionUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>af515a959ad3bd4bac1b8d5d1aa636ef0</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCollisionUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ac1cd1218ff9b7abc038a29da522c86ad</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, const robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>aea9edbc5c65137a736db5a86bd1fed08</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>aece58b2d85afaae38ea289439bff2974</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a99c1e6ec17557cbbf127339f3b9142d3</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>acd38b2dd08a1c61ccc993442aa8e5131</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, const robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>adcde383597056fdd74724570a63099df</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkSelfCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>aecae2dbfbdfb5cfa5bbe33e89cab2315</anchor>
      <arglist>(const collision_detection::CollisionRequest &amp;req, collision_detection::CollisionResult &amp;res, const robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingLinks</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ad0d87cd5782dac2bbcf84a259abea517</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;links)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingLinks</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a3745825e0de3449437905bd29fe85a70</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;links) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingLinks</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a5ea18d8c0190bbcba10346eb5202e374</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;links, robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingLinks</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a538a51805e3c9d3a41edd9689165970f</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;links, const robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingLinks</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ac13185b8d119ee407ca11e8bb4f688d0</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;links, robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingLinks</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a5da6fcc9226e09a883a17cd05f84594f</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;links, const robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingPairs</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>af4eb8439dd7d0397a780e7cdfcaf8a02</anchor>
      <arglist>(collision_detection::CollisionResult::ContactMap &amp;contacts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingPairs</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>af689a0e21b001cd937d50dd743eb0f51</anchor>
      <arglist>(collision_detection::CollisionResult::ContactMap &amp;contacts) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingPairs</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a73d7d0287bdbdb947eee772a1ec77d18</anchor>
      <arglist>(collision_detection::CollisionResult::ContactMap &amp;contacts, const robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingPairs</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a1861e58f7bf967796d32ed481f1010f0</anchor>
      <arglist>(collision_detection::CollisionResult::ContactMap &amp;contacts, robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingPairs</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a78f2af8b4385b436cb715286fff21815</anchor>
      <arglist>(collision_detection::CollisionResult::ContactMap &amp;contacts, robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollidingPairs</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a126e97dfb12e51046d68360ae63f7e0f</anchor>
      <arglist>(collision_detection::CollisionResult::ContactMap &amp;contacts, const robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>ab032e61039f5869175a2c21e541fc63c</anchor>
      <arglist>(robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a42d033995e0157931afd1b7481c0afe6</anchor>
      <arglist>(const robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToCollisionUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a084aadfa9883fbc0af48c9d3924c4625</anchor>
      <arglist>(robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToCollisionUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a787850300cebca25ae17bef172e1baa1</anchor>
      <arglist>(const robot_state::RobotState &amp;kstate) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a68d42f96ff656bfa1e3b25f997f6c498</anchor>
      <arglist>(robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToCollision</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>afeefe48a32b1bfa41bb81fab61f72367</anchor>
      <arglist>(const robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToCollisionUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>abcd129cd5d6a657c1bfa93b2291c35dd</anchor>
      <arglist>(robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToCollisionUnpadded</name>
      <anchorfile>classplanning__scene_1_1PlanningScene.html</anchorfile>
      <anchor>a267694070a4537b25d35e6dc42db35ed</anchor>
      <arglist>(const robot_state::RobotState &amp;kstate, const collision_detection::AllowedCollisionMatrix &amp;acm) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>kinematic_constraints::PositionConstraint</name>
    <filename>classkinematic__constraints_1_1PositionConstraint.html</filename>
    <base>kinematic_constraints::KinematicConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classkinematic__constraints_1_1PositionConstraint.html</anchorfile>
      <anchor>ab59195907858a7dbdb019a8ca539c8a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>configure</name>
      <anchorfile>classkinematic__constraints_1_1PositionConstraint.html</anchorfile>
      <anchor>a42fae53c3c33924b2c6b34c3fb30cac4</anchor>
      <arglist>(const moveit_msgs::PositionConstraint &amp;pc, const robot_state::Transforms &amp;tf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstraintEvaluationResult</type>
      <name>decide</name>
      <anchorfile>classkinematic__constraints_1_1PositionConstraint.html</anchorfile>
      <anchor>a9d274512c462e41f57a565fea48ec5bf</anchor>
      <arglist>(const robot_state::RobotState &amp;state, bool verbose=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>enabled</name>
      <anchorfile>classkinematic__constraints_1_1PositionConstraint.html</anchorfile>
      <anchor>af3de88fd47d69ec9511c26763defc52a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equal</name>
      <anchorfile>classkinematic__constraints_1_1PositionConstraint.html</anchorfile>
      <anchor>a093cab0bb25ee0b9a07dc721fe72e2bb</anchor>
      <arglist>(const KinematicConstraint &amp;other, double margin) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; bodies::BodyPtr &gt; &amp;</type>
      <name>getConstraintRegions</name>
      <anchorfile>classkinematic__constraints_1_1PositionConstraint.html</anchorfile>
      <anchor>a404a9f5c4ae2058951f758ac0f292447</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const robot_model::LinkModel *</type>
      <name>getLinkModel</name>
      <anchorfile>classkinematic__constraints_1_1PositionConstraint.html</anchorfile>
      <anchor>a0d955470c6fd519c5d997a2d6a8ef9a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>getLinkOffset</name>
      <anchorfile>classkinematic__constraints_1_1PositionConstraint.html</anchorfile>
      <anchor>af5ef8959ccd2b767c771af88b23cb46d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getReferenceFrame</name>
      <anchorfile>classkinematic__constraints_1_1PositionConstraint.html</anchorfile>
      <anchor>a2978174870c6ec4922798c64728303f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLinkOffset</name>
      <anchorfile>classkinematic__constraints_1_1PositionConstraint.html</anchorfile>
      <anchor>ad9bbe763990d611a9e6bc5c21e617bd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mobileReferenceFrame</name>
      <anchorfile>classkinematic__constraints_1_1PositionConstraint.html</anchorfile>
      <anchor>a55fcd0c8e78dafe74e3984957677c801</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionConstraint</name>
      <anchorfile>classkinematic__constraints_1_1PositionConstraint.html</anchorfile>
      <anchor>a19cb5eb71028957ca6ea52b170000a92</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classkinematic__constraints_1_1PositionConstraint.html</anchorfile>
      <anchor>a590448751b21bb601aeedb7e20938f37</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>constraint_frame_id_</name>
      <anchorfile>classkinematic__constraints_1_1PositionConstraint.html</anchorfile>
      <anchor>a54d950cc4e146eba940380f8dc0c2b1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; bodies::BodyPtr &gt;</type>
      <name>constraint_region_</name>
      <anchorfile>classkinematic__constraints_1_1PositionConstraint.html</anchorfile>
      <anchor>a74d71f975ed1d8cb74614b38e8e184d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EigenSTL::vector_Isometry3d</type>
      <name>constraint_region_pose_</name>
      <anchorfile>classkinematic__constraints_1_1PositionConstraint.html</anchorfile>
      <anchor>a06f4ea1fb49bef174b0e14c2668a5741</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>has_offset_</name>
      <anchorfile>classkinematic__constraints_1_1PositionConstraint.html</anchorfile>
      <anchor>abffb4c7a78fb15fe0772cfee407279f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const robot_model::LinkModel *</type>
      <name>link_model_</name>
      <anchorfile>classkinematic__constraints_1_1PositionConstraint.html</anchorfile>
      <anchor>ac0a572a540621713f9cf1d148f6510d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mobile_frame_</name>
      <anchorfile>classkinematic__constraints_1_1PositionConstraint.html</anchorfile>
      <anchor>ae60f8dcee35bd759f8ce981c6dfbb3e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>offset_</name>
      <anchorfile>classkinematic__constraints_1_1PositionConstraint.html</anchorfile>
      <anchor>acf20017fd838967dc73631d26165f2dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pr2_arm_kinematics::PR2ArmIK</name>
    <filename>classpr2__arm__kinematics_1_1PR2ArmIK.html</filename>
    <member kind="function">
      <type>void</type>
      <name>computeIKShoulderPan</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>a795323d8c2a9a0e1c422045618b609a0</anchor>
      <arglist>(const Eigen::Matrix4f &amp;g_in, const double &amp;shoulder_pan_initial_guess, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;solution) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeIKShoulderRoll</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>a483321d2c268aca5d588ecc53ae6d106</anchor>
      <arglist>(const Eigen::Matrix4f &amp;g_in, const double &amp;shoulder_roll_initial_guess, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;solution) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSolverInfo</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>a371d2d6f56fa0f9d2c037df83bdfacdc</anchor>
      <arglist>(moveit_msgs::KinematicSolverInfo &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>acc83391241e36dc8aae3fb39ea73ed94</anchor>
      <arglist>(const urdf::ModelInterface &amp;robot_model, const std::string &amp;root_name, const std::string &amp;tip_name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PR2ArmIK</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>a4165a2bd1b23551c79a0a10c66abf42f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PR2ArmIK</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>a3f8c3095ae2f16b318109f83df4dc0f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>moveit_msgs::KinematicSolverInfo</type>
      <name>solver_info_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>a1d1aec0585bbe1e6eaaf3691a3d1bc01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addJointToChainInfo</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>a9ee5f450360962f921fa92926934c3ca</anchor>
      <arglist>(urdf::JointConstSharedPtr joint, moveit_msgs::KinematicSolverInfo &amp;info)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>checkJointLimits</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>aaf682c6aa08d9a48963e89e55aba77c2</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;joint_values) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>checkJointLimits</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>a9c26a6af21da328d0b89d213f56d8424</anchor>
      <arglist>(const double &amp;joint_value, const int &amp;joint_num) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>angle_multipliers_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>ab20e5db3457d2a6b6536dec5f57a2677</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; bool &gt;</type>
      <name>continuous_joint_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>a19a2c7e6002bc0e61ee129e3e9b7cfe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>elbow_wrist_offset_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>a3da015c301d6db1752c5e4f3bb21ac89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Matrix4f</type>
      <name>gf_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>a1311d7e01733b8c52f569541ca9f4af6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Matrix4f</type>
      <name>grhs_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>a93c45c4ed747e602cb5c40f1cfa8a178</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Matrix4f</type>
      <name>home_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>a792c9c276344f8fb1ac0e267e8d955f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Matrix4f</type>
      <name>home_inv_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>aa1cac9782348ddb09039a70410d55ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>max_angles_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>a20530c2e234c2d148a1862e78d9d2da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>min_angles_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>ace611194c86de76712dcccd8209abffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>shoulder_elbow_offset_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>a524c43fcb7b15cb0b1abd62d6add888e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>shoulder_upperarm_offset_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>afed1d0f6f89633b53ff8d3c8ff5a45bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>shoulder_wrist_offset_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>a68ba77e64dafc0d24ed2dea5b61bf58f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>solution_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>ae350c7f3a46daad8a9237fbb80ec6c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>torso_shoulder_offset_x_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>a45a450e2ee5fb29221ff468badb8edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>torso_shoulder_offset_y_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>ac84736fa149bba9f85de4318fb1f5df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>torso_shoulder_offset_z_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>a3213c1ebd6d3d186efd7a271f0f59c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>upperarm_elbow_offset_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIK.html</anchorfile>
      <anchor>a69e16f7f9062b61e28047a5245a5de94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pr2_arm_kinematics::PR2ArmIKSolver</name>
    <filename>classpr2__arm__kinematics_1_1PR2ArmIKSolver.html</filename>
    <member kind="function">
      <type>int</type>
      <name>CartToJnt</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIKSolver.html</anchorfile>
      <anchor>a8a60fb77826cbc3c5cec13ddd6e1c1ec</anchor>
      <arglist>(const KDL::JntArray &amp;q_init, const KDL::Frame &amp;p_in, KDL::JntArray &amp;q_out)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CartToJntSearch</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIKSolver.html</anchorfile>
      <anchor>aa9517df0fe7f937223cd7a13812eb370</anchor>
      <arglist>(const KDL::JntArray &amp;q_in, const KDL::Frame &amp;p_in, KDL::JntArray &amp;q_out, const double &amp;timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSolverInfo</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIKSolver.html</anchorfile>
      <anchor>a041545bc2fcc396918ee8f6decdfeb8f</anchor>
      <arglist>(moveit_msgs::KinematicSolverInfo &amp;response)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PR2ArmIKSolver</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIKSolver.html</anchorfile>
      <anchor>aa4e50890e2d792b6d751e915a39ffa5c</anchor>
      <arglist>(const urdf::ModelInterface &amp;robot_model, const std::string &amp;root_frame_name, const std::string &amp;tip_frame_name, const double &amp;search_discretization_angle, const int &amp;free_angle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateInternalDataStructures</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIKSolver.html</anchorfile>
      <anchor>ae56442e8499711ad6eeb453ea48107f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PR2ArmIKSolver</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIKSolver.html</anchorfile>
      <anchor>aee5167b972db05b006ac33b47363e331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>active_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIKSolver.html</anchorfile>
      <anchor>adc38b28a42cdadf1a9499e9d2bc71d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PR2ArmIK</type>
      <name>pr2_arm_ik_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIKSolver.html</anchorfile>
      <anchor>a7ceb277e735eb15fc031ca90c04eae25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>getCount</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIKSolver.html</anchorfile>
      <anchor>a1841b5dec4b132c89c58bdc3af381e6c</anchor>
      <arglist>(int &amp;count, const int &amp;max_count, const int &amp;min_count)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>free_angle_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIKSolver.html</anchorfile>
      <anchor>ae9766bbf488f123eae04fc6c3d33b0df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>root_frame_name_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIKSolver.html</anchorfile>
      <anchor>ab636345d08207f911ac2b8ee3f458dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>search_discretization_angle_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmIKSolver.html</anchorfile>
      <anchor>a3eabdaa0bf1490ae7b7e71c4acc8c096</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pr2_arm_kinematics::PR2ArmKinematicsPlugin</name>
    <filename>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</filename>
    <base>kinematics::KinematicsBase</base>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getJointNames</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>acf1f886db016a455d051439a48dafc37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getLinkNames</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>a4daa088117b548ba25a5d93b8f016bae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getPositionFK</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>a2988522a435edd8f172aa6c108c98aea</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;link_names, const std::vector&lt; double &gt; &amp;joint_angles, std::vector&lt; geometry_msgs::Pose &gt; &amp;poses) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getPositionIK</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>ab6fcfd3a2df09de439feb1e50f860deb</anchor>
      <arglist>(const geometry_msgs::Pose &amp;ik_pose, const std::vector&lt; double &gt; &amp;ik_seed_state, std::vector&lt; double &gt; &amp;solution, moveit_msgs::MoveItErrorCodes &amp;error_code, const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initialize</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>a32538c63dbf8892c7d1eb72b38170276</anchor>
      <arglist>(const std::string &amp;robot_description, const std::string &amp;group_name, const std::string &amp;base_name, const std::string &amp;tip_name, double search_discretization)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>a0d1e72ffd42c9c4e58d889729139f28f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PR2ArmKinematicsPlugin</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>a4dbb7d42b44e96a6b72abca7f7ab6522</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>searchPositionIK</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>a3e12781f8e40e4d0fe912a0abbc78832</anchor>
      <arglist>(const geometry_msgs::Pose &amp;ik_pose, const std::vector&lt; double &gt; &amp;ik_seed_state, double timeout, std::vector&lt; double &gt; &amp;solution, moveit_msgs::MoveItErrorCodes &amp;error_code, const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>searchPositionIK</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>a354d6602c29ed3de1170987b2249f7a8</anchor>
      <arglist>(const geometry_msgs::Pose &amp;ik_pose, const std::vector&lt; double &gt; &amp;ik_seed_state, double timeout, const std::vector&lt; double &gt; &amp;consistency_limits, std::vector&lt; double &gt; &amp;solution, moveit_msgs::MoveItErrorCodes &amp;error_code, const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>searchPositionIK</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>a9fff2df2b6edebc764d7105ed32e9205</anchor>
      <arglist>(const geometry_msgs::Pose &amp;ik_pose, const std::vector&lt; double &gt; &amp;ik_seed_state, double timeout, std::vector&lt; double &gt; &amp;solution, const IKCallbackFn &amp;solution_callback, moveit_msgs::MoveItErrorCodes &amp;error_code, const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>searchPositionIK</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>aa4e3066748c93f2757265ed25095bcda</anchor>
      <arglist>(const geometry_msgs::Pose &amp;ik_pose, const std::vector&lt; double &gt; &amp;ik_seed_state, double timeout, const std::vector&lt; double &gt; &amp;consistency_limits, std::vector&lt; double &gt; &amp;solution, const IKCallbackFn &amp;solution_callback, moveit_msgs::MoveItErrorCodes &amp;error_code, const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRobotModel</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>a5dd64d8dd5249d1336e6094e07a2d035</anchor>
      <arglist>(urdf::ModelInterfaceSharedPtr &amp;robot_model)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>desiredPoseCallback</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>a837601da808d06503ce235308dbf88c6</anchor>
      <arglist>(const KDL::JntArray &amp;jnt_array, const KDL::Frame &amp;ik_pose, moveit_msgs::MoveItErrorCodes &amp;error_code) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>jointSolutionCallback</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>a0ccf51ac1bc66610c0b9b948099466d5</anchor>
      <arglist>(const KDL::JntArray &amp;jnt_array, const KDL::Frame &amp;ik_pose, moveit_msgs::MoveItErrorCodes &amp;error_code) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>active_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>ac081925846586dc305ea0dc7fa28da16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IKCallbackFn</type>
      <name>desiredPoseCallback_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>a0b4170b8595ca22f5e3daa39e3b5f1d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dimension_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>aa054dd5f9443226d1fc62f96a9dd3d49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>moveit_msgs::KinematicSolverInfo</type>
      <name>fk_solver_info_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>aa8b063f6cbf6fb1c8cea21a859b4dc6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>free_angle_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>a233c9a0ec726ad1edb1a267e93b21a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>moveit_msgs::KinematicSolverInfo</type>
      <name>ik_solver_info_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>ab6507258fc5c97830d85687b8fb6199a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; KDL::ChainFkSolverPos_recursive &gt;</type>
      <name>jnt_to_pose_solver_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>aac3f7894d2b90ab59856e13dbfc02587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KDL::Chain</type>
      <name>kdl_chain_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>a73def7478be064206733e68603f7a0aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>pr2_arm_kinematics::PR2ArmIKSolverPtr</type>
      <name>pr2_arm_ik_solver_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>a88e5dbc8016fd50733913489be3167e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>urdf::ModelInterfaceSharedPtr</type>
      <name>robot_model_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>a6a1a9086d3011610fd3a3e1ea57d5de4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>root_name_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>aa72063af5aa616cef6229130008006d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IKCallbackFn</type>
      <name>solutionCallback_</name>
      <anchorfile>classpr2__arm__kinematics_1_1PR2ArmKinematicsPlugin.html</anchorfile>
      <anchor>aeb8a0242d20e3c11a0da829b962c03e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit::core::PrismaticJointModel</name>
    <filename>classmoveit_1_1core_1_1PrismaticJointModel.html</filename>
    <base>moveit::core::JointModel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeTransform</name>
      <anchorfile>classmoveit_1_1core_1_1PrismaticJointModel.html</anchorfile>
      <anchor>a6f0384b6e6df5ae95bb92e61d0dcd228</anchor>
      <arglist>(const double *joint_values, Eigen::Isometry3d &amp;transf) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1PrismaticJointModel.html</anchorfile>
      <anchor>af566c05a3dbf63dabb39a9c267b91688</anchor>
      <arglist>(const Eigen::Isometry3d &amp;transf, double *joint_values) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classmoveit_1_1core_1_1PrismaticJointModel.html</anchorfile>
      <anchor>ac48449cc2b19a36009f9a294f9b37fab</anchor>
      <arglist>(const double *values1, const double *values2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>enforcePositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1PrismaticJointModel.html</anchorfile>
      <anchor>ae1b837e5c8041a323355af745277d1b9</anchor>
      <arglist>(double *values, const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>getAxis</name>
      <anchorfile>classmoveit_1_1core_1_1PrismaticJointModel.html</anchorfile>
      <anchor>a1ac7160ed18a5bccfb14b37658c149e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classmoveit_1_1core_1_1PrismaticJointModel.html</anchorfile>
      <anchor>a931d09b8944507decbbfa1e48aa9407a</anchor>
      <arglist>(const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getStateSpaceDimension</name>
      <anchorfile>classmoveit_1_1core_1_1PrismaticJointModel.html</anchorfile>
      <anchor>afc54c5fcc74bccf6b3e510ccb06e2724</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVariableDefaultPositions</name>
      <anchorfile>classmoveit_1_1core_1_1PrismaticJointModel.html</anchorfile>
      <anchor>a6b5cca02c95f3203bb30663c4c9af78a</anchor>
      <arglist>(double *values, const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVariableRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1PrismaticJointModel.html</anchorfile>
      <anchor>ad05ac68eadbe079decd961700340082f</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVariableRandomPositionsNearBy</name>
      <anchorfile>classmoveit_1_1core_1_1PrismaticJointModel.html</anchorfile>
      <anchor>a5cca1a76c31a74b575ddeed679df2b5e</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const Bounds &amp;other_bounds, const double *near, const double distance) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classmoveit_1_1core_1_1PrismaticJointModel.html</anchorfile>
      <anchor>acd6470651ad22c9a862f857030fd9274</anchor>
      <arglist>(const double *from, const double *to, const double t, double *state) const </arglist>
    </member>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>PrismaticJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1PrismaticJointModel.html</anchorfile>
      <anchor>a4513ea7ca1db60f782a7c9d95ce7b81b</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>satisfiesPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1PrismaticJointModel.html</anchorfile>
      <anchor>a95fbbb7643fe83026c92104a11ee9375</anchor>
      <arglist>(const double *values, const Bounds &amp;other_bounds, double margin) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAxis</name>
      <anchorfile>classmoveit_1_1core_1_1PrismaticJointModel.html</anchorfile>
      <anchor>ad8f130d51b3cbb4525bc549b002663e2</anchor>
      <arglist>(const Eigen::Vector3d &amp;axis)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>axis_</name>
      <anchorfile>classmoveit_1_1core_1_1PrismaticJointModel.html</anchorfile>
      <anchor>a705b66de84f13a069b98bfa72c9ca39b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit::tools::Profiler</name>
    <filename>classmoveit_1_1tools_1_1Profiler.html</filename>
    <class kind="struct">moveit::tools::Profiler::AvgInfo</class>
    <class kind="struct">moveit::tools::Profiler::PerThread</class>
    <class kind="class">moveit::tools::Profiler::ScopedBlock</class>
    <class kind="class">moveit::tools::Profiler::ScopedStart</class>
    <class kind="struct">moveit::tools::Profiler::TimeInfo</class>
    <member kind="function">
      <type>void</type>
      <name>average</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>aa94ec26521a7f7fc0b90cccda3fcc2e6</anchor>
      <arglist>(const std::string &amp;name, const double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>begin</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a56f50fd3429b4b3e660029529a61b332</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a60411dca3878182f66a97ee013d478df</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>console</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a1a5520ce2341146c3ee225d77b02d1b9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ae0bc9b3c7b08347a25210e96eb38a6ea</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>event</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a657a4c3d927cf4ee43c5b4e2c0bbad2b</anchor>
      <arglist>(const std::string &amp;name, const unsigned int times=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Profiler</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>acb95d6f47d3619537f47a26eba386b15</anchor>
      <arglist>(bool printOnDestroy=false, bool autoStart=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>running</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>af7a7734c3d65442f5f00df2243320042</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a5976ad4e0b9c4635662b3af745234ed3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>acfa3cf078f3202074d9a533c38b99800</anchor>
      <arglist>(std::ostream &amp;out=std::cout, bool merge=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ab1686f4b8665e5f6fbaf9612514a4a0c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Profiler</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a5386f834cafc56d73c0cb0e30291680c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Average</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>aed4355d6693366ea71295a56f02123fa</anchor>
      <arglist>(const std::string &amp;name, const double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Begin</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a320297934743c2b71ec133969ab5b478</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Clear</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a229933f85ed9efd907296f401217f35d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Console</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ac4d43faefa952a80bc6dcb4f4d37493a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>End</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a6be4a68eb3f9ff2d47395a1664e77823</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Event</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ad63bb2800124d911f78e73768cca620f</anchor>
      <arglist>(const std::string &amp;name, const unsigned int times=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Profiler &amp;</type>
      <name>Instance</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>adc66aa8baee7951f1a6edf07d85b5922</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Running</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a432e0f7d48eb81fd391584ef0c1b0e80</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Start</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>af5905f334c33e898f00979d76ae7bf9e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Status</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a28ac8c1c97ffaaf788d031f4c4f3d9b5</anchor>
      <arglist>(std::ostream &amp;out=std::cout, bool merge=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Stop</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>aadf6bf0694a8947a8cf4bf8327c3bddf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>printThreadInfo</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ac6149dec323772e119e40d99d43445ca</anchor>
      <arglist>(std::ostream &amp;out, const PerThread &amp;data)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; boost::thread::id, PerThread &gt;</type>
      <name>data_</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a4a2fdd0be9b9624fe61bb50e502e38ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>lock_</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a5a71014a060a8c3b6c87213870b96847</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>printOnDestroy_</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a58aa041ae3689f17d1345e6932965686</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>running_</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>afce2ae0cd3d911bbd9c0f03af1681692</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TimeInfo</type>
      <name>tinfo_</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ac9174a5573af6c37832ab1ce0eee5d45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>distance_field::PropagationDistanceField</name>
    <filename>classdistance__field_1_1PropagationDistanceField.html</filename>
    <base>distance_field::DistanceField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPointsToField</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>abd8afff67fb2323b0ad077776b8620cf</anchor>
      <arglist>(const EigenSTL::vector_Vector3d &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>const PropDistanceFieldVoxel &amp;</type>
      <name>getCell</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a4974e89331efc49b244a44d46d30d62a</anchor>
      <arglist>(int x, int y, int z) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDistance</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a6329415d2cf4db68d0031d699065d7c3</anchor>
      <arglist>(double x, double y, double z) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDistance</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a10c48f9a0a27cbaf3db8975e83885ec4</anchor>
      <arglist>(int x, int y, int z) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaximumDistanceSquared</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>aef4866f189a712d787750991ed6920bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PropDistanceFieldVoxel *</type>
      <name>getNearestCell</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a07c962c0eaeaa299a8a26359edb303af</anchor>
      <arglist>(int x, int y, int z, double &amp;dist, Eigen::Vector3i &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getUninitializedDistance</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a2a5fe400c77b36e560daee9d335bf53e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getXNumCells</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>ad9384bfa4b7d9282031f212ed878c224</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getYNumCells</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>aa66cce8f3009bdc085e5497511b1b0bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getZNumCells</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a31c6c66c090092956bfb09bb45e921d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>gridToWorld</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a2fe326d12f82cdad51023111db567b48</anchor>
      <arglist>(int x, int y, int z, double &amp;world_x, double &amp;world_y, double &amp;world_z) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCellValid</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a8450ac1c503d98f102dfc2258a91fa00</anchor>
      <arglist>(int x, int y, int z) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropagationDistanceField</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>af0936bc650cceeb8cae73721189b9c78</anchor>
      <arglist>(double size_x, double size_y, double size_z, double resolution, double origin_x, double origin_y, double origin_z, double max_distance, bool propagate_negative_distances=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropagationDistanceField</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a10a41843375b4332754d6847ad350fa3</anchor>
      <arglist>(const octomap::OcTree &amp;octree, const octomap::point3d &amp;bbx_min, const octomap::point3d &amp;bbx_max, double max_distance, bool propagate_negative_distances=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropagationDistanceField</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a3f39d72f90b4725d1efb65820806a28d</anchor>
      <arglist>(std::istream &amp;stream, double max_distance, bool propagate_negative_distances=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>readFromStream</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>adce33922effc3a371a89b1742e3a2958</anchor>
      <arglist>(std::istream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removePointsFromField</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>ac409d2134be4d3feee5b4a6a3e0e3e6c</anchor>
      <arglist>(const EigenSTL::vector_Vector3d &amp;points)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>aec11177d681fca35d38380c7e06e2106</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updatePointsInField</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a4bd9b14ee0333884399beb12e1fa7e0d</anchor>
      <arglist>(const EigenSTL::vector_Vector3d &amp;old_points, const EigenSTL::vector_Vector3d &amp;new_points)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>worldToGrid</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>ab42a3e2d5f0e18f76fd98789d7fd96ea</anchor>
      <arglist>(double world_x, double world_y, double world_z, int &amp;x, int &amp;y, int &amp;z) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeToStream</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>ace1672d0f99bb363e77e25a34af3c845</anchor>
      <arglist>(std::ostream &amp;stream) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PropagationDistanceField</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a5374d325b8e27a4fe471d274605623f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::set&lt; Eigen::Vector3i, compareEigen_Vector3i &gt;</type>
      <name>VoxelSet</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a85ffad9c49eb3320ffa8442e72361b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addNewObstacleVoxels</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a445d784ee6665dd3b06acc4855a65bc1</anchor>
      <arglist>(const std::vector&lt; Eigen::Vector3i &gt; &amp;voxel_points)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getDirectionNumber</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a809ee62974896f3f84a6f18ca0fb460a</anchor>
      <arglist>(int dx, int dy, int dz) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual double</type>
      <name>getDistance</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a091cfda4732aba0cec3eee9448653f14</anchor>
      <arglist>(const PropDistanceFieldVoxel &amp;object) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Eigen::Vector3i</type>
      <name>getLocationDifference</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a05f467343064a09d3042b1045d97fdf2</anchor>
      <arglist>(int directionNumber) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a07ad2270a50a5a090c1f1010f69af6a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initNeighborhoods</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>abf62026f06dca9795f53351408863632</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>print</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a82ddf4cee8fef7e13860ac815cdf613e</anchor>
      <arglist>(const VoxelSet &amp;set)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>print</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>ac75221e4135b1c276477c29e86a06a7b</anchor>
      <arglist>(const EigenSTL::vector_Vector3d &amp;points)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>propagateNegative</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>aa6f5bc4a0a4d54b3804351c218c702ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>propagatePositive</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a1a95746b578fa2f544738274334eb78e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>removeObstacleVoxels</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a4d2cd444114c75c60464189b0a2f5a03</anchor>
      <arglist>(const std::vector&lt; Eigen::Vector3i &gt; &amp;voxel_points)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static int</type>
      <name>eucDistSq</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a192111bf4b1d982ebf4502a8240fbfbd</anchor>
      <arglist>(Eigen::Vector3i point1, Eigen::Vector3i point2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; Eigen::Vector3i &gt; &gt;</type>
      <name>bucket_queue_</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a7c342b82e0f4cbcf464c7395d552ff9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Eigen::Vector3i &gt;</type>
      <name>direction_number_to_direction_</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a09090f7cece94497fd11c5b965430a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>max_distance_</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a291129a9ffad0f8e102a57acb47628e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>max_distance_sq_</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a00f79dac8b12ce911ba6dcea318e7da9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; Eigen::Vector3i &gt; &gt;</type>
      <name>negative_bucket_queue_</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a0bab64f1fb51c7bba0f5b1e0a46dbf91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; std::vector&lt; Eigen::Vector3i &gt; &gt; &gt;</type>
      <name>neighborhoods_</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a8ca8052a48ee757dff33a966343f1b59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>propagate_negative_</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a11ccdeccfe026f3c843eff8ad5fc482a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>sqrt_table_</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a576fd528fb4014d6e7a0741db784c7a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VoxelGrid&lt; PropDistanceFieldVoxel &gt;::Ptr</type>
      <name>voxel_grid_</name>
      <anchorfile>classdistance__field_1_1PropagationDistanceField.html</anchorfile>
      <anchor>a883ba1a0917cdd6aea35326d823d2da7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>distance_field::PropDistanceFieldVoxel</name>
    <filename>structdistance__field_1_1PropDistanceFieldVoxel.html</filename>
    <member kind="function">
      <type></type>
      <name>PropDistanceFieldVoxel</name>
      <anchorfile>structdistance__field_1_1PropDistanceFieldVoxel.html</anchorfile>
      <anchor>ad3b94bbe931761a3eb494d922bcc616c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropDistanceFieldVoxel</name>
      <anchorfile>structdistance__field_1_1PropDistanceFieldVoxel.html</anchorfile>
      <anchor>a1008f5d3919bb2e434391e79f27ace38</anchor>
      <arglist>(int distance_sq_positive, int distance_sq_negative)</arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3i</type>
      <name>closest_negative_point_</name>
      <anchorfile>structdistance__field_1_1PropDistanceFieldVoxel.html</anchorfile>
      <anchor>a41bb7e2b627265f75e1a50a81c791a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3i</type>
      <name>closest_point_</name>
      <anchorfile>structdistance__field_1_1PropDistanceFieldVoxel.html</anchorfile>
      <anchor>a19cbe27ecf3364c78ae5805ebdcecc5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>distance_square_</name>
      <anchorfile>structdistance__field_1_1PropDistanceFieldVoxel.html</anchorfile>
      <anchor>ad9247affb8fbe55b4a75400fb3a08185</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>negative_distance_square_</name>
      <anchorfile>structdistance__field_1_1PropDistanceFieldVoxel.html</anchorfile>
      <anchor>ac092a15290f519cd159f18f0f0bc8ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>negative_update_direction_</name>
      <anchorfile>structdistance__field_1_1PropDistanceFieldVoxel.html</anchorfile>
      <anchor>a921b14ecc79b2e017438a678edf0bfc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>update_direction_</name>
      <anchorfile>structdistance__field_1_1PropDistanceFieldVoxel.html</anchorfile>
      <anchor>a44387882485a60ddef156e45a5d0f1e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>UNINITIALIZED</name>
      <anchorfile>structdistance__field_1_1PropDistanceFieldVoxel.html</anchorfile>
      <anchor>a5ca59006e4c37b2b2654d9bca5106ea4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit::core::RevoluteJointModel</name>
    <filename>classmoveit_1_1core_1_1RevoluteJointModel.html</filename>
    <base>moveit::core::JointModel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>a402a1f54f2ef8812b77ec453218cf92d</anchor>
      <arglist>(const double *joint_values, Eigen::Isometry3d &amp;transf) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>a47e4251b8cbde0ba307b13cb0295b8f8</anchor>
      <arglist>(const Eigen::Isometry3d &amp;transf, double *joint_values) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>ace5ab19d2325eb861c9ad13884027c5a</anchor>
      <arglist>(const double *values1, const double *values2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>enforcePositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>aa6fb90e4446d6ff1f46b33ab3db32be4</anchor>
      <arglist>(double *values, const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>getAxis</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>a5ed6e530a32dece80beca925d0162df8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>a8d1f898e1b35567f899bb0acfd9c9436</anchor>
      <arglist>(const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getStateSpaceDimension</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>ada5d3b7d26d352ada93ca5a044081af1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVariableDefaultPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>a5c201ea0503996a44e04ab98b40ad80c</anchor>
      <arglist>(double *values, const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVariableRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>ab8bbaa2d7982de5f151b28bdcd79548d</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const Bounds &amp;other_bounds) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVariableRandomPositionsNearBy</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>ac2246a94ca24175e3ae555040f7d4a23</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values, const Bounds &amp;other_bounds, const double *near, const double distance) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>a77e13317e5d320aa94f4ee8c1e96b794</anchor>
      <arglist>(const double *from, const double *to, const double t, double *state) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContinuous</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>aa78d73fff1715f8ac5e21ee580ca7a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>RevoluteJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>a505e3bcf1943ccdb6d1b755d443fa885</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>satisfiesPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>a689f61f7162e2e9976f51d3c996a2720</anchor>
      <arglist>(const double *values, const Bounds &amp;other_bounds, double margin) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAxis</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>aa8afe131d73feede28c02e9e35a42eba</anchor>
      <arglist>(const Eigen::Vector3d &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContinuous</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>af72d2977e918e77d47401028c8563a3e</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>axis_</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>a12a4273bd8a675b3216f7ae49fd9abaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>continuous_</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>a09151babd8edf0bed5a84badf6e3097d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>x2_</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>acccfa5363897e8c89b8c3746052cfe19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>xy_</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>abd0aa9c72cf745cff5c5235e85220687</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>xz_</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>ab415ae4a1ecdf21ea2331a8e872d7f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>y2_</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>a96a4fdf268d821638928545c1db625f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>yz_</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>a18e85c8d0bca58aef80bfbcf6cb11c20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>z2_</name>
      <anchorfile>classmoveit_1_1core_1_1RevoluteJointModel.html</anchorfile>
      <anchor>a495b972a1a46fa9e0180d6d266e0942a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit::core::RobotModel</name>
    <filename>classmoveit_1_1core_1_1RobotModel.html</filename>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a613d8598616afca965ac11a381d96ca8</anchor>
      <arglist>(const double *state1, const double *state2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enforcePositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>afdde17f9d49b7d70fdb228b67b9a4df6</anchor>
      <arglist>(double *state) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enforcePositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a9609922468ef51ced022109c542d1b01</anchor>
      <arglist>(double *state, const JointBoundsVector &amp;active_joint_bounds) const </arglist>
    </member>
    <member kind="function">
      <type>const JointBoundsVector &amp;</type>
      <name>getActiveJointModelsBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a634dd1d0b52f9484d29d2d945f658a54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const JointModel *</type>
      <name>getCommonRoot</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>aa758a48347f6b556a9ec29a8b216d6d0</anchor>
      <arglist>(const JointModel *a, const JointModel *b) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>afaf055b63723a4dcf17d99271965b5ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>af593b0e96cb2a2e2aea0d5e300a41431</anchor>
      <arglist>(const JointBoundsVector &amp;active_joint_bounds) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMissingVariableNames</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a0982b819c15624e37a2ac49f532d1740</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;variables, std::vector&lt; std::string &gt; &amp;missing_variables) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getModelFrame</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a155d9bc0b6e3b6f8e10ed3021bceca62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a57595eadac4ff5b5b776a192b8cdac97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const srdf::ModelConstSharedPtr &amp;</type>
      <name>getSRDF</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a9e34755169b00408297624244f6f5843</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const urdf::ModelInterfaceSharedPtr &amp;</type>
      <name>getURDF</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>af48166bf4ba5c50a53f015f6b2b51314</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VariableBounds &amp;</type>
      <name>getVariableBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a9805364d02c694d6d40cc0827766e775</anchor>
      <arglist>(const std::string &amp;variable) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getVariableCount</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a12f79113bc75bed2be6887a488ccba9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableDefaultPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ad1af677dd7267646e181e684e5fa8cd6</anchor>
      <arglist>(double *values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableDefaultPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>aafe1edffa85fadd2c22ba6e8e6416279</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableDefaultPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a4fa7f7e2c571635d52fd11bef6b36005</anchor>
      <arglist>(std::map&lt; std::string, double &gt; &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVariableIndex</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a47c74ed349d40bea2c5c8e3625f693a6</anchor>
      <arglist>(const std::string &amp;variable) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getVariableNames</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ac03ab1904a5af0dbbcfce97623e2feab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>af560b302ad3791eed4538d2d2b027746</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, double *values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>aa44c716e26274754bff3753caa296b46</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, std::vector&lt; double &gt; &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVariableRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a72ccc19922e6c3d86f39ca3bd35ddb09</anchor>
      <arglist>(random_numbers::RandomNumberGenerator &amp;rng, std::map&lt; std::string, double &gt; &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a658b482d6973418d81c4f84657dfe502</anchor>
      <arglist>(const double *from, const double *to, double t, double *state) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a18e8f3091135a7cbbd06e3887501269f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printModelInfo</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a4be4673de0632d119bac6b871a13edc0</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobotModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ab2d8a71b22b1659634434f9badaa706b</anchor>
      <arglist>(const urdf::ModelInterfaceSharedPtr &amp;urdf_model, const srdf::ModelConstSharedPtr &amp;srdf_model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>aa1d7408cc5f34597c7b20c608a6990ee</anchor>
      <arglist>(const double *state, double margin=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ae49000d05fa15c173de9becd944dee87</anchor>
      <arglist>(const double *state, const JointBoundsVector &amp;active_joint_bounds, double margin=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKinematicsAllocators</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>af78afbd7f6d3a858d0f4645ca1210f5c</anchor>
      <arglist>(const std::map&lt; std::string, SolverAllocatorFn &gt; &amp;allocators)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RobotModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a6040a6e597f1c75fd7c8b47d8f472923</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const JointModel *</type>
      <name>getRootJoint</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a4f0b8ab9b0c478e6144f494583f35001</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getRootJointName</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a489e26407e0ce14d2bd675902050ea6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>aae6e197969696a9cd0a70cab0c120594</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const JointModel *</type>
      <name>getJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a4230509a72f427c4d54f1db9b2081b2a</anchor>
      <arglist>(const std::string &amp;joint) const </arglist>
    </member>
    <member kind="function">
      <type>const JointModel *</type>
      <name>getJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a088d6f03b1f263609573551bbc87d5a0</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>JointModel *</type>
      <name>getJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>adcb6a06041f7e08d238afc9e5785bb87</anchor>
      <arglist>(const std::string &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a8ef1f458090caac577b5bfc852ba7941</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; JointModel * &gt; &amp;</type>
      <name>getJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a90cdeb6659fc8a11534a3014e2892c45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getJointModelNames</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a3b2c098d91dd7a916b81248ec84141d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getActiveJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a19cf4cd05c4601c1174eb954bff72d0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; JointModel * &gt; &amp;</type>
      <name>getActiveJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a116908f84052d7fbe2731aec835478c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getSingleDOFJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a7189a0eb931f2acc54a53b593a723d6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getMultiDOFJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ad846a68501ab667ca4ba520e53dfe4b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getContinuousJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ac329e877c6315024325a16692b72e003</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getMimicJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a95865c5b8253db0de6f994714f4d1e44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const JointModel *</type>
      <name>getJointOfVariable</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ac59a92d0ba4ff85d80b2d1a94274b184</anchor>
      <arglist>(int variable_index) const </arglist>
    </member>
    <member kind="function">
      <type>const JointModel *</type>
      <name>getJointOfVariable</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>af985bf9279b373a379c9fc8e8798de58</anchor>
      <arglist>(const std::string &amp;variable) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getJointModelCount</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a5019d0371f09a7e2ebd86254de8ce073</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasJointModelGroup</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a84f358f25cd404d0b542f1e1b22ec75d</anchor>
      <arglist>(const std::string &amp;group) const </arglist>
    </member>
    <member kind="function">
      <type>const JointModelGroup *</type>
      <name>getJointModelGroup</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>adb5b553336174187f587e42ca187f110</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>JointModelGroup *</type>
      <name>getJointModelGroup</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>aa3b68bf0980355638f923091988992f5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModelGroup * &gt; &amp;</type>
      <name>getJointModelGroups</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a4b8f8080de3fccdeebccd42b22e6d95a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; JointModelGroup * &gt; &amp;</type>
      <name>getJointModelGroups</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a8d34a60aad1fb7b536182c7930d327da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getJointModelGroupNames</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a9da77a181463e5646dc1daab73148da2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasEndEffector</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a1e28bdaacbcdcba7e94e414844467bc2</anchor>
      <arglist>(const std::string &amp;eef) const </arglist>
    </member>
    <member kind="function">
      <type>const JointModelGroup *</type>
      <name>getEndEffector</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a92a2dab92f6a0d43bebb297ed80cf14b</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>JointModelGroup *</type>
      <name>getEndEffector</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a98652ff31857462db512c0fb06966dad</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModelGroup * &gt; &amp;</type>
      <name>getEndEffectors</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ae459dc09c29ed4a69a5b0cadd50184d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>addJointModelGroup</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>adcb9130929d85fdec8a04e79849351d8</anchor>
      <arglist>(const srdf::Model::Group &amp;group)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildGroups</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ad17bd8a8142ec84e4d8d3eb1fdfe162a</anchor>
      <arglist>(const srdf::Model &amp;srdf_model)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildGroupsInfo_EndEffectors</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a2d64999594844008ee90afeda380d06e</anchor>
      <arglist>(const srdf::Model &amp;srdf_model)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildGroupsInfo_Subgroups</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a42ec3c4648f05ea37536e77823493e92</anchor>
      <arglist>(const srdf::Model &amp;srdf_model)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildGroupStates</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a8388447dc6f8330b37ce186f93c1e413</anchor>
      <arglist>(const srdf::Model &amp;srdf_model)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildJointInfo</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>afc454aa8fc3cac50d0b3172a37140365</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildMimic</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a06f7a5069743570b6bc9ea3a48b7edcb</anchor>
      <arglist>(const urdf::ModelInterface &amp;urdf_model)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>afa81298bc190af38d3393eeb5c2762be</anchor>
      <arglist>(const urdf::ModelInterface &amp;urdf_model, const srdf::Model &amp;srdf_model)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>JointModel *</type>
      <name>buildRecursive</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>af3885dc69c0dae39cdfac05b9f498114</anchor>
      <arglist>(LinkModel *parent, const urdf::Link *link, const srdf::Model &amp;srdf_model)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const JointModel *</type>
      <name>computeCommonRoot</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>aba2d4b70cd60365f8fe18622d4608866</anchor>
      <arglist>(const JointModel *a, const JointModel *b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeCommonRoots</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ab79cc844a13ea80b854f7d391ec023c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeDescendants</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a32a3a06b04a9ca84486f0baba80dd073</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeFixedTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a7779dbc5c3d0cf3cde31583032524e84</anchor>
      <arglist>(const LinkModel *link, const Eigen::Isometry3d &amp;transform, LinkTransformMap &amp;associated_transforms)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>JointModel *</type>
      <name>constructJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>adbf5a7c0c1430d0bc4bd040f39ad96cc</anchor>
      <arglist>(const urdf::Joint *urdf_joint_model, const urdf::Link *child_link, const srdf::Model &amp;srdf_model)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LinkModel *</type>
      <name>constructLinkModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a4984ed960df65c297658d488dc7148e1</anchor>
      <arglist>(const urdf::Link *urdf_link)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>shapes::ShapePtr</type>
      <name>constructShape</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>abcd785395005fe888e1a79e110908b39</anchor>
      <arglist>(const urdf::Geometry *geom)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateMimicJoints</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a9ce08aebaeff49379cdf1cca2ceaa577</anchor>
      <arglist>(double *values) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>active_joint_model_start_index_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a97c5ac36baebdc058ae6f5f9a913de71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; JointModel * &gt;</type>
      <name>active_joint_model_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>af3822c51ce2c495e039d1dbc2ad5bec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const JointModel * &gt;</type>
      <name>active_joint_model_vector_const_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a78dcadc4cd47db7f02656c560f0ece0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JointBoundsVector</type>
      <name>active_joint_models_bounds_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a6ecb001d9cf1349a68c5db7ed782a04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>common_joint_roots_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a3f69ff2a8c5b882f873fb3d47d6448d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const JointModel * &gt;</type>
      <name>continuous_joint_model_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>aba55cf434b3a84183b9279f749c5409c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const JointModelGroup * &gt;</type>
      <name>end_effectors_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ab1de323af96d212e6a04eb0640988318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JointModelGroupMap</type>
      <name>end_effectors_map_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>abb6a01c835d75e8dcfbc39632ef42825</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JointModelGroupMap</type>
      <name>joint_model_group_map_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ab08f99fa69ed6bce288d52e2c9dba8b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>joint_model_group_names_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a1210f1da9dfd285fbbec6a02b30163be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; JointModelGroup * &gt;</type>
      <name>joint_model_groups_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a3fbc3101be4fdee2a7bb66a1d6715b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const JointModelGroup * &gt;</type>
      <name>joint_model_groups_const_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>aa4b4d11522a6a13bc13086cee6cc55ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JointModelMap</type>
      <name>joint_model_map_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ad7e8eb652aa62926850e8ce51ad27745</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>joint_model_names_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ac9dd6ae1ffdd9e13815054a533c6129f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; JointModel * &gt;</type>
      <name>joint_model_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a47a8e9a200e8872de991f65a2afad274</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const JointModel * &gt;</type>
      <name>joint_model_vector_const_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a0bc1d7d16c8f737907beafdc4e2b73e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VariableIndexMap</type>
      <name>joint_variables_index_map_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>aaa56b9b489126f34a9c8239ce04a3900</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const JointModel * &gt;</type>
      <name>joints_of_variable_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a84be9cba1758dd5e27a5a940670a725b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>link_geometry_count_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a004ac92ae3160c7e0c70cdc08a0b6c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinkModelMap</type>
      <name>link_model_map_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a860c363c2d90b361dd5aaa51adce911f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>link_model_names_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a39e4ab8b152152908ef60fc47119c18e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>link_model_names_with_collision_geometry_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a0d76e9dcb4b27d4c3a2628e8c30ea480</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; LinkModel * &gt;</type>
      <name>link_model_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>aa72c2b72d62c227974a2f98ac0e838d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const LinkModel * &gt;</type>
      <name>link_model_vector_const_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a30ce0b1880260d26ea8e38ec479d2a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const LinkModel * &gt;</type>
      <name>link_models_with_collision_geometry_vector_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a1a8cf0f4226383c0b617d35e23067928</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const JointModel * &gt;</type>
      <name>mimic_joints_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a4f52e98a177c0cccb9b60c6113ecc6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>model_frame_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a0645cbba32f257e9826f9733204f6ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>model_name_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>add257acb1b1e24a83edae587071a4c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const JointModel * &gt;</type>
      <name>multi_dof_joints_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ab2f61327419abd37b60e75ce60319a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const JointModel *</type>
      <name>root_joint_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>afbd20640e9cc5a8a2f267193a4eb2b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const LinkModel *</type>
      <name>root_link_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ae451fbc52771f3399576ee1c8b60f835</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const JointModel * &gt;</type>
      <name>single_dof_joints_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a0b0ca49e0aff19e3a207fd536f316f59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>srdf::ModelConstSharedPtr</type>
      <name>srdf_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a205640d2f123e90a85048649dd9b4c0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>urdf::ModelInterfaceSharedPtr</type>
      <name>urdf_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a9a5db5ab937d5790b17a6974ca6a0d45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>variable_count_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>adbf6dd0cd16c5f50716e50ee238918ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>variable_names_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a9289962b25da12fe03de6676a490dc6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const JointModel *</type>
      <name>getRootJoint</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a4f0b8ab9b0c478e6144f494583f35001</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getRootJointName</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a489e26407e0ce14d2bd675902050ea6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>aae6e197969696a9cd0a70cab0c120594</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const JointModel *</type>
      <name>getJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a4230509a72f427c4d54f1db9b2081b2a</anchor>
      <arglist>(const std::string &amp;joint) const </arglist>
    </member>
    <member kind="function">
      <type>const JointModel *</type>
      <name>getJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a088d6f03b1f263609573551bbc87d5a0</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>JointModel *</type>
      <name>getJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>adcb6a06041f7e08d238afc9e5785bb87</anchor>
      <arglist>(const std::string &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a8ef1f458090caac577b5bfc852ba7941</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; JointModel * &gt; &amp;</type>
      <name>getJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a90cdeb6659fc8a11534a3014e2892c45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getJointModelNames</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a3b2c098d91dd7a916b81248ec84141d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getActiveJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a19cf4cd05c4601c1174eb954bff72d0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; JointModel * &gt; &amp;</type>
      <name>getActiveJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a116908f84052d7fbe2731aec835478c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getSingleDOFJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a7189a0eb931f2acc54a53b593a723d6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getMultiDOFJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ad846a68501ab667ca4ba520e53dfe4b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getContinuousJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ac329e877c6315024325a16692b72e003</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModel * &gt; &amp;</type>
      <name>getMimicJointModels</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a95865c5b8253db0de6f994714f4d1e44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const JointModel *</type>
      <name>getJointOfVariable</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ac59a92d0ba4ff85d80b2d1a94274b184</anchor>
      <arglist>(int variable_index) const </arglist>
    </member>
    <member kind="function">
      <type>const JointModel *</type>
      <name>getJointOfVariable</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>af985bf9279b373a379c9fc8e8798de58</anchor>
      <arglist>(const std::string &amp;variable) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getJointModelCount</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a5019d0371f09a7e2ebd86254de8ce073</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const LinkModel *</type>
      <name>getRootLink</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>afd93ef0a43ca8cf28f75089d6a02ec4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getRootLinkName</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a4b764e710f6a41ccb57e7b3f93660f30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLinkModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ac2631db66b0b4659756c0d3a46d31418</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const LinkModel *</type>
      <name>getLinkModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a695e20cca1fcaeb38a01ab380f0c30bb</anchor>
      <arglist>(const std::string &amp;link) const </arglist>
    </member>
    <member kind="function">
      <type>const LinkModel *</type>
      <name>getLinkModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a5b714bfea843c8999288ee8d9eccda03</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>LinkModel *</type>
      <name>getLinkModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a90e030981ce90c6c89723ace826fb391</anchor>
      <arglist>(const std::string &amp;link)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const LinkModel * &gt; &amp;</type>
      <name>getLinkModels</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a51b31269f4a7d78a6ef831ad236c6f73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; LinkModel * &gt; &amp;</type>
      <name>getLinkModels</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a214f53a4a897272e574bd43323c93ac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getLinkModelNames</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ac2e6429322178db85f08178ed48d1dfb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const LinkModel * &gt; &amp;</type>
      <name>getLinkModelsWithCollisionGeometry</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a35ccad8ceda6d3c7e30d09ad2e4e5d7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getLinkModelNamesWithCollisionGeometry</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ab20499eee3b91dbc5a5095c86c70fd4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getLinkModelCount</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a6883848b4398d3772894dff41f73192e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getLinkGeometryCount</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a10202b3b02503f6315c734c2f9a9a2f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const moveit::core::LinkModel *</type>
      <name>getRigidlyConnectedParentLinkModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>abc8fa87627c002b5790c34130a5a5d00</anchor>
      <arglist>(const LinkModel *link)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasJointModelGroup</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a84f358f25cd404d0b542f1e1b22ec75d</anchor>
      <arglist>(const std::string &amp;group) const </arglist>
    </member>
    <member kind="function">
      <type>const JointModelGroup *</type>
      <name>getJointModelGroup</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>adb5b553336174187f587e42ca187f110</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>JointModelGroup *</type>
      <name>getJointModelGroup</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>aa3b68bf0980355638f923091988992f5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModelGroup * &gt; &amp;</type>
      <name>getJointModelGroups</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a4b8f8080de3fccdeebccd42b22e6d95a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; JointModelGroup * &gt; &amp;</type>
      <name>getJointModelGroups</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a8d34a60aad1fb7b536182c7930d327da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getJointModelGroupNames</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a9da77a181463e5646dc1daab73148da2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasEndEffector</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a1e28bdaacbcdcba7e94e414844467bc2</anchor>
      <arglist>(const std::string &amp;eef) const </arglist>
    </member>
    <member kind="function">
      <type>const JointModelGroup *</type>
      <name>getEndEffector</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a92a2dab92f6a0d43bebb297ed80cf14b</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>JointModelGroup *</type>
      <name>getEndEffector</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>a98652ff31857462db512c0fb06966dad</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const JointModelGroup * &gt; &amp;</type>
      <name>getEndEffectors</name>
      <anchorfile>classmoveit_1_1core_1_1RobotModel.html</anchorfile>
      <anchor>ae459dc09c29ed4a69a5b0cadd50184d0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit::core::RobotState</name>
    <filename>classmoveit_1_1core_1_1RobotState.html</filename>
    <member kind="function">
      <type>void</type>
      <name>computeAABB</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae3fed1d47cb2db27716dfa9eb2d256d8</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;aabb) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeAABB</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ad6919686feee89138316eb279794b71f</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getFrameTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>af7482d79ce5b29e0b7b97d0f7f187af4</anchor>
      <arglist>(const std::string &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getFrameTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ab04e7315202498cbb916403087785bb5</anchor>
      <arglist>(const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>const JointModel *</type>
      <name>getJointModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a19d4770499d4299aa64e399fc4624c55</anchor>
      <arglist>(const std::string &amp;joint) const </arglist>
    </member>
    <member kind="function">
      <type>const JointModelGroup *</type>
      <name>getJointModelGroup</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ad6071ac5f38e7f2f85007071f03064ad</anchor>
      <arglist>(const std::string &amp;group) const </arglist>
    </member>
    <member kind="function">
      <type>const LinkModel *</type>
      <name>getLinkModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>acc56861ebbcb9e1face52342db0605fa</anchor>
      <arglist>(const std::string &amp;link) const </arglist>
    </member>
    <member kind="function">
      <type>random_numbers::RandomNumberGenerator &amp;</type>
      <name>getRandomNumberGenerator</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae63329caf8ee84e856ae3cee0db069f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRobotMarkers</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a0661cf8110170e70f198265ddf43d161</anchor>
      <arglist>(visualization_msgs::MarkerArray &amp;arr, const std::vector&lt; std::string &gt; &amp;link_names, const std_msgs::ColorRGBA &amp;color, const std::string &amp;ns, const ros::Duration &amp;dur, bool include_attached=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRobotMarkers</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a00d5c9b6ef90a97151db8b7859323491</anchor>
      <arglist>(visualization_msgs::MarkerArray &amp;arr, const std::vector&lt; std::string &gt; &amp;link_names, const std_msgs::ColorRGBA &amp;color, const std::string &amp;ns, const ros::Duration &amp;dur, bool include_attached=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRobotMarkers</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a424e4e330bc588be4cc626cd640e69fe</anchor>
      <arglist>(visualization_msgs::MarkerArray &amp;arr, const std::vector&lt; std::string &gt; &amp;link_names, bool include_attached=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRobotMarkers</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a801148a04dec7d46b4b7413c94a502e7</anchor>
      <arglist>(visualization_msgs::MarkerArray &amp;arr, const std::vector&lt; std::string &gt; &amp;link_names, bool include_attached=false)</arglist>
    </member>
    <member kind="function">
      <type>const RobotModelConstPtr &amp;</type>
      <name>getRobotModel</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a87d1924fc3e0cb79633a4a3a3928a6cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getStateTreeString</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a8067564df6a8058c24f34f217cb5a309</anchor>
      <arglist>(const std::string &amp;prefix=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getVariableCount</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a711eb6a22c6cc8fbe6de0df2290c5bf0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getVariableNames</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a1893faa2e1d8265d656fed9d3b896256</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>knowsFrameTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a9f83a63a1f2acd443ccf8f6b5275e7bb</anchor>
      <arglist>(const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>RobotState &amp;</type>
      <name>operator=</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a098586db3542ccfea3e71327784f9d21</anchor>
      <arglist>(const RobotState &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDirtyInfo</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a2d2eb661ce024a2da591f9841e164233</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStateInfo</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a4c38312ae3f64fab3b6cd34d2690bec5</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStatePositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a7e6822adeda0ecd05014d2bf18b0f39b</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>af0f3e487de8c1ae809c044990b353841</anchor>
      <arglist>(const Eigen::Isometry3d &amp;transform, std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a04896588c334427e45b9c4b565123c88</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobotState</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac5944765b49ee074030c01010af36c07</anchor>
      <arglist>(const RobotModelConstPtr &amp;robot_model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobotState</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae226721d6aff0342786c2acdc53a5d20</anchor>
      <arglist>(const RobotState &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RobotState</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a2ad6bc5b3cbc98fddb44636a6de70734</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a72e5062115857bc793f0ba6be6aca059</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a7ef2e5b18be3f099386da99421aa7d1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a04b9343fdf57f04895fa21c326164d0f</anchor>
      <arglist>(const double *position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa24651e53f6881da69c5a59f3ae767c3</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ad08c92a61d43013714ec3894cd67a297</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;variable_map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ab5616af324fcb6975c6c330c9aa83341</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;variable_map, std::vector&lt; std::string &gt; &amp;missing_variables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a57e8b16dd0b4febefdbf2b5c87159c93</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;variable_names, const std::vector&lt; double &gt; &amp;variable_position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariablePosition</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a54879052daa602ea0319cbe3ded82ff3</anchor>
      <arglist>(const std::string &amp;variable, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariablePosition</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a3c2dfa62fcf0be2cba3dc7019ba48b11</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVariablePosition</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a8da6f0ff56cf9006269187be850fabcf</anchor>
      <arglist>(const std::string &amp;variable) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVariablePosition</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae4b8e683184d75915b20994430fb6ac4</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a817eb1145dae7555ce73d49282f22a83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getVariableVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a8b0ce76545fcb5676ae79f3e463c8223</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getVariableVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ad6c7905cb0bbf40bbca803bbf15ca073</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a61b8f09e3940519f1abc6f6862305e2f</anchor>
      <arglist>(const double *velocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa9f4f42c2e6eef2cccfd03c9dcb2de2b</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;velocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae60249e7b60f24f0341bf4444e7b9d3a</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;variable_map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa7b66e33497940b7247027b37971e22e</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;variable_map, std::vector&lt; std::string &gt; &amp;missing_variables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a6d69673f17f401673554df956750a286</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;variable_names, const std::vector&lt; double &gt; &amp;variable_velocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableVelocity</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a44192d552292408eb9a399e56921a04b</anchor>
      <arglist>(const std::string &amp;variable, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableVelocity</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a7a8fb3d23f2eef00bd0240792a665003</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVariableVelocity</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a297caf241344a2cb09011d7f2e4c13c7</anchor>
      <arglist>(const std::string &amp;variable) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVariableVelocity</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aff3ccfeb679c676dd9b231de35fd2fff</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a10c4bcc9c84a1ec498022f5502fc2a80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getVariableAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac1bc420fc8b251fefe54606cc47796bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getVariableAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>adb813af7b61d4de0e710482dcd002f84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac12d8f11d2315ad931d1d0985485ae44</anchor>
      <arglist>(const double *acceleration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a1ae5cd915dade0d9de3204e587c42f33</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;acceleration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a37b20205c4e71f85bc4ac228f6741496</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;variable_map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a97c9005b23b884749681dc865d53827e</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;variable_map, std::vector&lt; std::string &gt; &amp;missing_variables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>afe941fb64893e32fd47b9ca15c50c22b</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;variable_names, const std::vector&lt; double &gt; &amp;variable_acceleration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableAcceleration</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a064a06cc78d55f8fe11b89dbb30ab9d2</anchor>
      <arglist>(const std::string &amp;variable, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableAcceleration</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a0d27086d61f309ed8f2456e6fbdab7fa</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVariableAcceleration</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a4f4f4cdac58e2bd982617f49095d348c</anchor>
      <arglist>(const std::string &amp;variable) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVariableAcceleration</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a4e1feb36e76daaf478c5ca46bf974d0e</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a3e0329cff9393d35610a89b1597585da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a91417c4a4bf74a4d83e2a6c05ccdae8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a094269081c1bab737622d5a297814640</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa4cac190ffed854f609b4552fe247554</anchor>
      <arglist>(const double *effort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a3ff0d3de4afdc6e4ffd67e7590fe3889</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;effort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a7041f8ec78dd9c4deacd8c79e0c256bc</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;variable_map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aca70a4a90dc885c0595be5df543e3e52</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;variable_map, std::vector&lt; std::string &gt; &amp;missing_variables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a7bff2c1fe8d43b62608a5aed102e6248</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;variable_names, const std::vector&lt; double &gt; &amp;variable_acceleration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a22b8449e42780b49c0d5ea59d223ca0e</anchor>
      <arglist>(const std::string &amp;variable, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a3f0141f7927f65d3319ff3f4de3dcf9d</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>adf5969c76e1b13c1bc7ebb09e6df7f92</anchor>
      <arglist>(const std::string &amp;variable) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ad3631e0c72797cf35fe82b3f79c64e6b</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>afd01134540eb6ccc57e75d1f8c4f48d5</anchor>
      <arglist>(const std::string &amp;joint_name, const double *position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac235f41e7081e643d7916a622c880cb6</anchor>
      <arglist>(const std::string &amp;joint_name, const std::vector&lt; double &gt; &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae9756c9ca5692bf722c9c3dcb11884d0</anchor>
      <arglist>(const JointModel *joint, const std::vector&lt; double &gt; &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aade96e25801522c3f8ca9a18996ed299</anchor>
      <arglist>(const JointModel *joint, const double *position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a6f29e39d4b1bad50ac078e595abaaf9c</anchor>
      <arglist>(const std::string &amp;joint_name, const Eigen::Isometry3d &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>acf6603873541f8cf04476b95d43a4d5b</anchor>
      <arglist>(const JointModel *joint, const Eigen::Isometry3d &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a1cf1b8bd7eee51204e62cd16945e61ab</anchor>
      <arglist>(const JointModel *joint, const double *velocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointEfforts</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a13744e79585655d2f38b331237850e89</anchor>
      <arglist>(const JointModel *joint, const double *effort)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getJointPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a14023afa3ee26ce96696df23ba1a13dc</anchor>
      <arglist>(const std::string &amp;joint_name) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getJointPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ab350d9a42ea6e5dd52aa52d3e5bb7f87</anchor>
      <arglist>(const JointModel *joint) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getJointVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a4a01827dd9d15cf05adbed01e62e65c6</anchor>
      <arglist>(const std::string &amp;joint_name) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getJointVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae94b8e5936e8c76a733cd961b25809e8</anchor>
      <arglist>(const JointModel *joint) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getJointAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a8c6ffabdd8f55fa301752124ddc1d09e</anchor>
      <arglist>(const std::string &amp;joint_name) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getJointAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a27357e977aaa7b2079e9007d8c7985a9</anchor>
      <arglist>(const JointModel *joint) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getJointEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae4fd812261eabf99a747f2deb996f5d5</anchor>
      <arglist>(const std::string &amp;joint_name) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getJointEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a462a29482b78c12a5e1454a14dd71f49</anchor>
      <arglist>(const JointModel *joint) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a564140d144754d149b292e70c4c59b55</anchor>
      <arglist>(const std::string &amp;joint_group_name, const double *gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aaf00ec8b048e7b23638858d2c1e0f56a</anchor>
      <arglist>(const std::string &amp;joint_group_name, const std::vector&lt; double &gt; &amp;gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ab4fa76fc793c057a393723f9fd803005</anchor>
      <arglist>(const JointModelGroup *group, const std::vector&lt; double &gt; &amp;gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ad7d704fa01a95674cf078d72663c9407</anchor>
      <arglist>(const JointModelGroup *group, const double *gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae6514773254b090a08bcf70e767c0ec0</anchor>
      <arglist>(const std::string &amp;joint_group_name, const Eigen::VectorXd &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>afb423a4c80461e21d82bc48e786b8f70</anchor>
      <arglist>(const JointModelGroup *group, const Eigen::VectorXd &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aab69ae00f6d9c0d0249299115afcf7a0</anchor>
      <arglist>(const std::string &amp;joint_group_name, std::vector&lt; double &gt; &amp;gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ab5fe4c970f93b5b61eac4938df379d1d</anchor>
      <arglist>(const std::string &amp;joint_group_name, double *gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>adf36fc42a72d459b0914d68e8445e71d</anchor>
      <arglist>(const JointModelGroup *group, std::vector&lt; double &gt; &amp;gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a89f608c6672af9f1e8b8f6b1bb49a3b5</anchor>
      <arglist>(const JointModelGroup *group, double *gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a7e10394fa889034ea4bafc76b3e0eb6a</anchor>
      <arglist>(const std::string &amp;joint_group_name, Eigen::VectorXd &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a6cb2dbde5e026ac4b8d5910bebbd6f31</anchor>
      <arglist>(const JointModelGroup *group, Eigen::VectorXd &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a4c3dc21cb7e8b21d0552677a3aeb819e</anchor>
      <arglist>(const std::string &amp;joint_group_name, const double *gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ab49181294c12ad430dbf8bc355a1a7c9</anchor>
      <arglist>(const std::string &amp;joint_group_name, const std::vector&lt; double &gt; &amp;gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aab2ddb77ab2d9d2e36d8539a3bce46b8</anchor>
      <arglist>(const JointModelGroup *group, const std::vector&lt; double &gt; &amp;gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ab79153ad68fcf0ac2245454257d38e6b</anchor>
      <arglist>(const JointModelGroup *group, const double *gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a61da596d4c3dd5e4b6025841c7ff03f2</anchor>
      <arglist>(const std::string &amp;joint_group_name, const Eigen::VectorXd &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a992977b13217742e2f24317416c8ab79</anchor>
      <arglist>(const JointModelGroup *group, const Eigen::VectorXd &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a41ef08d16080de1dee8cb580bac8abfc</anchor>
      <arglist>(const std::string &amp;joint_group_name, std::vector&lt; double &gt; &amp;gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a75db0c8d9bc3410217e3143a674ac9b6</anchor>
      <arglist>(const std::string &amp;joint_group_name, double *gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a681b6e98c7db106b59c450e1df627e58</anchor>
      <arglist>(const JointModelGroup *group, std::vector&lt; double &gt; &amp;gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a600dada09d9727acaded9b967f772ff0</anchor>
      <arglist>(const JointModelGroup *group, double *gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a8d96691025fbdf2ff100565fa8296e5e</anchor>
      <arglist>(const std::string &amp;joint_group_name, Eigen::VectorXd &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>adc22ebe2a13f75ca24d093a20ab715b2</anchor>
      <arglist>(const JointModelGroup *group, Eigen::VectorXd &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a47eb1edf2046387de44c3a9dee3433e6</anchor>
      <arglist>(const std::string &amp;joint_group_name, const double *gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a1b8f2f64d8ea38940ec7e9d0e008b1a6</anchor>
      <arglist>(const std::string &amp;joint_group_name, const std::vector&lt; double &gt; &amp;gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a98b615c67fd8b679353178e117b490d8</anchor>
      <arglist>(const JointModelGroup *group, const std::vector&lt; double &gt; &amp;gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae3531eb47e70411aff7ebb09a41a8ae4</anchor>
      <arglist>(const JointModelGroup *group, const double *gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a2808d325172215c6da0a60269ff6fcc1</anchor>
      <arglist>(const std::string &amp;joint_group_name, const Eigen::VectorXd &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a3ada6d98116cf7c0d39eb90db1c0ff2c</anchor>
      <arglist>(const JointModelGroup *group, const Eigen::VectorXd &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a30c5c6354780ea1b8be8e38a2d1c647d</anchor>
      <arglist>(const std::string &amp;joint_group_name, std::vector&lt; double &gt; &amp;gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>add05aedf85304ecbe2c87e7677d72eaf</anchor>
      <arglist>(const std::string &amp;joint_group_name, double *gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa588cda32e3383a36f289762740d03e2</anchor>
      <arglist>(const JointModelGroup *group, std::vector&lt; double &gt; &amp;gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aef97fc205ef6e31feeeb48c7841a2b18</anchor>
      <arglist>(const JointModelGroup *group, double *gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a2c3fa435be294bd2918d2278488f1bd4</anchor>
      <arglist>(const std::string &amp;joint_group_name, Eigen::VectorXd &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>accc4d1a0f301547ff8e6980f384d4f03</anchor>
      <arglist>(const JointModelGroup *group, Eigen::VectorXd &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableValues</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa0f5fd04def8787f8e5bea24e6252276</anchor>
      <arglist>(const sensor_msgs::JointState &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToDefaultValues</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aba31c6f758e3dabd32c1acbd069e189e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setToDefaultValues</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a006f802f744a58941fff5e3845cb8640</anchor>
      <arglist>(const JointModelGroup *group, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa28a400ac63222f07598c53c685d7144</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a658fa958cb7cba56251a0facfed22d51</anchor>
      <arglist>(const JointModelGroup *group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a290074c8e1ea4e480ed9af78b5aa99a5</anchor>
      <arglist>(const JointModelGroup *group, random_numbers::RandomNumberGenerator &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToRandomPositionsNearBy</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a4f0f2685e224216449a6117661d3b4fa</anchor>
      <arglist>(const JointModelGroup *group, const RobotState &amp;near, double distance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToRandomPositionsNearBy</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a6abddbcfca9b0a1f63b96dc964d28af9</anchor>
      <arglist>(const JointModelGroup *group, const RobotState &amp;near, const std::vector&lt; double &gt; &amp;distances)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateCollisionBodyTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>afa1f72a766bdf75d81f4404058322576</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLinkTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a8778df1884c3caaf47558c939832cd9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aaec5557d55b862d9dd832b3d4c221836</anchor>
      <arglist>(bool force=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateStateWithLinkAt</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a6cc3a80dbf59387597d65505623bb78e</anchor>
      <arglist>(const std::string &amp;link_name, const Eigen::Isometry3d &amp;transform, bool backward=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateStateWithLinkAt</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a43bb5bb7db541e93f0102b9f290603ff</anchor>
      <arglist>(const LinkModel *link, const Eigen::Isometry3d &amp;transform, bool backward=false)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getGlobalLinkTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a038dc6e7063fbc24cfb3d10d8bbb880d</anchor>
      <arglist>(const std::string &amp;link_name)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getGlobalLinkTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a76797b5f33b8449dcadf17c825a6ba4c</anchor>
      <arglist>(const LinkModel *link)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getCollisionBodyTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>af104f914b69a3703349ae3f2fd9404bc</anchor>
      <arglist>(const std::string &amp;link_name, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getCollisionBodyTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a8858380ce3a1c053fc0f8adbd40ea3ac</anchor>
      <arglist>(const LinkModel *link, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getJointTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae5001e9c5b7c22d5c8e300f7f8f81a70</anchor>
      <arglist>(const std::string &amp;joint_name)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getJointTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a34aa4cffea8cb555cc1e8b5d9fa11be4</anchor>
      <arglist>(const JointModel *joint)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getGlobalLinkTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ada011a4a3bbe1b207c8119ec534a1e23</anchor>
      <arglist>(const std::string &amp;link_name) const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getGlobalLinkTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae0c9931c1790f0de60073ca4e56ab4cc</anchor>
      <arglist>(const LinkModel *link) const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getCollisionBodyTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ad0fbac4e2e2fc18c9341da9e271cf2cf</anchor>
      <arglist>(const std::string &amp;link_name, std::size_t index) const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getCollisionBodyTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a4aa8c6a9a798141c5cebf7134c7df74c</anchor>
      <arglist>(const LinkModel *link, std::size_t index) const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getJointTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aea443160079811f45fcc9eafcabbf5b2</anchor>
      <arglist>(const std::string &amp;joint_name) const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getJointTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aabbd41a28a1a7698fd34190d9d180e50</anchor>
      <arglist>(const JointModel *joint) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirtyJointTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a4e300e4ba33b0665087a31994a187b83</anchor>
      <arglist>(const JointModel *joint) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirtyLinkTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a2ee58f17572e83bc0b2a6d070d0f0fa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirtyCollisionBodyTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac2ba5404995440a1c544f1a07bf5b9e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a0b5e481c732e45c2f087203fe1158408</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a69bc5aacb43952be8ce1c03648b38be3</anchor>
      <arglist>(const RobotState &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a01ebc835d9faa5f79ef9d253ba48e78d</anchor>
      <arglist>(const RobotState &amp;other, const JointModelGroup *joint_group) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a2e64fcb067835b6f5eb5968e50d8b078</anchor>
      <arglist>(const RobotState &amp;other, const JointModel *joint) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>af3bd19cc2086559bc938f7c44b04f7fd</anchor>
      <arglist>(const RobotState &amp;to, double t, RobotState &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac3ad1717fafe43aa05dd649a6244b8fe</anchor>
      <arglist>(const RobotState &amp;to, double t, RobotState &amp;state, const JointModelGroup *joint_group) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae384336e0dd8c62719a38867f51706c3</anchor>
      <arglist>(const RobotState &amp;to, double t, RobotState &amp;state, const JointModel *joint) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a8250deeb3a2565ca34cbd87d18ee33ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aca89bd2b257eef35f03e424f1d5c2ff0</anchor>
      <arglist>(const JointModelGroup *joint_group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a17b78d94170a4e452f00b56f98b5ed5b</anchor>
      <arglist>(const JointModel *joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforcePositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ad7da8630de3e82aa31f4671b980aca74</anchor>
      <arglist>(const JointModel *joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceVelocityBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae52693dfeb9235aaaa288cb7ed01b0cb</anchor>
      <arglist>(const JointModel *joint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a30ecc8c10d1ff3fa07bfd0f96de10d0a</anchor>
      <arglist>(double margin=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aca92fb6f99d06f25062772279db9d536</anchor>
      <arglist>(const JointModelGroup *joint_group, double margin=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa84b7b4fdbd7b50359c488f247ecb743</anchor>
      <arglist>(const JointModel *joint, double margin=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a716b896c476c63275d6f35a2752f0ac1</anchor>
      <arglist>(const JointModel *joint, double margin=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesVelocityBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa672fc57c2488a8026150f374a172975</anchor>
      <arglist>(const JointModel *joint, double margin=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, const JointModel * &gt;</type>
      <name>getMinDistanceToPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a379f94ed1b2b34294154784011e16260</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, const JointModel * &gt;</type>
      <name>getMinDistanceToPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a4408aa58e0aa2cdc09001a8b88be86e4</anchor>
      <arglist>(const JointModelGroup *group) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, const JointModel * &gt;</type>
      <name>getMinDistanceToPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a20bb2f9898e71926fc7cb12d415a9098</anchor>
      <arglist>(const std::vector&lt; const JointModel * &gt; &amp;joints) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidVelocityMove</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a339436ad808b9a74a9d6bdc605ab422c</anchor>
      <arglist>(const RobotState &amp;other, const JointModelGroup *group, double dt) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachBody</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a5969cc58a617a8c117cbb888e0034b4b</anchor>
      <arglist>(AttachedBody *attached_body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachBody</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a6204f7ad66163fa73f713d4897c25a77</anchor>
      <arglist>(const std::string &amp;id, const std::vector&lt; shapes::ShapeConstPtr &gt; &amp;shapes, const EigenSTL::vector_Isometry3d &amp;attach_trans, const std::set&lt; std::string &gt; &amp;touch_links, const std::string &amp;link_name, const trajectory_msgs::JointTrajectory &amp;detach_posture=trajectory_msgs::JointTrajectory())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachBody</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a9fd2ac241124639ed77b16a995774725</anchor>
      <arglist>(const std::string &amp;id, const std::vector&lt; shapes::ShapeConstPtr &gt; &amp;shapes, const EigenSTL::vector_Isometry3d &amp;attach_trans, const std::vector&lt; std::string &gt; &amp;touch_links, const std::string &amp;link_name, const trajectory_msgs::JointTrajectory &amp;detach_posture=trajectory_msgs::JointTrajectory())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAttachedBodies</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>af4de65ca2db679cd96d9cf67d504a088</anchor>
      <arglist>(std::vector&lt; const AttachedBody * &gt; &amp;attached_bodies) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAttachedBodies</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>adf69986ebea04951490f5f9a56a51c97</anchor>
      <arglist>(std::vector&lt; const AttachedBody * &gt; &amp;attached_bodies, const JointModelGroup *lm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAttachedBodies</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>acbea66366b164ccb0583d96b1a4e2058</anchor>
      <arglist>(std::vector&lt; const AttachedBody * &gt; &amp;attached_bodies, const LinkModel *lm) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clearAttachedBody</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a5c3129e7624ffe8c47dfaffee5c85560</anchor>
      <arglist>(const std::string &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAttachedBodies</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a683bbb0f9020ba6963c3717c0701488a</anchor>
      <arglist>(const LinkModel *link)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAttachedBodies</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a4eccb598b81de1f2b8238bb0f2f58acb</anchor>
      <arglist>(const JointModelGroup *group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAttachedBodies</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>af21a678724658a7c4da68373b0e98c7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AttachedBody *</type>
      <name>getAttachedBody</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac96982ef2db3a6db836f5caacf2ac53d</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAttachedBody</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac88fb2dde56e4859628103910400e91e</anchor>
      <arglist>(const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttachedBodyUpdateCallback</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a199bfec1bc2bcd2aaa8befa5efc1bbc8</anchor>
      <arglist>(const AttachedBodyCallback &amp;callback)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>allocMemory</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a37493c872f84e7ffc2641a0f5dd02d7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>checkCollisionTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>acb8d9b2b2efabe6bdb5a35f5931e87bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>checkJointTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aaba584f2351512f21469f44328e961b3</anchor>
      <arglist>(const JointModel *joint) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>checkLinkTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a3da1c4b6c7138e27fbc0e71d1d712ad6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a5ef542e6a83829db633e5035d6823fdc</anchor>
      <arglist>(const RobotState &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getMissingKeys</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a8a5598ddcdc0c229265a7605b1203c51</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;variable_map, std::vector&lt; std::string &gt; &amp;missing_variables) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getStateTreeJointString</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac649f3f8c5f940d69d4ac0ed278561db</anchor>
      <arglist>(std::ostream &amp;ss, const JointModel *jm, const std::string &amp;pfx0, bool last) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>markAcceleration</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>adc6763c635c0df616870394ac8369b23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>markDirtyJointTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac3da2c4599242441f59067a6dcdeb414</anchor>
      <arglist>(const JointModel *joint)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>markDirtyJointTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aeaef942ab9151ea8ecffdf95984b7bf2</anchor>
      <arglist>(const JointModelGroup *group)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>markEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac22ba2298dc880bd730dc345ab163644</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>markVelocity</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac0c440ecdaf804fb3a8cf3b28ea90c5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateLinkTransformsInternal</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a96e9201cfcac3ac6e8149bae78c4899b</anchor>
      <arglist>(const JointModel *start)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateMimicJoint</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa013b20a8228933eefb20c75ac1c6373</anchor>
      <arglist>(const JointModel *joint)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>MOVEIT_DEPRECATED void</type>
      <name>updateMimicJoint</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aca893475d24c747b27f059daa0737214</anchor>
      <arglist>(const std::vector&lt; const JointModel * &gt; &amp;mim)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateMimicJoints</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a2ecf5f6b83d85746dd797d92e191c800</anchor>
      <arglist>(const JointModelGroup *group)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>acceleration_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a5cf16e481b6ac17028859db1d264bc4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, AttachedBody * &gt;</type>
      <name>attached_body_map_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a37ac12a124e556202aa7ed17b6a5e0e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AttachedBodyCallback</type>
      <name>attached_body_update_callback_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aec1dac95371f25651ec6665d62d57fee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const JointModel *</type>
      <name>dirty_collision_body_transforms_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac3bc3df0f595e5f4e263f6918e55587c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned char *</type>
      <name>dirty_joint_transforms_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a466b46c2ed17ed5b9d3b6d49d92ad3bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const JointModel *</type>
      <name>dirty_link_transforms_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>abfe2d347158e34651a72fb8846398b4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>effort_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ad033a1df94612ffed3d5a32a61b5c622</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Isometry3d *</type>
      <name>global_collision_body_transforms_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a9a1b84afe76b0eb6bcf49e8a95b7951c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Isometry3d *</type>
      <name>global_link_transforms_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a963901d995f1ad657966f02873fb43fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>has_acceleration_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a3baab0ada89388b20e5003091d624f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>has_effort_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a803277735587d3e30b649619c8f28758</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>has_velocity_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>af0207922496f57d8ead6c837efda81b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>void *</type>
      <name>memory_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>abee1bf36a4ab8f3d95094bd6ee11fb3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>position_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a6728700f5cb22266f80c2030d98d8313</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>random_numbers::RandomNumberGenerator *</type>
      <name>rng_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ad82858a42c53559dfed9d00733f7f2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RobotModelConstPtr</type>
      <name>robot_model_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a44e4e7c451200b44ca23760e6318a7de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Isometry3d *</type>
      <name>variable_joint_transforms_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ad46e590ed2595f6b3855ad5e780df810</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>velocity_</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>adb1722cbe2ef8e26d97b15813fbe9dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a72e5062115857bc793f0ba6be6aca059</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a7ef2e5b18be3f099386da99421aa7d1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a04b9343fdf57f04895fa21c326164d0f</anchor>
      <arglist>(const double *position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa24651e53f6881da69c5a59f3ae767c3</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ad08c92a61d43013714ec3894cd67a297</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;variable_map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ab5616af324fcb6975c6c330c9aa83341</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;variable_map, std::vector&lt; std::string &gt; &amp;missing_variables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariablePositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a57e8b16dd0b4febefdbf2b5c87159c93</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;variable_names, const std::vector&lt; double &gt; &amp;variable_position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariablePosition</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a54879052daa602ea0319cbe3ded82ff3</anchor>
      <arglist>(const std::string &amp;variable, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariablePosition</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a3c2dfa62fcf0be2cba3dc7019ba48b11</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVariablePosition</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a8da6f0ff56cf9006269187be850fabcf</anchor>
      <arglist>(const std::string &amp;variable) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVariablePosition</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae4b8e683184d75915b20994430fb6ac4</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a817eb1145dae7555ce73d49282f22a83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getVariableVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a8b0ce76545fcb5676ae79f3e463c8223</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getVariableVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ad6c7905cb0bbf40bbca803bbf15ca073</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a61b8f09e3940519f1abc6f6862305e2f</anchor>
      <arglist>(const double *velocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa9f4f42c2e6eef2cccfd03c9dcb2de2b</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;velocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae60249e7b60f24f0341bf4444e7b9d3a</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;variable_map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa7b66e33497940b7247027b37971e22e</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;variable_map, std::vector&lt; std::string &gt; &amp;missing_variables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a6d69673f17f401673554df956750a286</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;variable_names, const std::vector&lt; double &gt; &amp;variable_velocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableVelocity</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a44192d552292408eb9a399e56921a04b</anchor>
      <arglist>(const std::string &amp;variable, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableVelocity</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a7a8fb3d23f2eef00bd0240792a665003</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVariableVelocity</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a297caf241344a2cb09011d7f2e4c13c7</anchor>
      <arglist>(const std::string &amp;variable) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVariableVelocity</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aff3ccfeb679c676dd9b231de35fd2fff</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a10c4bcc9c84a1ec498022f5502fc2a80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getVariableAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac1bc420fc8b251fefe54606cc47796bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getVariableAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>adb813af7b61d4de0e710482dcd002f84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac12d8f11d2315ad931d1d0985485ae44</anchor>
      <arglist>(const double *acceleration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a1ae5cd915dade0d9de3204e587c42f33</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;acceleration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a37b20205c4e71f85bc4ac228f6741496</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;variable_map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a97c9005b23b884749681dc865d53827e</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;variable_map, std::vector&lt; std::string &gt; &amp;missing_variables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>afe941fb64893e32fd47b9ca15c50c22b</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;variable_names, const std::vector&lt; double &gt; &amp;variable_acceleration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableAcceleration</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a064a06cc78d55f8fe11b89dbb30ab9d2</anchor>
      <arglist>(const std::string &amp;variable, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableAcceleration</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a0d27086d61f309ed8f2456e6fbdab7fa</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVariableAcceleration</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a4f4f4cdac58e2bd982617f49095d348c</anchor>
      <arglist>(const std::string &amp;variable) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVariableAcceleration</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a4e1feb36e76daaf478c5ca46bf974d0e</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a3e0329cff9393d35610a89b1597585da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a91417c4a4bf74a4d83e2a6c05ccdae8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a094269081c1bab737622d5a297814640</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa4cac190ffed854f609b4552fe247554</anchor>
      <arglist>(const double *effort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a3ff0d3de4afdc6e4ffd67e7590fe3889</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;effort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a7041f8ec78dd9c4deacd8c79e0c256bc</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;variable_map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aca70a4a90dc885c0595be5df543e3e52</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;variable_map, std::vector&lt; std::string &gt; &amp;missing_variables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a7bff2c1fe8d43b62608a5aed102e6248</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;variable_names, const std::vector&lt; double &gt; &amp;variable_acceleration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a22b8449e42780b49c0d5ea59d223ca0e</anchor>
      <arglist>(const std::string &amp;variable, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a3f0141f7927f65d3319ff3f4de3dcf9d</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>adf5969c76e1b13c1bc7ebb09e6df7f92</anchor>
      <arglist>(const std::string &amp;variable) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVariableEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ad3631e0c72797cf35fe82b3f79c64e6b</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>afd01134540eb6ccc57e75d1f8c4f48d5</anchor>
      <arglist>(const std::string &amp;joint_name, const double *position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac235f41e7081e643d7916a622c880cb6</anchor>
      <arglist>(const std::string &amp;joint_name, const std::vector&lt; double &gt; &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae9756c9ca5692bf722c9c3dcb11884d0</anchor>
      <arglist>(const JointModel *joint, const std::vector&lt; double &gt; &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aade96e25801522c3f8ca9a18996ed299</anchor>
      <arglist>(const JointModel *joint, const double *position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a6f29e39d4b1bad50ac078e595abaaf9c</anchor>
      <arglist>(const std::string &amp;joint_name, const Eigen::Isometry3d &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>acf6603873541f8cf04476b95d43a4d5b</anchor>
      <arglist>(const JointModel *joint, const Eigen::Isometry3d &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a1cf1b8bd7eee51204e62cd16945e61ab</anchor>
      <arglist>(const JointModel *joint, const double *velocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointEfforts</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a13744e79585655d2f38b331237850e89</anchor>
      <arglist>(const JointModel *joint, const double *effort)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getJointPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a14023afa3ee26ce96696df23ba1a13dc</anchor>
      <arglist>(const std::string &amp;joint_name) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getJointPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ab350d9a42ea6e5dd52aa52d3e5bb7f87</anchor>
      <arglist>(const JointModel *joint) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getJointVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a4a01827dd9d15cf05adbed01e62e65c6</anchor>
      <arglist>(const std::string &amp;joint_name) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getJointVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae94b8e5936e8c76a733cd961b25809e8</anchor>
      <arglist>(const JointModel *joint) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getJointAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a8c6ffabdd8f55fa301752124ddc1d09e</anchor>
      <arglist>(const std::string &amp;joint_name) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getJointAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a27357e977aaa7b2079e9007d8c7985a9</anchor>
      <arglist>(const JointModel *joint) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getJointEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae4fd812261eabf99a747f2deb996f5d5</anchor>
      <arglist>(const std::string &amp;joint_name) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getJointEffort</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a462a29482b78c12a5e1454a14dd71f49</anchor>
      <arglist>(const JointModel *joint) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a564140d144754d149b292e70c4c59b55</anchor>
      <arglist>(const std::string &amp;joint_group_name, const double *gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aaf00ec8b048e7b23638858d2c1e0f56a</anchor>
      <arglist>(const std::string &amp;joint_group_name, const std::vector&lt; double &gt; &amp;gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ab4fa76fc793c057a393723f9fd803005</anchor>
      <arglist>(const JointModelGroup *group, const std::vector&lt; double &gt; &amp;gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ad7d704fa01a95674cf078d72663c9407</anchor>
      <arglist>(const JointModelGroup *group, const double *gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae6514773254b090a08bcf70e767c0ec0</anchor>
      <arglist>(const std::string &amp;joint_group_name, const Eigen::VectorXd &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>afb423a4c80461e21d82bc48e786b8f70</anchor>
      <arglist>(const JointModelGroup *group, const Eigen::VectorXd &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aab69ae00f6d9c0d0249299115afcf7a0</anchor>
      <arglist>(const std::string &amp;joint_group_name, std::vector&lt; double &gt; &amp;gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ab5fe4c970f93b5b61eac4938df379d1d</anchor>
      <arglist>(const std::string &amp;joint_group_name, double *gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>adf36fc42a72d459b0914d68e8445e71d</anchor>
      <arglist>(const JointModelGroup *group, std::vector&lt; double &gt; &amp;gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a89f608c6672af9f1e8b8f6b1bb49a3b5</anchor>
      <arglist>(const JointModelGroup *group, double *gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a7e10394fa889034ea4bafc76b3e0eb6a</anchor>
      <arglist>(const std::string &amp;joint_group_name, Eigen::VectorXd &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a6cb2dbde5e026ac4b8d5910bebbd6f31</anchor>
      <arglist>(const JointModelGroup *group, Eigen::VectorXd &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a4c3dc21cb7e8b21d0552677a3aeb819e</anchor>
      <arglist>(const std::string &amp;joint_group_name, const double *gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ab49181294c12ad430dbf8bc355a1a7c9</anchor>
      <arglist>(const std::string &amp;joint_group_name, const std::vector&lt; double &gt; &amp;gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aab2ddb77ab2d9d2e36d8539a3bce46b8</anchor>
      <arglist>(const JointModelGroup *group, const std::vector&lt; double &gt; &amp;gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ab79153ad68fcf0ac2245454257d38e6b</anchor>
      <arglist>(const JointModelGroup *group, const double *gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a61da596d4c3dd5e4b6025841c7ff03f2</anchor>
      <arglist>(const std::string &amp;joint_group_name, const Eigen::VectorXd &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a992977b13217742e2f24317416c8ab79</anchor>
      <arglist>(const JointModelGroup *group, const Eigen::VectorXd &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a41ef08d16080de1dee8cb580bac8abfc</anchor>
      <arglist>(const std::string &amp;joint_group_name, std::vector&lt; double &gt; &amp;gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a75db0c8d9bc3410217e3143a674ac9b6</anchor>
      <arglist>(const std::string &amp;joint_group_name, double *gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a681b6e98c7db106b59c450e1df627e58</anchor>
      <arglist>(const JointModelGroup *group, std::vector&lt; double &gt; &amp;gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a600dada09d9727acaded9b967f772ff0</anchor>
      <arglist>(const JointModelGroup *group, double *gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a8d96691025fbdf2ff100565fa8296e5e</anchor>
      <arglist>(const std::string &amp;joint_group_name, Eigen::VectorXd &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupVelocities</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>adc22ebe2a13f75ca24d093a20ab715b2</anchor>
      <arglist>(const JointModelGroup *group, Eigen::VectorXd &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a47eb1edf2046387de44c3a9dee3433e6</anchor>
      <arglist>(const std::string &amp;joint_group_name, const double *gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a1b8f2f64d8ea38940ec7e9d0e008b1a6</anchor>
      <arglist>(const std::string &amp;joint_group_name, const std::vector&lt; double &gt; &amp;gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a98b615c67fd8b679353178e117b490d8</anchor>
      <arglist>(const JointModelGroup *group, const std::vector&lt; double &gt; &amp;gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae3531eb47e70411aff7ebb09a41a8ae4</anchor>
      <arglist>(const JointModelGroup *group, const double *gstate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a2808d325172215c6da0a60269ff6fcc1</anchor>
      <arglist>(const std::string &amp;joint_group_name, const Eigen::VectorXd &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a3ada6d98116cf7c0d39eb90db1c0ff2c</anchor>
      <arglist>(const JointModelGroup *group, const Eigen::VectorXd &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a30c5c6354780ea1b8be8e38a2d1c647d</anchor>
      <arglist>(const std::string &amp;joint_group_name, std::vector&lt; double &gt; &amp;gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>add05aedf85304ecbe2c87e7677d72eaf</anchor>
      <arglist>(const std::string &amp;joint_group_name, double *gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa588cda32e3383a36f289762740d03e2</anchor>
      <arglist>(const JointModelGroup *group, std::vector&lt; double &gt; &amp;gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aef97fc205ef6e31feeeb48c7841a2b18</anchor>
      <arglist>(const JointModelGroup *group, double *gstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a2c3fa435be294bd2918d2278488f1bd4</anchor>
      <arglist>(const std::string &amp;joint_group_name, Eigen::VectorXd &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyJointGroupAccelerations</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>accc4d1a0f301547ff8e6980f384d4f03</anchor>
      <arglist>(const JointModelGroup *group, Eigen::VectorXd &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setToIKSolverFrame</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a08aa8a30c5c40476f44397a9d32a9e3d</anchor>
      <arglist>(Eigen::Isometry3d &amp;pose, const kinematics::KinematicsBaseConstPtr &amp;solver)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setToIKSolverFrame</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa591f09030389fff10bd4dfd4cf5ac23</anchor>
      <arglist>(Eigen::Isometry3d &amp;pose, const std::string &amp;ik_frame)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFromIK</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ab816880027ef7e63bbdef22a0497cc78</anchor>
      <arglist>(const JointModelGroup *group, const geometry_msgs::Pose &amp;pose, unsigned int attempts=0, double timeout=0.0, const GroupStateValidityCallbackFn &amp;constraint=GroupStateValidityCallbackFn(), const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFromIK</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a8dceb7665fa4bdcf035aa284dc117333</anchor>
      <arglist>(const JointModelGroup *group, const geometry_msgs::Pose &amp;pose, const std::string &amp;tip, unsigned int attempts=0, double timeout=0.0, const GroupStateValidityCallbackFn &amp;constraint=GroupStateValidityCallbackFn(), const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFromIK</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>adbb7fa25dedf3b5e324786d9165b0d92</anchor>
      <arglist>(const JointModelGroup *group, const Eigen::Isometry3d &amp;pose, unsigned int attempts=0, double timeout=0.0, const GroupStateValidityCallbackFn &amp;constraint=GroupStateValidityCallbackFn(), const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFromIK</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a38943d2703ea1ec7b18b7f01a05d0d7b</anchor>
      <arglist>(const JointModelGroup *group, const Eigen::Isometry3d &amp;pose, const std::string &amp;tip, unsigned int attempts=0, double timeout=0.0, const GroupStateValidityCallbackFn &amp;constraint=GroupStateValidityCallbackFn(), const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFromIK</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a7dab73858059bedb7894cf4ec520c10d</anchor>
      <arglist>(const JointModelGroup *group, const Eigen::Isometry3d &amp;pose, const std::string &amp;tip, const std::vector&lt; double &gt; &amp;consistency_limits, unsigned int attempts=0, double timeout=0.0, const GroupStateValidityCallbackFn &amp;constraint=GroupStateValidityCallbackFn(), const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFromIK</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>abdf85ad8c682ebc14536e5f7648c5041</anchor>
      <arglist>(const JointModelGroup *group, const EigenSTL::vector_Isometry3d &amp;poses, const std::vector&lt; std::string &gt; &amp;tips, unsigned int attempts=0, double timeout=0.0, const GroupStateValidityCallbackFn &amp;constraint=GroupStateValidityCallbackFn(), const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFromIK</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a9631fb6403a8afab862bd1aa52959cdc</anchor>
      <arglist>(const JointModelGroup *group, const EigenSTL::vector_Isometry3d &amp;poses, const std::vector&lt; std::string &gt; &amp;tips, const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;consistency_limits, unsigned int attempts=0, double timeout=0.0, const GroupStateValidityCallbackFn &amp;constraint=GroupStateValidityCallbackFn(), const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFromIKSubgroups</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa3479b58416de8ea77b7f5125a546629</anchor>
      <arglist>(const JointModelGroup *group, const EigenSTL::vector_Isometry3d &amp;poses, const std::vector&lt; std::string &gt; &amp;tips, const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;consistency_limits, unsigned int attempts=0, double timeout=0.0, const GroupStateValidityCallbackFn &amp;constraint=GroupStateValidityCallbackFn(), const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFromDiffIK</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a7299fef43f47964c0180f981122a6058</anchor>
      <arglist>(const JointModelGroup *group, const Eigen::VectorXd &amp;twist, const std::string &amp;tip, double dt, const GroupStateValidityCallbackFn &amp;constraint=GroupStateValidityCallbackFn())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFromDiffIK</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae8970b6aaa9741f5ae858ae7b88bde85</anchor>
      <arglist>(const JointModelGroup *group, const geometry_msgs::Twist &amp;twist, const std::string &amp;tip, double dt, const GroupStateValidityCallbackFn &amp;constraint=GroupStateValidityCallbackFn())</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a356eead2cfdafcc7a608ef56ad108805</anchor>
      <arglist>(const JointModelGroup *group, std::vector&lt; RobotStatePtr &gt; &amp;traj, const LinkModel *link, const Eigen::Vector3d &amp;direction, bool global_reference_frame, double distance, const MaxEEFStep &amp;max_step, const JumpThreshold &amp;jump_threshold, const GroupStateValidityCallbackFn &amp;validCallback=GroupStateValidityCallbackFn(), const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions())</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac920b75bd636551e31bb36db696910f9</anchor>
      <arglist>(const JointModelGroup *group, std::vector&lt; RobotStatePtr &gt; &amp;traj, const LinkModel *link, const Eigen::Vector3d &amp;direction, bool global_reference_frame, double distance, double max_step, double jump_threshold_factor, const GroupStateValidityCallbackFn &amp;validCallback=GroupStateValidityCallbackFn(), const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions())</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a991d3e3273968b7e932b80bd7ec6226f</anchor>
      <arglist>(const JointModelGroup *group, std::vector&lt; RobotStatePtr &gt; &amp;traj, const LinkModel *link, const Eigen::Isometry3d &amp;target, bool global_reference_frame, const MaxEEFStep &amp;max_step, const JumpThreshold &amp;jump_threshold, const GroupStateValidityCallbackFn &amp;validCallback=GroupStateValidityCallbackFn(), const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions())</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>afda9ff554c1d5c92c7585ee9c87cc20c</anchor>
      <arglist>(const JointModelGroup *group, std::vector&lt; RobotStatePtr &gt; &amp;traj, const LinkModel *link, const Eigen::Isometry3d &amp;target, bool global_reference_frame, double max_step, double jump_threshold_factor, const GroupStateValidityCallbackFn &amp;validCallback=GroupStateValidityCallbackFn(), const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions())</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a25f69a60feea6bfc8f695b42b52db447</anchor>
      <arglist>(const JointModelGroup *group, std::vector&lt; RobotStatePtr &gt; &amp;traj, const LinkModel *link, const EigenSTL::vector_Isometry3d &amp;waypoints, bool global_reference_frame, const MaxEEFStep &amp;max_step, const JumpThreshold &amp;jump_threshold, const GroupStateValidityCallbackFn &amp;validCallback=GroupStateValidityCallbackFn(), const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions())</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aaa0993dd42573c9aafd67c04ae1efa6a</anchor>
      <arglist>(const JointModelGroup *group, std::vector&lt; RobotStatePtr &gt; &amp;traj, const LinkModel *link, const EigenSTL::vector_Isometry3d &amp;waypoints, bool global_reference_frame, double max_step, double jump_threshold_factor, const GroupStateValidityCallbackFn &amp;validCallback=GroupStateValidityCallbackFn(), const kinematics::KinematicsQueryOptions &amp;options=kinematics::KinematicsQueryOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getJacobian</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>af14fd5a53bf052f12eeb81237dbdc67b</anchor>
      <arglist>(const JointModelGroup *group, const LinkModel *link, const Eigen::Vector3d &amp;reference_point_position, Eigen::MatrixXd &amp;jacobian, bool use_quaternion_representation=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getJacobian</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a34222c39e51052096b654311d61e6fad</anchor>
      <arglist>(const JointModelGroup *group, const LinkModel *link, const Eigen::Vector3d &amp;reference_point_position, Eigen::MatrixXd &amp;jacobian, bool use_quaternion_representation=false)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>getJacobian</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a9973457b0caaad9cada49a45f773cf47</anchor>
      <arglist>(const JointModelGroup *group, const Eigen::Vector3d &amp;reference_point_position=Eigen::Vector3d(0.0, 0.0, 0.0)) const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>getJacobian</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a4b3d9fbe68e398702086b79e37f58db7</anchor>
      <arglist>(const JointModelGroup *group, const Eigen::Vector3d &amp;reference_point_position=Eigen::Vector3d(0.0, 0.0, 0.0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeVariableVelocity</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a23072a06d6e52401e7098e83d42a0d75</anchor>
      <arglist>(const JointModelGroup *jmg, Eigen::VectorXd &amp;qdot, const Eigen::VectorXd &amp;twist, const LinkModel *tip) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeVariableVelocity</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>afc43c8b0e761f33418bb414698274ec6</anchor>
      <arglist>(const JointModelGroup *jmg, Eigen::VectorXd &amp;qdot, const Eigen::VectorXd &amp;twist, const LinkModel *tip)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>integrateVariableVelocity</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ace036f11afd180c3e2f2be90bb78b21d</anchor>
      <arglist>(const JointModelGroup *jmg, const Eigen::VectorXd &amp;qdot, double dt, const GroupStateValidityCallbackFn &amp;constraint=GroupStateValidityCallbackFn())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>testJointSpaceJump</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa1eedd54d2b089de2501ac5da9d5ff66</anchor>
      <arglist>(const JointModelGroup *group, std::vector&lt; RobotStatePtr &gt; &amp;traj, const JumpThreshold &amp;jump_threshold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>testRelativeJointSpaceJump</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a3cbddb419088ade3a6785c7b0d24f5b8</anchor>
      <arglist>(const JointModelGroup *group, std::vector&lt; RobotStatePtr &gt; &amp;traj, double jump_threshold_factor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>testAbsoluteJointSpaceJump</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a126bd10ead41ab70180dabaa96824dec</anchor>
      <arglist>(const JointModelGroup *group, std::vector&lt; RobotStatePtr &gt; &amp;traj, double revolute_jump_threshold, double prismatic_jump_threshold)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariableValues</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa0f5fd04def8787f8e5bea24e6252276</anchor>
      <arglist>(const sensor_msgs::JointState &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToDefaultValues</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aba31c6f758e3dabd32c1acbd069e189e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setToDefaultValues</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a006f802f744a58941fff5e3845cb8640</anchor>
      <arglist>(const JointModelGroup *group, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa28a400ac63222f07598c53c685d7144</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a658fa958cb7cba56251a0facfed22d51</anchor>
      <arglist>(const JointModelGroup *group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToRandomPositions</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a290074c8e1ea4e480ed9af78b5aa99a5</anchor>
      <arglist>(const JointModelGroup *group, random_numbers::RandomNumberGenerator &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToRandomPositionsNearBy</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a4f0f2685e224216449a6117661d3b4fa</anchor>
      <arglist>(const JointModelGroup *group, const RobotState &amp;near, double distance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToRandomPositionsNearBy</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a6abddbcfca9b0a1f63b96dc964d28af9</anchor>
      <arglist>(const JointModelGroup *group, const RobotState &amp;near, const std::vector&lt; double &gt; &amp;distances)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateCollisionBodyTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>afa1f72a766bdf75d81f4404058322576</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLinkTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a8778df1884c3caaf47558c939832cd9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aaec5557d55b862d9dd832b3d4c221836</anchor>
      <arglist>(bool force=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateStateWithLinkAt</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a6cc3a80dbf59387597d65505623bb78e</anchor>
      <arglist>(const std::string &amp;link_name, const Eigen::Isometry3d &amp;transform, bool backward=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateStateWithLinkAt</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a43bb5bb7db541e93f0102b9f290603ff</anchor>
      <arglist>(const LinkModel *link, const Eigen::Isometry3d &amp;transform, bool backward=false)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getGlobalLinkTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a038dc6e7063fbc24cfb3d10d8bbb880d</anchor>
      <arglist>(const std::string &amp;link_name)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getGlobalLinkTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a76797b5f33b8449dcadf17c825a6ba4c</anchor>
      <arglist>(const LinkModel *link)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getCollisionBodyTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>af104f914b69a3703349ae3f2fd9404bc</anchor>
      <arglist>(const std::string &amp;link_name, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getCollisionBodyTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a8858380ce3a1c053fc0f8adbd40ea3ac</anchor>
      <arglist>(const LinkModel *link, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getJointTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae5001e9c5b7c22d5c8e300f7f8f81a70</anchor>
      <arglist>(const std::string &amp;joint_name)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getJointTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a34aa4cffea8cb555cc1e8b5d9fa11be4</anchor>
      <arglist>(const JointModel *joint)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getGlobalLinkTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ada011a4a3bbe1b207c8119ec534a1e23</anchor>
      <arglist>(const std::string &amp;link_name) const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getGlobalLinkTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae0c9931c1790f0de60073ca4e56ab4cc</anchor>
      <arglist>(const LinkModel *link) const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getCollisionBodyTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ad0fbac4e2e2fc18c9341da9e271cf2cf</anchor>
      <arglist>(const std::string &amp;link_name, std::size_t index) const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getCollisionBodyTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a4aa8c6a9a798141c5cebf7134c7df74c</anchor>
      <arglist>(const LinkModel *link, std::size_t index) const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getJointTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aea443160079811f45fcc9eafcabbf5b2</anchor>
      <arglist>(const std::string &amp;joint_name) const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getJointTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aabbd41a28a1a7698fd34190d9d180e50</anchor>
      <arglist>(const JointModel *joint) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirtyJointTransform</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a4e300e4ba33b0665087a31994a187b83</anchor>
      <arglist>(const JointModel *joint) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirtyLinkTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a2ee58f17572e83bc0b2a6d070d0f0fa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirtyCollisionBodyTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac2ba5404995440a1c544f1a07bf5b9e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a0b5e481c732e45c2f087203fe1158408</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a69bc5aacb43952be8ce1c03648b38be3</anchor>
      <arglist>(const RobotState &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a01ebc835d9faa5f79ef9d253ba48e78d</anchor>
      <arglist>(const RobotState &amp;other, const JointModelGroup *joint_group) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a2e64fcb067835b6f5eb5968e50d8b078</anchor>
      <arglist>(const RobotState &amp;other, const JointModel *joint) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>af3bd19cc2086559bc938f7c44b04f7fd</anchor>
      <arglist>(const RobotState &amp;to, double t, RobotState &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac3ad1717fafe43aa05dd649a6244b8fe</anchor>
      <arglist>(const RobotState &amp;to, double t, RobotState &amp;state, const JointModelGroup *joint_group) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae384336e0dd8c62719a38867f51706c3</anchor>
      <arglist>(const RobotState &amp;to, double t, RobotState &amp;state, const JointModel *joint) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a8250deeb3a2565ca34cbd87d18ee33ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aca89bd2b257eef35f03e424f1d5c2ff0</anchor>
      <arglist>(const JointModelGroup *joint_group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a17b78d94170a4e452f00b56f98b5ed5b</anchor>
      <arglist>(const JointModel *joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforcePositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ad7da8630de3e82aa31f4671b980aca74</anchor>
      <arglist>(const JointModel *joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceVelocityBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ae52693dfeb9235aaaa288cb7ed01b0cb</anchor>
      <arglist>(const JointModel *joint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a30ecc8c10d1ff3fa07bfd0f96de10d0a</anchor>
      <arglist>(double margin=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aca92fb6f99d06f25062772279db9d536</anchor>
      <arglist>(const JointModelGroup *joint_group, double margin=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa84b7b4fdbd7b50359c488f247ecb743</anchor>
      <arglist>(const JointModel *joint, double margin=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a716b896c476c63275d6f35a2752f0ac1</anchor>
      <arglist>(const JointModel *joint, double margin=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesVelocityBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>aa672fc57c2488a8026150f374a172975</anchor>
      <arglist>(const JointModel *joint, double margin=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, const JointModel * &gt;</type>
      <name>getMinDistanceToPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a379f94ed1b2b34294154784011e16260</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, const JointModel * &gt;</type>
      <name>getMinDistanceToPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a4408aa58e0aa2cdc09001a8b88be86e4</anchor>
      <arglist>(const JointModelGroup *group) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, const JointModel * &gt;</type>
      <name>getMinDistanceToPositionBounds</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a20bb2f9898e71926fc7cb12d415a9098</anchor>
      <arglist>(const std::vector&lt; const JointModel * &gt; &amp;joints) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidVelocityMove</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a339436ad808b9a74a9d6bdc605ab422c</anchor>
      <arglist>(const RobotState &amp;other, const JointModelGroup *group, double dt) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachBody</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a5969cc58a617a8c117cbb888e0034b4b</anchor>
      <arglist>(AttachedBody *attached_body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachBody</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a6204f7ad66163fa73f713d4897c25a77</anchor>
      <arglist>(const std::string &amp;id, const std::vector&lt; shapes::ShapeConstPtr &gt; &amp;shapes, const EigenSTL::vector_Isometry3d &amp;attach_trans, const std::set&lt; std::string &gt; &amp;touch_links, const std::string &amp;link_name, const trajectory_msgs::JointTrajectory &amp;detach_posture=trajectory_msgs::JointTrajectory())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachBody</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a9fd2ac241124639ed77b16a995774725</anchor>
      <arglist>(const std::string &amp;id, const std::vector&lt; shapes::ShapeConstPtr &gt; &amp;shapes, const EigenSTL::vector_Isometry3d &amp;attach_trans, const std::vector&lt; std::string &gt; &amp;touch_links, const std::string &amp;link_name, const trajectory_msgs::JointTrajectory &amp;detach_posture=trajectory_msgs::JointTrajectory())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAttachedBodies</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>af4de65ca2db679cd96d9cf67d504a088</anchor>
      <arglist>(std::vector&lt; const AttachedBody * &gt; &amp;attached_bodies) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAttachedBodies</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>adf69986ebea04951490f5f9a56a51c97</anchor>
      <arglist>(std::vector&lt; const AttachedBody * &gt; &amp;attached_bodies, const JointModelGroup *lm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAttachedBodies</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>acbea66366b164ccb0583d96b1a4e2058</anchor>
      <arglist>(std::vector&lt; const AttachedBody * &gt; &amp;attached_bodies, const LinkModel *lm) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clearAttachedBody</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a5c3129e7624ffe8c47dfaffee5c85560</anchor>
      <arglist>(const std::string &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAttachedBodies</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a683bbb0f9020ba6963c3717c0701488a</anchor>
      <arglist>(const LinkModel *link)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAttachedBodies</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a4eccb598b81de1f2b8238bb0f2f58acb</anchor>
      <arglist>(const JointModelGroup *group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAttachedBodies</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>af21a678724658a7c4da68373b0e98c7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AttachedBody *</type>
      <name>getAttachedBody</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac96982ef2db3a6db836f5caacf2ac53d</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAttachedBody</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>ac88fb2dde56e4859628103910400e91e</anchor>
      <arglist>(const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttachedBodyUpdateCallback</name>
      <anchorfile>classmoveit_1_1core_1_1RobotState.html</anchorfile>
      <anchor>a199bfec1bc2bcd2aaa8befa5efc1bbc8</anchor>
      <arglist>(const AttachedBodyCallback &amp;callback)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robot_trajectory::RobotTrajectory</name>
    <filename>classrobot__trajectory_1_1RobotTrajectory.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addPrefixWayPoint</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>aef6f926573ce6afd3b489ad38c06959e</anchor>
      <arglist>(const robot_state::RobotState &amp;state, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPrefixWayPoint</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a9dea6f7e3ed23990d83fe432b40045ae</anchor>
      <arglist>(const robot_state::RobotStatePtr &amp;state, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSuffixWayPoint</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>acc71e372e6c857b66e84c3d64aa26e48</anchor>
      <arglist>(const robot_state::RobotState &amp;state, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSuffixWayPoint</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>aa01f7e3ff601e0f5bcba535a2468d45c</anchor>
      <arglist>(const robot_state::RobotStatePtr &amp;state, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a3b9c9c93ef8af90259acc3f693cde8c4</anchor>
      <arglist>(const RobotTrajectory &amp;source, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>ac95d7d9d74d13c2e31bcc5b1f6aaee6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a27763702a87954e2f468a44acd6445b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findWayPointIndicesForDurationAfterStart</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>af265625c0dcd5d2c27a2a5507f6419fd</anchor>
      <arglist>(const double &amp;duration, int &amp;before, int &amp;after, double &amp;blend) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAverageSegmentDuration</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>ab14961b925941d0289765bdfa39e5d94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const robot_state::RobotState &amp;</type>
      <name>getFirstWayPoint</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>aaf5c910850cdb37533ee8dda87e25ce9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>robot_state::RobotStatePtr &amp;</type>
      <name>getFirstWayPointPtr</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a0e4736d1e74f234d6783224820646830</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const robot_model::JointModelGroup *</type>
      <name>getGroup</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>aedfe27b9e7d623f7a4727d6525fd0fcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGroupName</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>ac43a9e0d57d2cb03e183cffc8c8c743e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const robot_state::RobotState &amp;</type>
      <name>getLastWayPoint</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a5863d9c2096514a5b6d66aa40b883079</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>robot_state::RobotStatePtr &amp;</type>
      <name>getLastWayPointPtr</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a89cd640081a0f0d9accaaf6011aef877</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const robot_model::RobotModelConstPtr &amp;</type>
      <name>getRobotModel</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>ac4dc7dc4ef27833ee3c4b31b0e942fa7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRobotTrajectoryMsg</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>aa137d774573a9270102f2498dfcf25f3</anchor>
      <arglist>(moveit_msgs::RobotTrajectory &amp;trajectory) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getStateAtDurationFromStart</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a4587a7afb1774be2528e9d32f47dfebf</anchor>
      <arglist>(const double request_duration, robot_state::RobotStatePtr &amp;output_state) const </arglist>
    </member>
    <member kind="function">
      <type>const robot_state::RobotState &amp;</type>
      <name>getWayPoint</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a2b1bdd6f45f8d91b28a8dc4a68377838</anchor>
      <arglist>(std::size_t index) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getWayPointCount</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a939b56a0d57603879527e3f510556f43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWayPointDurationFromPrevious</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a67a726c9e46df4b609ca0523de444b50</anchor>
      <arglist>(std::size_t index) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWayPointDurationFromStart</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a8a2f22ae70656918bf391181214816b5</anchor>
      <arglist>(std::size_t index) const </arglist>
    </member>
    <member kind="function">
      <type>MOVEIT_DEPRECATED double</type>
      <name>getWaypointDurationFromStart</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a5abde734f3049e936eb2940272215f79</anchor>
      <arglist>(std::size_t index) const </arglist>
    </member>
    <member kind="function">
      <type>const std::deque&lt; double &gt; &amp;</type>
      <name>getWayPointDurations</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a2bf013c3cf8726509d9d6472aaf8e8aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>robot_state::RobotStatePtr &amp;</type>
      <name>getWayPointPtr</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>afc5cb13155d483d75bd8f25144666d6a</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertWayPoint</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a9bb9d7f695aa2ea2b890bf8d6969f69e</anchor>
      <arglist>(std::size_t index, const robot_state::RobotState &amp;state, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertWayPoint</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a1f665b6db3358d9f5baab1cbb393bf55</anchor>
      <arglist>(std::size_t index, const robot_state::RobotStatePtr &amp;state, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>aefd8daff105ef04ea3242c17c9601475</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobotTrajectory</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>afa11807e4922cbea393352d2553f4e6b</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;robot_model, const std::string &amp;group)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobotTrajectory</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a5ec4350a37a69ca31f70eac093555193</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;robot_model, const robot_model::JointModelGroup *group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGroupName</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>aad48d78ec3d3f6f14174fc61d6cfa664</anchor>
      <arglist>(const std::string &amp;group_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRobotTrajectoryMsg</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a5efcf4905cb2ca6848ccee45d73561fc</anchor>
      <arglist>(const robot_state::RobotState &amp;reference_state, const trajectory_msgs::JointTrajectory &amp;trajectory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRobotTrajectoryMsg</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>aa2040a9a4068ec327979743488670e89</anchor>
      <arglist>(const robot_state::RobotState &amp;reference_state, const moveit_msgs::RobotTrajectory &amp;trajectory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRobotTrajectoryMsg</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>ad7e5a6ab5feb278e351019eb29225365</anchor>
      <arglist>(const robot_state::RobotState &amp;reference_state, const moveit_msgs::RobotState &amp;state, const moveit_msgs::RobotTrajectory &amp;trajectory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWayPointDurationFromPrevious</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a5e99bb2d46afb55c48f259e008f18e06</anchor>
      <arglist>(std::size_t index, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a09dbe23704a5bd0cf4d49a114a3e62de</anchor>
      <arglist>(robot_trajectory::RobotTrajectory &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unwind</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a336c915269b3139b7ae53fb2af6ab5a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unwind</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a8c7d374fb01e79e1e11a1f1e1a82e998</anchor>
      <arglist>(const robot_state::RobotState &amp;state)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::deque&lt; double &gt;</type>
      <name>duration_from_previous_</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a6a0c78942c202a020374f565c1ff1c16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const robot_model::JointModelGroup *</type>
      <name>group_</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>a7238e93607bff1e9d4a60e1669a8a8b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>robot_model::RobotModelConstPtr</type>
      <name>robot_model_</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>aaaffd7bc4ab6482c7e8eeccce2e2712f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::deque&lt; robot_state::RobotStatePtr &gt;</type>
      <name>waypoints_</name>
      <anchorfile>classrobot__trajectory_1_1RobotTrajectory.html</anchorfile>
      <anchor>afc6fa0efe7d67d7433a708a391050576</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>planning_scene::SceneTransforms</name>
    <filename>classplanning__scene_1_1SceneTransforms.html</filename>
    <base>moveit::core::Transforms</base>
    <member kind="function">
      <type>bool</type>
      <name>canTransform</name>
      <anchorfile>classplanning__scene_1_1SceneTransforms.html</anchorfile>
      <anchor>ade722cf9faaf59d0b1c02f2cbb0121ef</anchor>
      <arglist>(const std::string &amp;from_frame) const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getTransform</name>
      <anchorfile>classplanning__scene_1_1SceneTransforms.html</anchorfile>
      <anchor>ab6bc4674267a8a2749192344eda8cb42</anchor>
      <arglist>(const std::string &amp;from_frame) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFixedFrame</name>
      <anchorfile>classplanning__scene_1_1SceneTransforms.html</anchorfile>
      <anchor>a0299cd84c147ea0da03ed739fac2b947</anchor>
      <arglist>(const std::string &amp;frame) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SceneTransforms</name>
      <anchorfile>classplanning__scene_1_1SceneTransforms.html</anchorfile>
      <anchor>aa1dece75821f8e5b3d969313cf58b22c</anchor>
      <arglist>(const PlanningScene *scene)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>knowsObject</name>
      <anchorfile>classplanning__scene_1_1SceneTransforms.html</anchorfile>
      <anchor>abb1026f26a37807a3ff9c6a934062bbb</anchor>
      <arglist>(const std::string &amp;id) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const PlanningScene *</type>
      <name>scene_</name>
      <anchorfile>classplanning__scene_1_1SceneTransforms.html</anchorfile>
      <anchor>aeee75acc218543d56301e23097dbab4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit::tools::Profiler::ScopedBlock</name>
    <filename>classmoveit_1_1tools_1_1Profiler_1_1ScopedBlock.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedBlock</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler_1_1ScopedBlock.html</anchorfile>
      <anchor>a6f6710fc7c3bf769a4e4ee2d0ec9d038</anchor>
      <arglist>(const std::string &amp;name, Profiler &amp;prof=Profiler::Instance())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedBlock</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler_1_1ScopedBlock.html</anchorfile>
      <anchor>a0f4d650cafee6b18b474b29d019fae91</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler_1_1ScopedBlock.html</anchorfile>
      <anchor>aa5f9c41639a31d76cc58e187dcc35806</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Profiler &amp;</type>
      <name>prof_</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler_1_1ScopedBlock.html</anchorfile>
      <anchor>a28ae050ab8aa089cca58533dea28b91d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit::tools::Profiler::ScopedStart</name>
    <filename>classmoveit_1_1tools_1_1Profiler_1_1ScopedStart.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedStart</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler_1_1ScopedStart.html</anchorfile>
      <anchor>a087896ed5e4388d55d9404f7a4310133</anchor>
      <arglist>(Profiler &amp;prof=Profiler::Instance())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedStart</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler_1_1ScopedStart.html</anchorfile>
      <anchor>aa241ac932f3cfa3c2fb70ef05f9af75b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Profiler &amp;</type>
      <name>prof_</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler_1_1ScopedStart.html</anchorfile>
      <anchor>a6f1bb616f0ff578785a50b5827ed92c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>wasRunning_</name>
      <anchorfile>classmoveit_1_1tools_1_1Profiler_1_1ScopedStart.html</anchorfile>
      <anchor>a061610d3d7a1d30738cba312c3e48480</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>moveit_sensor_manager::SensorInfo</name>
    <filename>structmoveit__sensor__manager_1_1SensorInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>SensorInfo</name>
      <anchorfile>structmoveit__sensor__manager_1_1SensorInfo.html</anchorfile>
      <anchor>a1e4d1631e17d3fa59fff4e86fcec5dba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max_dist</name>
      <anchorfile>structmoveit__sensor__manager_1_1SensorInfo.html</anchorfile>
      <anchor>a60bda52947f57829daadb3e3ed262206</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>min_dist</name>
      <anchorfile>structmoveit__sensor__manager_1_1SensorInfo.html</anchorfile>
      <anchor>ae4e9a4ef23d366d14d3467bd04700b12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>origin_frame</name>
      <anchorfile>structmoveit__sensor__manager_1_1SensorInfo.html</anchorfile>
      <anchor>a25216b348d57cc5cf4cbd979378945f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x_angle</name>
      <anchorfile>structmoveit__sensor__manager_1_1SensorInfo.html</anchorfile>
      <anchor>ad305eb8821784f4af49d833aad73c9ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y_angle</name>
      <anchorfile>structmoveit__sensor__manager_1_1SensorInfo.html</anchorfile>
      <anchor>aeb0f9a97969d4fc806915730fae7b159</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>trajectory_processing::SingleJointTrajectory</name>
    <filename>structtrajectory__processing_1_1SingleJointTrajectory.html</filename>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>accelerations</name>
      <anchorfile>structtrajectory__processing_1_1SingleJointTrajectory.html</anchorfile>
      <anchor>a168822ccbec2915d6bb30d73735106d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>final_acceleration</name>
      <anchorfile>structtrajectory__processing_1_1SingleJointTrajectory.html</anchorfile>
      <anchor>a02a42b27edbba304ca3963a2602ed15f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>initial_acceleration</name>
      <anchorfile>structtrajectory__processing_1_1SingleJointTrajectory.html</anchorfile>
      <anchor>af6f1884b812f32268d7dde76e070fed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max_acceleration</name>
      <anchorfile>structtrajectory__processing_1_1SingleJointTrajectory.html</anchorfile>
      <anchor>aed1a9caa8d4985edf59d614cc7e607e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max_velocity</name>
      <anchorfile>structtrajectory__processing_1_1SingleJointTrajectory.html</anchorfile>
      <anchor>a110b64d2b4cab445f75ac1b6a5601412</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>min_acceleration</name>
      <anchorfile>structtrajectory__processing_1_1SingleJointTrajectory.html</anchorfile>
      <anchor>a354b37e400d8c2a1d0b656f7cc100797</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>min_velocity</name>
      <anchorfile>structtrajectory__processing_1_1SingleJointTrajectory.html</anchorfile>
      <anchor>ae775d3aa276aa25706f885433b125df7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>positions</name>
      <anchorfile>structtrajectory__processing_1_1SingleJointTrajectory.html</anchorfile>
      <anchor>ad2032bdefb913a0af87787b4c4b39211</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>velocities</name>
      <anchorfile>structtrajectory__processing_1_1SingleJointTrajectory.html</anchorfile>
      <anchor>ad17eb548b77aa9c9a200818c5249319e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestAABB</name>
    <filename>classTestAABB.html</filename>
    <member kind="function" protection="protected">
      <type>robot_state::RobotState</type>
      <name>loadModel</name>
      <anchorfile>classTestAABB.html</anchorfile>
      <anchor>a3a20cfd8b44c93d3ade6e0f8755e03f6</anchor>
      <arglist>(const std::string urdf, const std::string srdf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>readFileToString</name>
      <anchorfile>classTestAABB.html</anchorfile>
      <anchor>a92371c9338b892a3c9daaad86b8b996e</anchor>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetUp</name>
      <anchorfile>classTestAABB.html</anchorfile>
      <anchor>a7fe2077354b9a22bf091377782564227</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>TearDown</name>
      <anchorfile>classTestAABB.html</anchorfile>
      <anchor>a9517be181e33e5755db10e164765d09b</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TestAction</name>
    <filename>structTestAction.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structTestAction.html</anchorfile>
      <anchor>a31c8495d7f430385f743e9ca7a6b01bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TestAction</name>
      <anchorfile>structTestAction.html</anchorfile>
      <anchor>a90e5ee3f643e875f1a917e4017b2d30f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>collision_detection::World::Action</type>
      <name>action_</name>
      <anchorfile>structTestAction.html</anchorfile>
      <anchor>ab5c770951070fefd267a6cab49c2f4f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>cnt_</name>
      <anchorfile>structTestAction.html</anchorfile>
      <anchor>aa1f16c410ac5f0f50ff4b839592afcbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>collision_detection::World::Object</type>
      <name>obj_</name>
      <anchorfile>structTestAction.html</anchorfile>
      <anchor>a0abcca0511b577a9e58c3b0a31cffa39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>moveit::tools::Profiler::TimeInfo</name>
    <filename>structmoveit_1_1tools_1_1Profiler_1_1TimeInfo.html</filename>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structmoveit_1_1tools_1_1Profiler_1_1TimeInfo.html</anchorfile>
      <anchor>af38ae6e2757f47b5bca91ba78324de26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeInfo</name>
      <anchorfile>structmoveit_1_1tools_1_1Profiler_1_1TimeInfo.html</anchorfile>
      <anchor>a2733cef9a8f4d40cbbedad6c2103deea</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmoveit_1_1tools_1_1Profiler_1_1TimeInfo.html</anchorfile>
      <anchor>a602b4403ac67b3b9a50f614bf7cac164</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>boost::posix_time::time_duration</type>
      <name>longest</name>
      <anchorfile>structmoveit_1_1tools_1_1Profiler_1_1TimeInfo.html</anchorfile>
      <anchor>aff60f27cfa493433e9cb53d1c66b6f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long int</type>
      <name>parts</name>
      <anchorfile>structmoveit_1_1tools_1_1Profiler_1_1TimeInfo.html</anchorfile>
      <anchor>a8f811fd63328e16fd95fd445e71ccdd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::posix_time::time_duration</type>
      <name>shortest</name>
      <anchorfile>structmoveit_1_1tools_1_1Profiler_1_1TimeInfo.html</anchorfile>
      <anchor>aaffd8ffa360b0d1d3fdcec9202ade2d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::posix_time::ptime</type>
      <name>start</name>
      <anchorfile>structmoveit_1_1tools_1_1Profiler_1_1TimeInfo.html</anchorfile>
      <anchor>a71a690de7276549df1938d22c4b64929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::posix_time::time_duration</type>
      <name>total</name>
      <anchorfile>structmoveit_1_1tools_1_1Profiler_1_1TimeInfo.html</anchorfile>
      <anchor>a8b2cbef3330eaefc3583c4ab6873ac1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moveit::core::Transforms</name>
    <filename>classmoveit_1_1core_1_1Transforms.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canTransform</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>a6c2e41fc472bb984e21e889ff6256ce9</anchor>
      <arglist>(const std::string &amp;from_frame) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTargetFrame</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>ae2981946876047d8a32df7081aa3553e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::Isometry3d &amp;</type>
      <name>getTransform</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>a567bf07ed01be1293e2488c89fcad6db</anchor>
      <arglist>(const std::string &amp;from_frame) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFixedFrame</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>ada90cfccc5db43141f374f9b61e2bee1</anchor>
      <arglist>(const std::string &amp;frame) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transforms</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>af9f8f3f04b5a041364d97c359d592d6a</anchor>
      <arglist>(const std::string &amp;target_frame)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Transforms</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>a46634ebad9aad54b07a0a4a768e17366</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FixedTransformsMap &amp;</type>
      <name>getAllTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>ae00195cd84235a225b6283a47bd89fb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>aa3c8898ab76775520775d81598cd84cf</anchor>
      <arglist>(std::vector&lt; geometry_msgs::TransformStamped &gt; &amp;transforms) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>aec6167704b561dbc69c21fc2dee08424</anchor>
      <arglist>(const Eigen::Isometry3d &amp;t, const std::string &amp;from_frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>adf3d6aefa8752d7d929806c2fd521aa1</anchor>
      <arglist>(const geometry_msgs::TransformStamped &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>afcb0359d6a1006742ca03ba236299c04</anchor>
      <arglist>(const std::vector&lt; geometry_msgs::TransformStamped &gt; &amp;transforms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>abe4438cc4cca8a42a4f78006288eb09a</anchor>
      <arglist>(const FixedTransformsMap &amp;transforms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformVector3</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>a2eed8491fdeb8d1ba9fa258a125a102e</anchor>
      <arglist>(const std::string &amp;from_frame, const Eigen::Vector3d &amp;v_in, Eigen::Vector3d &amp;v_out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformQuaternion</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>ad2d713df4755bff18b685438481270ed</anchor>
      <arglist>(const std::string &amp;from_frame, const Eigen::Quaterniond &amp;q_in, Eigen::Quaterniond &amp;q_out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformRotationMatrix</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>a85748bcb338ca72d358e6f75ad8afa31</anchor>
      <arglist>(const std::string &amp;from_frame, const Eigen::Matrix3d &amp;m_in, Eigen::Matrix3d &amp;m_out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformPose</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>a84bf991a795b2185e387a5a00466e75d</anchor>
      <arglist>(const std::string &amp;from_frame, const Eigen::Isometry3d &amp;t_in, Eigen::Isometry3d &amp;t_out) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>sameFrame</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>a101b4614f91072368a62c879bd59e36a</anchor>
      <arglist>(const std::string &amp;frame1, const std::string &amp;frame2)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>target_frame_</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>a650f48a36aab43627f2f02628b4c4676</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FixedTransformsMap</type>
      <name>transforms_</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>ad70ce12653eef34e1f6b91d2a3e78420</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const FixedTransformsMap &amp;</type>
      <name>getAllTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>ae00195cd84235a225b6283a47bd89fb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>aa3c8898ab76775520775d81598cd84cf</anchor>
      <arglist>(std::vector&lt; geometry_msgs::TransformStamped &gt; &amp;transforms) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>aec6167704b561dbc69c21fc2dee08424</anchor>
      <arglist>(const Eigen::Isometry3d &amp;t, const std::string &amp;from_frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>adf3d6aefa8752d7d929806c2fd521aa1</anchor>
      <arglist>(const geometry_msgs::TransformStamped &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>afcb0359d6a1006742ca03ba236299c04</anchor>
      <arglist>(const std::vector&lt; geometry_msgs::TransformStamped &gt; &amp;transforms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllTransforms</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>abe4438cc4cca8a42a4f78006288eb09a</anchor>
      <arglist>(const FixedTransformsMap &amp;transforms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformVector3</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>a2eed8491fdeb8d1ba9fa258a125a102e</anchor>
      <arglist>(const std::string &amp;from_frame, const Eigen::Vector3d &amp;v_in, Eigen::Vector3d &amp;v_out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformQuaternion</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>ad2d713df4755bff18b685438481270ed</anchor>
      <arglist>(const std::string &amp;from_frame, const Eigen::Quaterniond &amp;q_in, Eigen::Quaterniond &amp;q_out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformRotationMatrix</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>a85748bcb338ca72d358e6f75ad8afa31</anchor>
      <arglist>(const std::string &amp;from_frame, const Eigen::Matrix3d &amp;m_in, Eigen::Matrix3d &amp;m_out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformPose</name>
      <anchorfile>classmoveit_1_1core_1_1Transforms.html</anchorfile>
      <anchor>a84bf991a795b2185e387a5a00466e75d</anchor>
      <arglist>(const std::string &amp;from_frame, const Eigen::Isometry3d &amp;t_in, Eigen::Isometry3d &amp;t_out) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>constraint_samplers::UnionConstraintSampler</name>
    <filename>classconstraint__samplers_1_1UnionConstraintSampler.html</filename>
    <base>constraint_samplers::ConstraintSampler</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canService</name>
      <anchorfile>classconstraint__samplers_1_1UnionConstraintSampler.html</anchorfile>
      <anchor>aa069383ca6a9716b1acbd14c08c10da9</anchor>
      <arglist>(const moveit_msgs::Constraints &amp;constr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>configure</name>
      <anchorfile>classconstraint__samplers_1_1UnionConstraintSampler.html</anchorfile>
      <anchor>a839e34c1a60f6a4c7b53bb751966c144</anchor>
      <arglist>(const moveit_msgs::Constraints &amp;constr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classconstraint__samplers_1_1UnionConstraintSampler.html</anchorfile>
      <anchor>ac1bf28a74d8cc20d93c491248df20e73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ConstraintSamplerPtr &gt; &amp;</type>
      <name>getSamplers</name>
      <anchorfile>classconstraint__samplers_1_1UnionConstraintSampler.html</anchorfile>
      <anchor>a4db54133a1f3fd4f917e71fd76bb2d05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>project</name>
      <anchorfile>classconstraint__samplers_1_1UnionConstraintSampler.html</anchorfile>
      <anchor>a0b520d75bdaa5abd4f18cfb796dc5b8f</anchor>
      <arglist>(robot_state::RobotState &amp;state, unsigned int max_attempts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sample</name>
      <anchorfile>classconstraint__samplers_1_1UnionConstraintSampler.html</anchorfile>
      <anchor>a8fadf362a7ec11a726cba35a60103372</anchor>
      <arglist>(robot_state::RobotState &amp;state, const robot_state::RobotState &amp;reference_state, unsigned int max_attempts)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnionConstraintSampler</name>
      <anchorfile>classconstraint__samplers_1_1UnionConstraintSampler.html</anchorfile>
      <anchor>af8cf3828dd1afcb245866abe0051b4ce</anchor>
      <arglist>(const planning_scene::PlanningSceneConstPtr &amp;scene, const std::string &amp;group_name, const std::vector&lt; ConstraintSamplerPtr &gt; &amp;samplers)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ConstraintSamplerPtr &gt;</type>
      <name>samplers_</name>
      <anchorfile>classconstraint__samplers_1_1UnionConstraintSampler.html</anchorfile>
      <anchor>ac0e3f02f32ed1c72340509231fefbdc2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>moveit::core::VariableBounds</name>
    <filename>structmoveit_1_1core_1_1VariableBounds.html</filename>
    <member kind="function">
      <type></type>
      <name>VariableBounds</name>
      <anchorfile>structmoveit_1_1core_1_1VariableBounds.html</anchorfile>
      <anchor>af3e04d2b9865cb7864d6d7969435dc93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>acceleration_bounded_</name>
      <anchorfile>structmoveit_1_1core_1_1VariableBounds.html</anchorfile>
      <anchor>af0e83ca67bd560c306f76fb57828584c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max_acceleration_</name>
      <anchorfile>structmoveit_1_1core_1_1VariableBounds.html</anchorfile>
      <anchor>a48db40fdae153da78abbb3003f9250f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max_position_</name>
      <anchorfile>structmoveit_1_1core_1_1VariableBounds.html</anchorfile>
      <anchor>ac8dc344fef8bf3c73f9e1d25881c57e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max_velocity_</name>
      <anchorfile>structmoveit_1_1core_1_1VariableBounds.html</anchorfile>
      <anchor>a084bb6fc28ab6b811248378ddfda89e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>min_acceleration_</name>
      <anchorfile>structmoveit_1_1core_1_1VariableBounds.html</anchorfile>
      <anchor>a85f88ecc1edf9f96091ba0f379dd9d1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>min_position_</name>
      <anchorfile>structmoveit_1_1core_1_1VariableBounds.html</anchorfile>
      <anchor>ab6cc4e3e72702edb003cba2e07409ec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>min_velocity_</name>
      <anchorfile>structmoveit_1_1core_1_1VariableBounds.html</anchorfile>
      <anchor>af5c3f11dbfcdc2278c85ec3ee131feb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>position_bounded_</name>
      <anchorfile>structmoveit_1_1core_1_1VariableBounds.html</anchorfile>
      <anchor>a870a6ab1e27504d896dedcaadec40666</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>velocity_bounded_</name>
      <anchorfile>structmoveit_1_1core_1_1VariableBounds.html</anchorfile>
      <anchor>a7e0a5703c51621d5cff73259d1295fd6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>kinematic_constraints::VisibilityConstraint</name>
    <filename>classkinematic__constraints_1_1VisibilityConstraint.html</filename>
    <base>kinematic_constraints::KinematicConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>a556e30367ec8dc3e73f570db0a491be7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>configure</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>a4ecc18f0586dae2b94929eb74cc1a12c</anchor>
      <arglist>(const moveit_msgs::VisibilityConstraint &amp;vc, const robot_state::Transforms &amp;tf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstraintEvaluationResult</type>
      <name>decide</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>a17936dc98533a979019a606cc928fca3</anchor>
      <arglist>(const robot_state::RobotState &amp;state, bool verbose=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>enabled</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>a1fe88211f2fd9c7990901bd89ba64957</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equal</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>a66259e760da2e0fda0ac94caae42d063</anchor>
      <arglist>(const KinematicConstraint &amp;other, double margin) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMarkers</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>a28a578edc7a97627aaa78ef061871072</anchor>
      <arglist>(const robot_state::RobotState &amp;state, visualization_msgs::MarkerArray &amp;markers) const </arglist>
    </member>
    <member kind="function">
      <type>shapes::Mesh *</type>
      <name>getVisibilityCone</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>a35b6263daac62947c24faac4487b9857</anchor>
      <arglist>(const robot_state::RobotState &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>a4b752505adc23207d5ab159dfffe50c8</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VisibilityConstraint</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>a4ad5139977cceb77f3bcd466fd57e91c</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;model)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>decideContact</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>a72b684743aa07d2fadf5f0899c3f9858</anchor>
      <arglist>(const collision_detection::Contact &amp;contact) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>collision_detection::CollisionRobotPtr</type>
      <name>collision_robot_</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>a25603ce1bd376793155752049f91d36c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>cone_sides_</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>ade64c7a375da4a0578639101310f1d42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>max_range_angle_</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>a76199bb33fcf8c7e7de5ac74395600c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>max_view_angle_</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>a8494dd917a1ac7ab915ffb9f9314672d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mobile_sensor_frame_</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>a763254fc72cbe21801af91b37ed45533</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mobile_target_frame_</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>ad9d1b3be3ea3871a6bb557c48afbaed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EigenSTL::vector_Vector3d</type>
      <name>points_</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>ac2db46c8cb2adc3e395ba74b09e10d99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>sensor_frame_id_</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>a80e8f693b9dba4c34e5546aac8627753</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Isometry3d</type>
      <name>sensor_pose_</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>a62b2e41044f09df70135880e49f1058e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sensor_view_direction_</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>ac66cedff3f6f0fea53189d8e8fdc955d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>target_frame_id_</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>a71f922cb087b9312da20d960c14d3a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Isometry3d</type>
      <name>target_pose_</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>adaaa2616266617afc7f247eb454e0ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>target_radius_</name>
      <anchorfile>classkinematic__constraints_1_1VisibilityConstraint.html</anchorfile>
      <anchor>a9ad445f62772dad2a44ecd1d30459444</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>distance_field::VoxelGrid</name>
    <filename>classdistance__field_1_1VoxelGrid.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>T &amp;</type>
      <name>getCell</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a7be72e784b9d27576df7f415e9257197</anchor>
      <arglist>(int x, int y, int z)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>getCell</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a94da64ac8a4af1967599207926348a86</anchor>
      <arglist>(const Eigen::Vector3i &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getCell</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a34cc14fbe39bc60eb804ee86e5dca4dd</anchor>
      <arglist>(int x, int y, int z) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getCell</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a42bf58a0286dc22b29512c1d16413a94</anchor>
      <arglist>(const Eigen::Vector3i &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumCells</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a74367dae5730f35777a18f2720cc2283</anchor>
      <arglist>(Dimension dim) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getOrigin</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a315030f07a7d58a22a8a5e4776d7208b</anchor>
      <arglist>(Dimension dim) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getResolution</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a37dc52869f0f46f4be6b848f504cb282</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getResolution</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a71a034508fc10a51009a206410557175</anchor>
      <arglist>(Dimension dim) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSize</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a2755616ca824e36f36c52993f5bf33cc</anchor>
      <arglist>(Dimension dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gridToWorld</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>ab523ab1d1b4a1c10e9249d51d43e7d5d</anchor>
      <arglist>(int x, int y, int z, double &amp;world_x, double &amp;world_y, double &amp;world_z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gridToWorld</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a9c6bb5f625253d0255ed8cf1f76a2157</anchor>
      <arglist>(const Eigen::Vector3i &amp;grid, Eigen::Vector3i &amp;world) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCellValid</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>af918e65710c26c49554b75675a3911d9</anchor>
      <arglist>(int x, int y, int z) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCellValid</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a591e01ce0585430eb6c73455386c32c1</anchor>
      <arglist>(const Eigen::Vector3i &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCellValid</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a798332773ac7e350fa1bbf9fac7bb8c5</anchor>
      <arglist>(Dimension dim, int cell) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_DECLARE_PTR_MEMBER</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a94406cc8543d49c06f61f8ec3753900d</anchor>
      <arglist>(VoxelGrid)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator()</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a488a4b05c6fafda30fd3b78f4ef1065c</anchor>
      <arglist>(double x, double y, double z) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator()</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>ae555bdcfd62a500024ac14093283c6a2</anchor>
      <arglist>(const Eigen::Vector3d &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a90a51726cde385cce7d4be656371bee9</anchor>
      <arglist>(const T &amp;initial)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>aeccc577307664fcca4e29051bdeba3c9</anchor>
      <arglist>(double size_x, double size_y, double size_z, double resolution, double origin_x, double origin_y, double origin_z, T default_object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCell</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a865a2d9700278d7cf74a60b3c7f15fdb</anchor>
      <arglist>(int x, int y, int z, const T &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCell</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a45978f1a6e87e6069bd8789a7a1865a9</anchor>
      <arglist>(const Eigen::Vector3i &amp;pos, const T &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoxelGrid</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>aeb8e00ccb776802c4df43f0720376d2d</anchor>
      <arglist>(double size_x, double size_y, double size_z, double resolution, double origin_x, double origin_y, double origin_z, T default_object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoxelGrid</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a2438415a6ae10555170cd7c8f3ff82c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>worldToGrid</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>aaf2345a2dc5750b4b99f273df668066b</anchor>
      <arglist>(double world_x, double world_y, double world_z, int &amp;x, int &amp;y, int &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>worldToGrid</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a196a4a423b2858e1cc40b27894d12805</anchor>
      <arglist>(const Eigen::Vector3i &amp;world, Eigen::Vector3i &amp;grid) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VoxelGrid</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a897b7a39010a787f3706061f3125bec7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getCellFromLocation</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a167ff38e17ebfd4632822c670675de4c</anchor>
      <arglist>(Dimension dim, double loc) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getLocationFromCell</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a76f0d1c3b5c0f2c0d3a3029ae3a8b427</anchor>
      <arglist>(Dimension dim, int cell) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>ref</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a99d9c77df1323c9f85bf284bcf61911d</anchor>
      <arglist>(int x, int y, int z) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>data_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>ab9c1291e4e938d4eae7f5635fc1ec6a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T ***</type>
      <name>data_ptrs_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a393e4c66ffba38235dc15ab5203d1c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>default_object_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>ad4011a043757ef7d6dbb3b284cac6c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_cells_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>ab0ed43738bd60f68729bb6c3ff979ce7</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_cells_total_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a3a9263a10a8329aee6407debf7ed4ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>oo_resolution_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a2961ed3c1fc3f074f413064571862454</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>origin_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a6855d2daab2bc7e256938ae9fb973c5b</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>origin_minus_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a46e4e3a1574c1c3223b0bbcec34654d9</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>resolution_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a81107892e8e38dd12739b55d96fb9995</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>size_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a0c44df45eb348857d3fe9707962cf377</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stride1_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a7a7ccac725d21eb16a3ea58db885eab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stride2_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a1c40aba4df4cf6b97a28b6672ebc1fbd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VoxelGrid&lt; distance_field::PropDistanceFieldVoxel &gt;</name>
    <filename>classdistance__field_1_1VoxelGrid.html</filename>
    <member kind="function">
      <type>distance_field::PropDistanceFieldVoxel &amp;</type>
      <name>getCell</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a7be72e784b9d27576df7f415e9257197</anchor>
      <arglist>(int x, int y, int z)</arglist>
    </member>
    <member kind="function">
      <type>distance_field::PropDistanceFieldVoxel &amp;</type>
      <name>getCell</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a94da64ac8a4af1967599207926348a86</anchor>
      <arglist>(const Eigen::Vector3i &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>const distance_field::PropDistanceFieldVoxel &amp;</type>
      <name>getCell</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a34cc14fbe39bc60eb804ee86e5dca4dd</anchor>
      <arglist>(int x, int y, int z) const</arglist>
    </member>
    <member kind="function">
      <type>const distance_field::PropDistanceFieldVoxel &amp;</type>
      <name>getCell</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a42bf58a0286dc22b29512c1d16413a94</anchor>
      <arglist>(const Eigen::Vector3i &amp;pos) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumCells</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a74367dae5730f35777a18f2720cc2283</anchor>
      <arglist>(Dimension dim) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getOrigin</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a315030f07a7d58a22a8a5e4776d7208b</anchor>
      <arglist>(Dimension dim) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getResolution</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a37dc52869f0f46f4be6b848f504cb282</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getResolution</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a71a034508fc10a51009a206410557175</anchor>
      <arglist>(Dimension dim) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSize</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a2755616ca824e36f36c52993f5bf33cc</anchor>
      <arglist>(Dimension dim) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gridToWorld</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>ab523ab1d1b4a1c10e9249d51d43e7d5d</anchor>
      <arglist>(int x, int y, int z, double &amp;world_x, double &amp;world_y, double &amp;world_z) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gridToWorld</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a9c6bb5f625253d0255ed8cf1f76a2157</anchor>
      <arglist>(const Eigen::Vector3i &amp;grid, Eigen::Vector3i &amp;world) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCellValid</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>af918e65710c26c49554b75675a3911d9</anchor>
      <arglist>(int x, int y, int z) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCellValid</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a591e01ce0585430eb6c73455386c32c1</anchor>
      <arglist>(const Eigen::Vector3i &amp;pos) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCellValid</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a798332773ac7e350fa1bbf9fac7bb8c5</anchor>
      <arglist>(Dimension dim, int cell) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_DECLARE_PTR_MEMBER</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a94406cc8543d49c06f61f8ec3753900d</anchor>
      <arglist>(VoxelGrid)</arglist>
    </member>
    <member kind="function">
      <type>const distance_field::PropDistanceFieldVoxel &amp;</type>
      <name>operator()</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a488a4b05c6fafda30fd3b78f4ef1065c</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
    <member kind="function">
      <type>const distance_field::PropDistanceFieldVoxel &amp;</type>
      <name>operator()</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>ae555bdcfd62a500024ac14093283c6a2</anchor>
      <arglist>(const Eigen::Vector3d &amp;pos) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a90a51726cde385cce7d4be656371bee9</anchor>
      <arglist>(const distance_field::PropDistanceFieldVoxel &amp;initial)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>aeccc577307664fcca4e29051bdeba3c9</anchor>
      <arglist>(double size_x, double size_y, double size_z, double resolution, double origin_x, double origin_y, double origin_z, distance_field::PropDistanceFieldVoxeldefault_object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCell</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a865a2d9700278d7cf74a60b3c7f15fdb</anchor>
      <arglist>(int x, int y, int z, const distance_field::PropDistanceFieldVoxel &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCell</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a45978f1a6e87e6069bd8789a7a1865a9</anchor>
      <arglist>(const Eigen::Vector3i &amp;pos, const distance_field::PropDistanceFieldVoxel &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoxelGrid</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>aeb8e00ccb776802c4df43f0720376d2d</anchor>
      <arglist>(double size_x, double size_y, double size_z, double resolution, double origin_x, double origin_y, double origin_z, distance_field::PropDistanceFieldVoxeldefault_object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoxelGrid</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a2438415a6ae10555170cd7c8f3ff82c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>worldToGrid</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>aaf2345a2dc5750b4b99f273df668066b</anchor>
      <arglist>(double world_x, double world_y, double world_z, int &amp;x, int &amp;y, int &amp;z) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>worldToGrid</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a196a4a423b2858e1cc40b27894d12805</anchor>
      <arglist>(const Eigen::Vector3i &amp;world, Eigen::Vector3i &amp;grid) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VoxelGrid</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a897b7a39010a787f3706061f3125bec7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getCellFromLocation</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a167ff38e17ebfd4632822c670675de4c</anchor>
      <arglist>(Dimension dim, double loc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getLocationFromCell</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a76f0d1c3b5c0f2c0d3a3029ae3a8b427</anchor>
      <arglist>(Dimension dim, int cell) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>ref</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a99d9c77df1323c9f85bf284bcf61911d</anchor>
      <arglist>(int x, int y, int z) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>distance_field::PropDistanceFieldVoxel *</type>
      <name>data_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>ab9c1291e4e938d4eae7f5635fc1ec6a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>distance_field::PropDistanceFieldVoxel ***</type>
      <name>data_ptrs_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a393e4c66ffba38235dc15ab5203d1c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>distance_field::PropDistanceFieldVoxel</type>
      <name>default_object_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>ad4011a043757ef7d6dbb3b284cac6c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_cells_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>ab0ed43738bd60f68729bb6c3ff979ce7</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_cells_total_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a3a9263a10a8329aee6407debf7ed4ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>oo_resolution_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a2961ed3c1fc3f074f413064571862454</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>origin_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a6855d2daab2bc7e256938ae9fb973c5b</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>origin_minus_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a46e4e3a1574c1c3223b0bbcec34654d9</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>resolution_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a81107892e8e38dd12739b55d96fb9995</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>size_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a0c44df45eb348857d3fe9707962cf377</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stride1_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a7a7ccac725d21eb16a3ea58db885eab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stride2_</name>
      <anchorfile>classdistance__field_1_1VoxelGrid.html</anchorfile>
      <anchor>a1c40aba4df4cf6b97a28b6672ebc1fbd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>collision_detection::World</name>
    <filename>classcollision__detection_1_1World.html</filename>
    <class kind="class">collision_detection::World::Action</class>
    <class kind="struct">collision_detection::World::Object</class>
    <class kind="class">collision_detection::World::Observer</class>
    <class kind="class">collision_detection::World::ObserverHandle</class>
    <member kind="enumeration">
      <type></type>
      <name>ActionBits</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a027ceb8ec0713a62c3d7f3dcbbaff640</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNINITIALIZED</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a027ceb8ec0713a62c3d7f3dcbbaff640aa224bce192eecdfa450b4efd0ab7575f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CREATE</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a027ceb8ec0713a62c3d7f3dcbbaff640aae06dd8079bfcabbc45aa5838d53057a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DESTROY</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a027ceb8ec0713a62c3d7f3dcbbaff640a67634de309a111c432add844147ed1eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOVE_SHAPE</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a027ceb8ec0713a62c3d7f3dcbbaff640aee5aaff6f0d11f27e1102a9998337da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADD_SHAPE</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a027ceb8ec0713a62c3d7f3dcbbaff640a58de80d79d03e039b80d6ac17b3685e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REMOVE_SHAPE</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a027ceb8ec0713a62c3d7f3dcbbaff640acf8a0eeabd5d8a28ef38752b310904da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADD_SHAPE</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a027ceb8ec0713a62c3d7f3dcbbaff640a58de80d79d03e039b80d6ac17b3685e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, ObjectPtr &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a025d783b34f445f58c020fc90fde1559</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CREATE</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a027ceb8ec0713a62c3d7f3dcbbaff640aae06dd8079bfcabbc45aa5838d53057a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DESTROY</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a027ceb8ec0713a62c3d7f3dcbbaff640a67634de309a111c432add844147ed1eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOVE_SHAPE</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a027ceb8ec0713a62c3d7f3dcbbaff640aee5aaff6f0d11f27e1102a9998337da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; void(const ObjectConstPtr &amp;, Action)&gt;</type>
      <name>ObserverCallbackFn</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a583997fcf444889245fdf3de39490c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REMOVE_SHAPE</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a027ceb8ec0713a62c3d7f3dcbbaff640acf8a0eeabd5d8a28ef38752b310904da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNINITIALIZED</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a027ceb8ec0713a62c3d7f3dcbbaff640aa224bce192eecdfa450b4efd0ab7575f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ObserverHandle</type>
      <name>addObserver</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a6d999503e46564ed159d894373009f38</anchor>
      <arglist>(const ObserverCallbackFn &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToObject</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a1d13f3b6bf0ddb5bafb360ef9ea10814</anchor>
      <arglist>(const std::string &amp;id, const std::vector&lt; shapes::ShapeConstPtr &gt; &amp;shapes, const EigenSTL::vector_Isometry3d &amp;poses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToObject</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a289081085766dc32e07b602438572c16</anchor>
      <arglist>(const std::string &amp;id, const shapes::ShapeConstPtr &amp;shape, const Eigen::Isometry3d &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>abb14b29a95b6ad6ad806323ae53d8a8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearObjects</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>adc4d485fb4e992dccafebd760b22c23c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a7aef63b5fe7ac27501ecbf4f8fe21660</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a407d018d4167b04150257bee242a7e21</anchor>
      <arglist>(const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>ObjectConstPtr</type>
      <name>getObject</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a51fd071c6bf17e7f74c102725275e909</anchor>
      <arglist>(const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getObjectIds</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a16dbe10804b36980a093bdf8fead3492</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasObject</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a667f360b416f2b48ccc646611fb583a0</anchor>
      <arglist>(const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a8e9c0710318b2737ce155c91648ac966</anchor>
      <arglist>(Object)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveObject</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>aabf55427d7f6ea0911b32285a2f40dc1</anchor>
      <arglist>(const std::string &amp;id, const Eigen::Isometry3d &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveShapeInObject</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a671b1507b6ffea4a478b2c903fd667e8</anchor>
      <arglist>(const std::string &amp;id, const shapes::ShapeConstPtr &amp;shape, const Eigen::Isometry3d &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notifyObserverAllObjects</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>ae026f7d4ba4cd38545db533ddf7d28b0</anchor>
      <arglist>(const ObserverHandle observer_handle, Action action) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeObject</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a730ac11820dd784df58956cf3ce5bdc3</anchor>
      <arglist>(const std::string &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObserver</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a0d94126a3e3046ddc264213b319a2655</anchor>
      <arglist>(const ObserverHandle observer_handle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeShapeFromObject</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>af783ea608f798b17380b0de2a46ae5ad</anchor>
      <arglist>(const std::string &amp;id, const shapes::ShapeConstPtr &amp;shape)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a97a4393d153ef6ed57c12c0de2046bfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>World</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a5e39b4331167c7eef3088d51cce2f67c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>World</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a01d9d6105b7026d12c7d6118d77951dc</anchor>
      <arglist>(const World &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~World</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>ab4885678f7ccd2a01bc2fee422158caa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>addToObjectInternal</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a76904d0cf2e97f475d3917bcc6007f9c</anchor>
      <arglist>(const ObjectPtr &amp;obj, const shapes::ShapeConstPtr &amp;shape, const Eigen::Isometry3d &amp;pose)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ensureUnique</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a322a1be812ad9c07065a60d1bd8f66aa</anchor>
      <arglist>(ObjectPtr &amp;obj)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>notify</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a24fc8c7b7de9305a694271c8de2ea74c</anchor>
      <arglist>(const ObjectConstPtr &amp;, Action)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>notifyAll</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a3f00a09869ef3b1d72a23dfdc782bec9</anchor>
      <arglist>(Action action)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, ObjectPtr &gt;</type>
      <name>objects_</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a517ded49d6464357b967afc224e955bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Observer * &gt;</type>
      <name>observers_</name>
      <anchorfile>classcollision__detection_1_1World.html</anchorfile>
      <anchor>a22a3e0d37efcfa3c1d51c3b2e171f5cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>collision_detection::WorldDiff</name>
    <filename>classcollision__detection_1_1WorldDiff.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, World::Action &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classcollision__detection_1_1WorldDiff.html</anchorfile>
      <anchor>ad0c0746ef56598693e656fbcfa1aeadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classcollision__detection_1_1WorldDiff.html</anchorfile>
      <anchor>a3723ef3060312f41282cc436d94e80f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearChanges</name>
      <anchorfile>classcollision__detection_1_1WorldDiff.html</anchorfile>
      <anchor>ab10f96dd369d24ca5e6eff3f2fbfb0d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classcollision__detection_1_1WorldDiff.html</anchorfile>
      <anchor>a1bbc59c2f916694e51f6d5ae5af21d6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classcollision__detection_1_1WorldDiff.html</anchorfile>
      <anchor>ac0c9d7a86f61220c286e8a3d0802ad03</anchor>
      <arglist>(const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, World::Action &gt; &amp;</type>
      <name>getChanges</name>
      <anchorfile>classcollision__detection_1_1WorldDiff.html</anchorfile>
      <anchor>acdb57c1dd75a0bfeb990ec431a30e1fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classcollision__detection_1_1WorldDiff.html</anchorfile>
      <anchor>a929d4020c3adb54fce30ec47e8a929ea</anchor>
      <arglist>(const WorldPtr &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classcollision__detection_1_1WorldDiff.html</anchorfile>
      <anchor>ae67228470714b9bf2a8efb1883be9de4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcollision__detection_1_1WorldDiff.html</anchorfile>
      <anchor>a57346d0e8e39dd931cc58bd62e2c0319</anchor>
      <arglist>(const std::string &amp;id, World::Action val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorld</name>
      <anchorfile>classcollision__detection_1_1WorldDiff.html</anchorfile>
      <anchor>aa27b6c4ed5a654e6ca9293c6a06e693e</anchor>
      <arglist>(const WorldPtr &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classcollision__detection_1_1WorldDiff.html</anchorfile>
      <anchor>ad24a7ae21f7e7bbc9df456c9e11dd1f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WorldDiff</name>
      <anchorfile>classcollision__detection_1_1WorldDiff.html</anchorfile>
      <anchor>a3b4f7b7b8346fd6182d2725190bb6e9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WorldDiff</name>
      <anchorfile>classcollision__detection_1_1WorldDiff.html</anchorfile>
      <anchor>ad89f6da5be84bffc7d7925defd408454</anchor>
      <arglist>(const WorldPtr &amp;world)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WorldDiff</name>
      <anchorfile>classcollision__detection_1_1WorldDiff.html</anchorfile>
      <anchor>afd75bf0e1a98ef2a65b00280cd738908</anchor>
      <arglist>(WorldDiff &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WorldDiff</name>
      <anchorfile>classcollision__detection_1_1WorldDiff.html</anchorfile>
      <anchor>a7e0815e14864d93a571550510d45206a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>notify</name>
      <anchorfile>classcollision__detection_1_1WorldDiff.html</anchorfile>
      <anchor>a170704186aee1bc8efe97d5004db0630</anchor>
      <arglist>(const World::ObjectConstPtr &amp;, World::Action)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, World::Action &gt;</type>
      <name>changes_</name>
      <anchorfile>classcollision__detection_1_1WorldDiff.html</anchorfile>
      <anchor>a304d246aceb43051921f9a17a68fb710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>World::ObserverHandle</type>
      <name>observer_handle_</name>
      <anchorfile>classcollision__detection_1_1WorldDiff.html</anchorfile>
      <anchor>a302b7a848a4176258c4dd0a070cdcf46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::weak_ptr&lt; World &gt;</type>
      <name>world_</name>
      <anchorfile>classcollision__detection_1_1WorldDiff.html</anchorfile>
      <anchor>a58445aee8754f380aa8fc1922b578f3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>collision_detection</name>
    <filename>namespacecollision__detection.html</filename>
    <namespace>collision_detection::AllowedCollision</namespace>
    <namespace>collision_detection::BodyTypes</namespace>
    <namespace>collision_detection::DistanceRequestTypes</namespace>
    <class kind="class">collision_detection::AllowedCollisionMatrix</class>
    <class kind="struct">collision_detection::CollisionData</class>
    <class kind="class">collision_detection::CollisionDetectorAllocator</class>
    <class kind="class">collision_detection::CollisionDetectorAllocatorAllValid</class>
    <class kind="class">collision_detection::CollisionDetectorAllocatorFCL</class>
    <class kind="class">collision_detection::CollisionDetectorAllocatorTemplate</class>
    <class kind="struct">collision_detection::CollisionGeometryData</class>
    <class kind="class">collision_detection::CollisionPlugin</class>
    <class kind="struct">collision_detection::CollisionRequest</class>
    <class kind="struct">collision_detection::CollisionResult</class>
    <class kind="class">collision_detection::CollisionRobot</class>
    <class kind="class">collision_detection::CollisionRobotAllValid</class>
    <class kind="class">collision_detection::CollisionRobotFCL</class>
    <class kind="class">collision_detection::CollisionWorld</class>
    <class kind="class">collision_detection::CollisionWorldAllValid</class>
    <class kind="class">collision_detection::CollisionWorldFCL</class>
    <class kind="struct">collision_detection::Contact</class>
    <class kind="struct">collision_detection::CostSource</class>
    <class kind="struct">collision_detection::DistanceData</class>
    <class kind="struct">collision_detection::DistanceRequest</class>
    <class kind="struct">collision_detection::DistanceResult</class>
    <class kind="struct">collision_detection::DistanceResultsData</class>
    <class kind="struct">collision_detection::FCLGeometry</class>
    <class kind="struct">collision_detection::FCLManager</class>
    <class kind="struct">collision_detection::FCLObject</class>
    <class kind="struct">collision_detection::FCLShapeCache</class>
    <class kind="struct">collision_detection::IfSameType</class>
    <class kind="struct">collision_detection::IfSameType&lt; T, T &gt;</class>
    <class kind="class">collision_detection::World</class>
    <class kind="class">collision_detection::WorldDiff</class>
    <member kind="typedef">
      <type>BodyTypes::Type</type>
      <name>BodyType</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ab85879a36c3985b501b738ec7b0c70f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; bool(collision_detection::Contact &amp;)&gt;</type>
      <name>DecideContactFn</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a6a9d9bee3fd5dd0c15697565d76b8b02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const std::pair&lt; std::string, std::string &gt;, std::vector&lt; DistanceResultsData &gt; &gt;</type>
      <name>DistanceMap</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>abf35ea00e5b1ddd01dfbbbf23982eeaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DistanceRequestTypes::DistanceRequestType</type>
      <name>DistanceRequestType</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a2fe3d329ac605e120161501efff75df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const fcl::CollisionObject &gt;</type>
      <name>FCLCollisionObjectConstPtr</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ae8ff3db6b443ad910cacba006094bf43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; fcl::CollisionObject &gt;</type>
      <name>FCLCollisionObjectPtr</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a1fd970aceecb4b4b363eb0e975e68f29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>andDecideContact</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a26a68a48af0afc8363d6053ba65b11d9</anchor>
      <arglist>(const DecideContactFn &amp;f1, const DecideContactFn &amp;f2, Contact &amp;contact)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanCollisionGeometryCache</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a43b3c92b3fc1fb442d1c1f2e4827688e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>collisionCallback</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a929939c42d95906b566619981a737240</anchor>
      <arglist>(fcl::CollisionObject *o1, fcl::CollisionObject *o2, void *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>contactToMsg</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ab5b9de238ce8eab0ac37720e9bbccf43</anchor>
      <arglist>(const Contact &amp;contact, moveit_msgs::ContactInformation &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>costSourceToMsg</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>aeec7c91fb3ba8bd89d34bf2a4e5768b3</anchor>
      <arglist>(const CostSource &amp;cost_source, moveit_msgs::CostSource &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>aa14c1f97a699dc074ce98f5aeb56684f</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, const robot_model::LinkModel *link, int shape_index)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a55cb01952ddf27ae49261f677a9a4086</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, const robot_state::AttachedBody *ab, int shape_index)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ac706c51ba1557858fb70e4fc0d2a65ab</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, const World::Object *obj)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a2a9ced5dca1015fe29861056b0e6916f</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, double scale, double padding, const robot_model::LinkModel *link, int shape_index)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a7b9a34d8ef1aeb3f5a626b17e1df2ce7</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, double scale, double padding, const robot_state::AttachedBody *ab, int shape_index)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a187f1af4ccb0d18afdfaad016a2afdd8</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, double scale, double padding, const World::Object *obj)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>af9040be8b971caa96ef8e2ed08aee0b6</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, const T *data, int shape_index)</arglist>
    </member>
    <member kind="function">
      <type>FCLGeometryConstPtr</type>
      <name>createCollisionGeometry</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a222326e69feb1f536e548ea60201fd3c</anchor>
      <arglist>(const shapes::ShapeConstPtr &amp;shape, double scale, double padding, const T *data, int shape_index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>distanceCallback</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ae59ed6bd3e0a3e8dd0fec2dea71ca660</anchor>
      <arglist>(fcl::CollisionObject *o1, fcl::CollisionObject *o2, void *data, double &amp;min_dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fcl2contact</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ae00433940f9ca689634368451912d9f7</anchor>
      <arglist>(const fcl::Contact &amp;fc, Contact &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fcl2costsource</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ade7cc36d36e080791e09ade8b44d9823</anchor>
      <arglist>(const fcl::CostSource &amp;fcs, CostSource &amp;cs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollisionMarkersFromContacts</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a80eb2fffc9ec5c73f90891485e67db8c</anchor>
      <arglist>(visualization_msgs::MarkerArray &amp;arr, const std::string &amp;frame_id, const CollisionResult::ContactMap &amp;con, const std_msgs::ColorRGBA &amp;color, const ros::Duration &amp;lifetime, const double radius=0.035)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCollisionMarkersFromContacts</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a2f4f093913eaf25f5d06adcaa48f5d86</anchor>
      <arglist>(visualization_msgs::MarkerArray &amp;arr, const std::string &amp;frame_id, const CollisionResult::ContactMap &amp;con)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCostMarkers</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a113cda3bd4a71943b8029db17d62a864</anchor>
      <arglist>(visualization_msgs::MarkerArray &amp;arr, const std::string &amp;frame_id, std::set&lt; CostSource &gt; &amp;cost_sources)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCostMarkers</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a4555d9a536ea3d92d04b5c057123a9cf</anchor>
      <arglist>(visualization_msgs::MarkerArray &amp;arr, const std::string &amp;frame_id, std::set&lt; CostSource &gt; &amp;cost_sources, const std_msgs::ColorRGBA &amp;color, const ros::Duration &amp;lifetime)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSensorPositioning</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a8bfd0c3db0fa397f2ef2b55c1ef07cf5</anchor>
      <arglist>(geometry_msgs::Point &amp;point, const std::set&lt; CostSource &gt; &amp;cost_sources)</arglist>
    </member>
    <member kind="function">
      <type>FCLShapeCache &amp;</type>
      <name>GetShapeCache</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a8e633c6b2e812149f7efb56bbf9c77d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalCost</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a1a7139d8a209ebf3775f06811e041d60</anchor>
      <arglist>(const std::set&lt; CostSource &gt; &amp;cost_sources)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersectCostSources</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a80fba37a3cdb50045b6cd58286495a68</anchor>
      <arglist>(std::set&lt; CostSource &gt; &amp;cost_sources, const std::set&lt; CostSource &gt; &amp;a, const std::set&lt; CostSource &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a6268926e481d5a4e3a897e9b8dde4c4d</anchor>
      <arglist>(CollisionPlugin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a5434606466e8a582df50ea624b2857be</anchor>
      <arglist>(CollisionDetectorAllocator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a7b479d7f0e8c20125a0495481f96aa04</anchor>
      <arglist>(WorldDiff)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ab56b1ec4372d595d99535e67b1e5cbc1</anchor>
      <arglist>(CollisionRobot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a8735c611ba512170408e5d69022cc74c</anchor>
      <arglist>(CollisionWorld)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a706f274b9456bc36f6a97e2450470832</anchor>
      <arglist>(AllowedCollisionMatrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a6b40947c9fab08683b1606a7ac836809</anchor>
      <arglist>(CollisionGeometryData)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a21dc4646f3031b7a467c3075e71c6be9</anchor>
      <arglist>(World)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a577473fbac94a7f2e1f1369c675caa65</anchor>
      <arglist>(FCLGeometry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>refineContactNormals</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a3c4bc63c18dd0694ceb984d5a9f2453a</anchor>
      <arglist>(const World::ObjectConstPtr &amp;object, CollisionResult &amp;res, double cell_bbx_search_distance=1.0, double allowed_angle_divergence=0.0, bool estimate_depth=false, double iso_value=0.5, double metaball_radius_multiple=1.5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCostSources</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a85f650ee9afe98373374c62bcae36aab</anchor>
      <arglist>(std::set&lt; CostSource &gt; &amp;cost_sources, const std::set&lt; CostSource &gt; &amp;cost_sources_to_remove, double overlap_fraction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeOverlapping</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ae7c92a8b63666610657571eedfd8aaab</anchor>
      <arglist>(std::set&lt; CostSource &gt; &amp;cost_sources, double overlap_fraction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform2fcl</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>ac62f07a0d167ce0255db6ab31b9506bb</anchor>
      <arglist>(const Eigen::Isometry3d &amp;b, fcl::Transform3f &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>fcl::Transform3f</type>
      <name>transform2fcl</name>
      <anchorfile>namespacecollision__detection.html</anchorfile>
      <anchor>a65033c779e897cf789d2be527fc26be2</anchor>
      <arglist>(const Eigen::Isometry3d &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>collision_detection::AllowedCollision</name>
    <filename>namespacecollision__detection_1_1AllowedCollision.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>namespacecollision__detection_1_1AllowedCollision.html</anchorfile>
      <anchor>a8f4b01d9c2bf6843a65389a35296d93b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEVER</name>
      <anchorfile>namespacecollision__detection_1_1AllowedCollision.html</anchorfile>
      <anchor>a8f4b01d9c2bf6843a65389a35296d93ba7d59beeffde8a1c49cdf5956759554df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALWAYS</name>
      <anchorfile>namespacecollision__detection_1_1AllowedCollision.html</anchorfile>
      <anchor>a8f4b01d9c2bf6843a65389a35296d93baf0f44fbcf1e0f51dd8319483e4d0cfc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONDITIONAL</name>
      <anchorfile>namespacecollision__detection_1_1AllowedCollision.html</anchorfile>
      <anchor>a8f4b01d9c2bf6843a65389a35296d93ba4e92c053fbf11174a4e65394f3520321</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>collision_detection::BodyTypes</name>
    <filename>namespacecollision__detection_1_1BodyTypes.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>namespacecollision__detection_1_1BodyTypes.html</anchorfile>
      <anchor>a535aa0dbc0658eb6df97052b3d85bada</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROBOT_LINK</name>
      <anchorfile>namespacecollision__detection_1_1BodyTypes.html</anchorfile>
      <anchor>a535aa0dbc0658eb6df97052b3d85badaa4150f905f1002b2591a3427ec8b1a106</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROBOT_ATTACHED</name>
      <anchorfile>namespacecollision__detection_1_1BodyTypes.html</anchorfile>
      <anchor>a535aa0dbc0658eb6df97052b3d85badaa4e5121f1c790501abdbf81f9608dd554</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WORLD_OBJECT</name>
      <anchorfile>namespacecollision__detection_1_1BodyTypes.html</anchorfile>
      <anchor>a535aa0dbc0658eb6df97052b3d85badaac5018c5d5811fefd380a37e579104e8b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>collision_detection::DistanceRequestTypes</name>
    <filename>namespacecollision__detection_1_1DistanceRequestTypes.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>DistanceRequestType</name>
      <anchorfile>namespacecollision__detection_1_1DistanceRequestTypes.html</anchorfile>
      <anchor>ac754f7bfd3f776cb02a190e9a0fd893e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GLOBAL</name>
      <anchorfile>namespacecollision__detection_1_1DistanceRequestTypes.html</anchorfile>
      <anchor>ac754f7bfd3f776cb02a190e9a0fd893ea51e53133b5ca5b136dbef1be76ad6074</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SINGLE</name>
      <anchorfile>namespacecollision__detection_1_1DistanceRequestTypes.html</anchorfile>
      <anchor>ac754f7bfd3f776cb02a190e9a0fd893eaf042b2d1203de239d52771e4cb11b417</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIMITED</name>
      <anchorfile>namespacecollision__detection_1_1DistanceRequestTypes.html</anchorfile>
      <anchor>ac754f7bfd3f776cb02a190e9a0fd893eacf996e05973b28913b661031954f7f0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL</name>
      <anchorfile>namespacecollision__detection_1_1DistanceRequestTypes.html</anchorfile>
      <anchor>ac754f7bfd3f776cb02a190e9a0fd893ea4b6d1899c4b4626a9da91d05367be0c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>constraint_samplers</name>
    <filename>namespaceconstraint__samplers.html</filename>
    <class kind="class">constraint_samplers::ConstraintSampler</class>
    <class kind="class">constraint_samplers::ConstraintSamplerAllocator</class>
    <class kind="class">constraint_samplers::ConstraintSamplerManager</class>
    <class kind="class">constraint_samplers::IKConstraintSampler</class>
    <class kind="struct">constraint_samplers::IKSamplingPose</class>
    <class kind="class">constraint_samplers::JointConstraintSampler</class>
    <class kind="struct">constraint_samplers::OrderSamplers</class>
    <class kind="class">constraint_samplers::UnionConstraintSampler</class>
    <member kind="function">
      <type>double</type>
      <name>countSamplesPerSecond</name>
      <anchorfile>namespaceconstraint__samplers.html</anchorfile>
      <anchor>ae85b6041f95efb12e168c07c90134c29</anchor>
      <arglist>(const ConstraintSamplerPtr &amp;sampler, const robot_state::RobotState &amp;reference_state)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>countSamplesPerSecond</name>
      <anchorfile>namespaceconstraint__samplers.html</anchorfile>
      <anchor>a72fac81e1d29cdcfd774e8d3b8131e37</anchor>
      <arglist>(const moveit_msgs::Constraints &amp;constr, const planning_scene::PlanningSceneConstPtr &amp;scene, const std::string &amp;group)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceconstraint__samplers.html</anchorfile>
      <anchor>a2ec8c37bd86626b716466c84d49c9383</anchor>
      <arglist>(ConstraintSamplerManager)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceconstraint__samplers.html</anchorfile>
      <anchor>a7ca7f2f0f29d2d2e6c182a63c1b0be81</anchor>
      <arglist>(ConstraintSamplerAllocator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceconstraint__samplers.html</anchorfile>
      <anchor>a5cfee558dd72c3f7438685906d0bb740</anchor>
      <arglist>(JointConstraintSampler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceconstraint__samplers.html</anchorfile>
      <anchor>a2c3bf8e05114a1f6523928c71750a7eb</anchor>
      <arglist>(ConstraintSampler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceconstraint__samplers.html</anchorfile>
      <anchor>a5789be593ae9935224c2d22c0448b05e</anchor>
      <arglist>(IKConstraintSampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visualizeDistribution</name>
      <anchorfile>namespaceconstraint__samplers.html</anchorfile>
      <anchor>a110f5646222d688e1136aa2ea8e7b8eb</anchor>
      <arglist>(const ConstraintSamplerPtr &amp;sampler, const robot_state::RobotState &amp;reference_state, const std::string &amp;link_name, unsigned int sample_count, visualization_msgs::MarkerArray &amp;markers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visualizeDistribution</name>
      <anchorfile>namespaceconstraint__samplers.html</anchorfile>
      <anchor>a192eb468a288eb908b1e9ae48fd39e39</anchor>
      <arglist>(const moveit_msgs::Constraints &amp;constr, const planning_scene::PlanningSceneConstPtr &amp;scene, const std::string &amp;group, const std::string &amp;link_name, unsigned int sample_count, visualization_msgs::MarkerArray &amp;markers)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>distance_field</name>
    <filename>namespacedistance__field.html</filename>
    <class kind="struct">distance_field::compareEigen_Vector3i</class>
    <class kind="class">distance_field::DistanceField</class>
    <class kind="class">distance_field::PropagationDistanceField</class>
    <class kind="struct">distance_field::PropDistanceFieldVoxel</class>
    <class kind="class">distance_field::VoxelGrid</class>
    <member kind="enumeration">
      <type></type>
      <name>Dimension</name>
      <anchorfile>namespacedistance__field.html</anchorfile>
      <anchor>a954c8f1a8b902bca58e60b3c5c981801</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIM_X</name>
      <anchorfile>namespacedistance__field.html</anchorfile>
      <anchor>a954c8f1a8b902bca58e60b3c5c981801a80f68b8c8e9e1833758d324099520552</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIM_Y</name>
      <anchorfile>namespacedistance__field.html</anchorfile>
      <anchor>a954c8f1a8b902bca58e60b3c5c981801ab0bbf064c7c728615d923c1c8496e30e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIM_Z</name>
      <anchorfile>namespacedistance__field.html</anchorfile>
      <anchor>a954c8f1a8b902bca58e60b3c5c981801a4f31d977b7d65594ae36a0d70e3e207e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PlaneVisualizationType</name>
      <anchorfile>namespacedistance__field.html</anchorfile>
      <anchor>aff38864661c5d4cd4259255c6f2ba7c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XYPlane</name>
      <anchorfile>namespacedistance__field.html</anchorfile>
      <anchor>aff38864661c5d4cd4259255c6f2ba7c4a3b7317e04ca194cd26ad695bfe2e33ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XZPlane</name>
      <anchorfile>namespacedistance__field.html</anchorfile>
      <anchor>aff38864661c5d4cd4259255c6f2ba7c4ab65b01f80ca0f93e9396c0feaf4895a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YZPlane</name>
      <anchorfile>namespacedistance__field.html</anchorfile>
      <anchor>aff38864661c5d4cd4259255c6f2ba7c4a685282ccc6de430f974cba5a5568e21f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findInternalPointsConvex</name>
      <anchorfile>namespacedistance__field.html</anchorfile>
      <anchor>a065dcdb8fe0b7ed297fb87a62afa2fbd</anchor>
      <arglist>(const bodies::Body &amp;body, double resolution, EigenSTL::vector_Vector3d &amp;points)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacedistance__field.html</anchorfile>
      <anchor>a63a408622083b4e6ec8ba9944fb3b754</anchor>
      <arglist>(DistanceField)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>dynamics_solver</name>
    <filename>namespacedynamics__solver.html</filename>
    <class kind="class">dynamics_solver::DynamicsSolver</class>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacedynamics__solver.html</anchorfile>
      <anchor>af6fd7bb8b9ed820474384002888af730</anchor>
      <arglist>(DynamicsSolver)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>kinematic_constraints</name>
    <filename>namespacekinematic__constraints.html</filename>
    <class kind="struct">kinematic_constraints::ConstraintEvaluationResult</class>
    <class kind="class">kinematic_constraints::JointConstraint</class>
    <class kind="class">kinematic_constraints::KinematicConstraint</class>
    <class kind="class">kinematic_constraints::KinematicConstraintSet</class>
    <class kind="class">kinematic_constraints::OrientationConstraint</class>
    <class kind="class">kinematic_constraints::PositionConstraint</class>
    <class kind="class">kinematic_constraints::VisibilityConstraint</class>
    <member kind="function">
      <type>moveit_msgs::Constraints</type>
      <name>constructGoalConstraints</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>a88becba14be9ced36fefc7980271e132</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const robot_model::JointModelGroup *jmg, double tolerance_below, double tolerance_above)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::Constraints</type>
      <name>constructGoalConstraints</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>a3467fa073a3e0192aee160edcb2f6aa5</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const robot_model::JointModelGroup *jmg, double tolerance=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::Constraints</type>
      <name>constructGoalConstraints</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>ae2329e1593d3f47dc814cfa50f6099a5</anchor>
      <arglist>(const std::string &amp;link_name, const geometry_msgs::PoseStamped &amp;pose, double tolerance_pos=1e-3, double tolerance_angle=1e-2)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::Constraints</type>
      <name>constructGoalConstraints</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>a319e65d2daaa8843774674c6bd903fe0</anchor>
      <arglist>(const std::string &amp;link_name, const geometry_msgs::PoseStamped &amp;pose, const std::vector&lt; double &gt; &amp;tolerance_pos, const std::vector&lt; double &gt; &amp;tolerance_angle)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::Constraints</type>
      <name>constructGoalConstraints</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>ae8ab0389c013b701d08f97aac71872d4</anchor>
      <arglist>(const std::string &amp;link_name, const geometry_msgs::QuaternionStamped &amp;quat, double tolerance=1e-2)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::Constraints</type>
      <name>constructGoalConstraints</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>a846db8fcf4ff8971a869a8abd750200e</anchor>
      <arglist>(const std::string &amp;link_name, const geometry_msgs::Point &amp;reference_point, const geometry_msgs::PointStamped &amp;goal_point, double tolerance=1e-3)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::Constraints</type>
      <name>constructGoalConstraints</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>a30479c8676e59a464521633f30ad5350</anchor>
      <arglist>(const std::string &amp;link_name, const geometry_msgs::PointStamped &amp;goal_point, double tolerance=1e-3)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>countIndividualConstraints</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>a17218c618d802ee4b35bf5a6b965a621</anchor>
      <arglist>(const moveit_msgs::Constraints &amp;constr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstraintEvaluationResult</type>
      <name>finishPositionConstraintDecision</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>a358b1160cafeb2733e9aeb95b34e582a</anchor>
      <arglist>(const Eigen::Vector3d &amp;pt, const Eigen::Vector3d &amp;desired, const std::string &amp;name, double weight, bool result, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>ac413186f4440480526be840dbc824a6c</anchor>
      <arglist>(const moveit_msgs::Constraints &amp;constr)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::Constraints</type>
      <name>mergeConstraints</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>ab33b027559ab6207004a5866c3794aed</anchor>
      <arglist>(const moveit_msgs::Constraints &amp;first, const moveit_msgs::Constraints &amp;second)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>a511c45213c2864c44dbc881e21df4305</anchor>
      <arglist>(KinematicConstraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>a82e48180088ca2f13ebd0e79f9fe8623</anchor>
      <arglist>(JointConstraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>ac7684062b6619569429b973703dbc45c</anchor>
      <arglist>(OrientationConstraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>ad595d278b1156b468975956a9a55d9db</anchor>
      <arglist>(PositionConstraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>a55fa654811c1421dc1962b1b896a1fd5</anchor>
      <arglist>(VisibilityConstraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>af7d3e0dd059110de8e0c9c630027aea5</anchor>
      <arglist>(KinematicConstraintSet)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>normalizeAngle</name>
      <anchorfile>namespacekinematic__constraints.html</anchorfile>
      <anchor>ac3bb5580c38edde46eb9292465b6670e</anchor>
      <arglist>(double angle)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>kinematics</name>
    <filename>namespacekinematics.html</filename>
    <namespace>kinematics::DiscretizationMethods</namespace>
    <namespace>kinematics::KinematicErrors</namespace>
    <class kind="class">kinematics::KinematicsBase</class>
    <class kind="struct">kinematics::KinematicsQueryOptions</class>
    <class kind="struct">kinematics::KinematicsResult</class>
    <member kind="typedef">
      <type>DiscretizationMethods::DiscretizationMethod</type>
      <name>DiscretizationMethod</name>
      <anchorfile>namespacekinematics.html</anchorfile>
      <anchor>a37053065c92606f7c1d81c5767b8e924</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KinematicErrors::KinematicError</type>
      <name>KinematicError</name>
      <anchorfile>namespacekinematics.html</anchorfile>
      <anchor>a47d1b2217113bf4dc2b5f4d9da0115ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacekinematics.html</anchorfile>
      <anchor>ad1d92e4ab0d5a509ceeb129aa10cdcbe</anchor>
      <arglist>(KinematicsBase)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>kinematics::DiscretizationMethods</name>
    <filename>namespacekinematics_1_1DiscretizationMethods.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>DiscretizationMethod</name>
      <anchorfile>namespacekinematics_1_1DiscretizationMethods.html</anchorfile>
      <anchor>aeb93a96cec28fe29ca84b838652ee63e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_DISCRETIZATION</name>
      <anchorfile>namespacekinematics_1_1DiscretizationMethods.html</anchorfile>
      <anchor>aeb93a96cec28fe29ca84b838652ee63eae5ee69c27701d531ce5c83bacfa0cf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL_DISCRETIZED</name>
      <anchorfile>namespacekinematics_1_1DiscretizationMethods.html</anchorfile>
      <anchor>aeb93a96cec28fe29ca84b838652ee63ea9ba5fdeddd3ee32cdd6b17f1be1e8be4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOME_DISCRETIZED</name>
      <anchorfile>namespacekinematics_1_1DiscretizationMethods.html</anchorfile>
      <anchor>aeb93a96cec28fe29ca84b838652ee63eaefde56b9ab3ef5a3e01193d18fa7b286</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL_RANDOM_SAMPLED</name>
      <anchorfile>namespacekinematics_1_1DiscretizationMethods.html</anchorfile>
      <anchor>aeb93a96cec28fe29ca84b838652ee63ea4919c7d9eb1936fa0e66143f8deb1b26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOME_RANDOM_SAMPLED</name>
      <anchorfile>namespacekinematics_1_1DiscretizationMethods.html</anchorfile>
      <anchor>aeb93a96cec28fe29ca84b838652ee63ea0b2dafc761a2cd9029c3fe14f496961e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>kinematics::KinematicErrors</name>
    <filename>namespacekinematics_1_1KinematicErrors.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>KinematicError</name>
      <anchorfile>namespacekinematics_1_1KinematicErrors.html</anchorfile>
      <anchor>a4a6f0899b934dca3e0cece4685d13e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OK</name>
      <anchorfile>namespacekinematics_1_1KinematicErrors.html</anchorfile>
      <anchor>a4a6f0899b934dca3e0cece4685d13e14a2da50423beaa700d662194640673ca7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNSUPORTED_DISCRETIZATION_REQUESTED</name>
      <anchorfile>namespacekinematics_1_1KinematicErrors.html</anchorfile>
      <anchor>a4a6f0899b934dca3e0cece4685d13e14af3096b3226aa811cfc837f8d963718e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISCRETIZATION_NOT_INITIALIZED</name>
      <anchorfile>namespacekinematics_1_1KinematicErrors.html</anchorfile>
      <anchor>a4a6f0899b934dca3e0cece4685d13e14a3174fb06463cff735476bc07dca1cd96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTIPLE_TIPS_NOT_SUPPORTED</name>
      <anchorfile>namespacekinematics_1_1KinematicErrors.html</anchorfile>
      <anchor>a4a6f0899b934dca3e0cece4685d13e14a82c65b9f9965b56fe55c73657364a4bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMPTY_TIP_POSES</name>
      <anchorfile>namespacekinematics_1_1KinematicErrors.html</anchorfile>
      <anchor>a4a6f0899b934dca3e0cece4685d13e14aa9b39dd7dbe6f169eea28591207b6c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IK_SEED_OUTSIDE_LIMITS</name>
      <anchorfile>namespacekinematics_1_1KinematicErrors.html</anchorfile>
      <anchor>a4a6f0899b934dca3e0cece4685d13e14a65cce5c15c80af3b3080628202f46074</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOLVER_NOT_ACTIVE</name>
      <anchorfile>namespacekinematics_1_1KinematicErrors.html</anchorfile>
      <anchor>a4a6f0899b934dca3e0cece4685d13e14af4f97d6b755e32d3b94ac6fe5d1aa847</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SOLUTION</name>
      <anchorfile>namespacekinematics_1_1KinematicErrors.html</anchorfile>
      <anchor>a4a6f0899b934dca3e0cece4685d13e14a3cae2cf84f49545a98fcbb72869df691</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>kinematics_metrics</name>
    <filename>namespacekinematics__metrics.html</filename>
    <class kind="class">kinematics_metrics::KinematicsMetrics</class>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacekinematics__metrics.html</anchorfile>
      <anchor>afe4341588396430f0d854ab0ed018743</anchor>
      <arglist>(KinematicsMetrics)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>moveit</name>
    <filename>namespacemoveit.html</filename>
    <namespace>moveit::core</namespace>
    <namespace>moveit::tools</namespace>
    <class kind="class">moveit::ConstructException</class>
    <class kind="class">moveit::Exception</class>
    <member kind="function">
      <type>void</type>
      <name>get_backtrace</name>
      <anchorfile>namespacemoveit.html</anchorfile>
      <anchor>a17b4f138dac10a0e23296414a83ab9db</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>moveit::core</name>
    <filename>namespacemoveit_1_1core.html</filename>
    <class kind="class">moveit::core::AABB</class>
    <class kind="class">moveit::core::AttachedBody</class>
    <class kind="class">moveit::core::FixedJointModel</class>
    <class kind="class">moveit::core::FloatingJointModel</class>
    <class kind="class">moveit::core::JointModel</class>
    <class kind="class">moveit::core::JointModelGroup</class>
    <class kind="struct">moveit::core::JumpThreshold</class>
    <class kind="class">moveit::core::LinkModel</class>
    <class kind="struct">moveit::core::MaxEEFStep</class>
    <class kind="class">moveit::core::PlanarJointModel</class>
    <class kind="class">moveit::core::PrismaticJointModel</class>
    <class kind="class">moveit::core::RevoluteJointModel</class>
    <class kind="class">moveit::core::RobotModel</class>
    <class kind="class">moveit::core::RobotState</class>
    <class kind="class">moveit::core::Transforms</class>
    <class kind="struct">moveit::core::VariableBounds</class>
    <member kind="typedef">
      <type>boost::function&lt; void(AttachedBody *body, bool attached)&gt;</type>
      <name>AttachedBodyCallback</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a7e5071bd0525b17b00f373de2cad9e11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, Eigen::Isometry3d, std::less&lt; std::string &gt;, Eigen::aligned_allocator&lt; std::pair&lt; const std::string, Eigen::Isometry3d &gt; &gt; &gt;</type>
      <name>FixedTransformsMap</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>aab2e7121788a9fdfc2ca8ad2fc2f78a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; bool(RobotState *robot_state, const JointModelGroup *joint_group, const double *joint_group_variable_values)&gt;</type>
      <name>GroupStateValidityCallbackFn</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a7e30b6ca7b8fafe9e2dd276d60e00b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; const JointModel::Bounds * &gt;</type>
      <name>JointBoundsVector</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a8663e112a09dbce04e101d478f698f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, JointModelGroup * &gt;</type>
      <name>JointModelGroupMap</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>af4d2de83022f7f4739b7f85220fe891e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, const JointModelGroup * &gt;</type>
      <name>JointModelGroupMapConst</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>ac976e248510f5088d334151dd08b9be2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, JointModel * &gt;</type>
      <name>JointModelMap</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a81880d4acfe2c3d4d6c6db822dd8a1c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, const JointModel * &gt;</type>
      <name>JointModelMapConst</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a6c3f9bbb59fc92aff4ad7a40e197123e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, LinkModel * &gt;</type>
      <name>LinkModelMap</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>ad5bf6a2d4eaf49a0bad8f29eb1eb25c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, const LinkModel * &gt;</type>
      <name>LinkModelMapConst</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>aba4c4e76a1e12bf5d2bdb6aa07220126</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const LinkModel *, Eigen::Isometry3d, std::less&lt; const LinkModel * &gt;, Eigen::aligned_allocator&lt; std::pair&lt; const LinkModel *const, Eigen::Isometry3d &gt; &gt; &gt;</type>
      <name>LinkTransformMap</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a4586cb570da059f7f173b6fd9f358917</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; kinematics::KinematicsBasePtr(const JointModelGroup *)&gt;</type>
      <name>SolverAllocatorFn</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>aee2fefede757f1b0b2e59fc9dce12fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const JointModelGroup *, SolverAllocatorFn &gt;</type>
      <name>SolverAllocatorMapFn</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a5a90601303ff3ca4663e135e2135989c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, VariableBounds &gt;</type>
      <name>VariableBoundsMap</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a234567f9e8ff71ceb56a228c81adb0be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, int &gt;</type>
      <name>VariableIndexMap</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>ae101bd641ed50af6f5936c5a337ad3fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachedBodiesToAttachedCollisionObjectMsgs</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a405a20cc3fbd3b75125de11ffff64109</anchor>
      <arglist>(const std::vector&lt; const AttachedBody * &gt; &amp;attached_bodies, std::vector&lt; moveit_msgs::AttachedCollisionObject &gt; &amp;attached_collision_objs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>jointStateToRobotState</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a4908f99a3b9854a11be76eb4c41eee64</anchor>
      <arglist>(const sensor_msgs::JointState &amp;joint_state, RobotState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>jointTrajPointToRobotState</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>aa8cbfe302005fd3203167fc04e50ac03</anchor>
      <arglist>(const trajectory_msgs::JointTrajectory &amp;trajectory, std::size_t point_id, RobotState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a54b16152f275e8796e1b62db6009c725</anchor>
      <arglist>(Transforms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>ab2c30bf80cb40ffdd4f78758b3fa6641</anchor>
      <arglist>(RobotState)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>ad46b199b126b933d331e17324e878585</anchor>
      <arglist>(RobotModel)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a63aa00f41059a45cc5148f93ffc08f99</anchor>
      <arglist>(std::ostream &amp;out, const VariableBounds &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>af0e84ecacbc94a6f9fa1e8e439646be9</anchor>
      <arglist>(std::ostream &amp;out, const RobotState &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>robotStateMsgToRobotState</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a4c9f7d9832f39da9b6afea7081ea0546</anchor>
      <arglist>(const Transforms &amp;tf, const moveit_msgs::RobotState &amp;robot_state, RobotState &amp;state, bool copy_attached_bodies=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>robotStateMsgToRobotState</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a8e656bec1fe3ffa9c4a32cc8d5ee6274</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;robot_state, RobotState &amp;state, bool copy_attached_bodies=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotStateToJointStateMsg</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a05ca40d0135146ddf90d7f7f924dbff4</anchor>
      <arglist>(const RobotState &amp;state, sensor_msgs::JointState &amp;joint_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotStateToRobotStateMsg</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a7216db7b67dd756ef25beee831b50af1</anchor>
      <arglist>(const RobotState &amp;state, moveit_msgs::RobotState &amp;robot_state, bool copy_attached_bodies=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotStateToStream</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>aa43bf23fe4c8977687c932f8710d65c9</anchor>
      <arglist>(const RobotState &amp;state, std::ostream &amp;out, bool include_header=true, const std::string &amp;separator=&quot;,&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotStateToStream</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a59364c5f823c4aa5193b05bada6bcf69</anchor>
      <arglist>(const RobotState &amp;state, std::ostream &amp;out, const std::vector&lt; std::string &gt; &amp;joint_groups_ordering, bool include_header=true, const std::string &amp;separator=&quot;,&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>streamToRobotState</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>adfdd3b5f7c60f6a994225a3d6d9d3bfb</anchor>
      <arglist>(RobotState &amp;state, const std::string &amp;line, const std::string &amp;separator=&quot;,&quot;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::size_t</type>
      <name>MIN_STEPS_FOR_JUMP_THRESH</name>
      <anchorfile>namespacemoveit_1_1core.html</anchorfile>
      <anchor>a1f261b70ddd2dc4ff81de7520b58c209</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>moveit::tools</name>
    <filename>namespacemoveit_1_1tools.html</filename>
    <class kind="class">moveit::tools::BackgroundProcessing</class>
    <class kind="class">moveit::tools::Profiler</class>
  </compound>
  <compound kind="namespace">
    <name>moveit_controller_manager</name>
    <filename>namespacemoveit__controller__manager.html</filename>
    <class kind="struct">moveit_controller_manager::ExecutionStatus</class>
    <class kind="class">moveit_controller_manager::MoveItControllerHandle</class>
    <class kind="class">moveit_controller_manager::MoveItControllerManager</class>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacemoveit__controller__manager.html</anchorfile>
      <anchor>a376bc193a5fe3e9abf20c7c403b64324</anchor>
      <arglist>(MoveItControllerHandle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacemoveit__controller__manager.html</anchorfile>
      <anchor>a75ebdc60840fc0e1751362f9d7cc74fb</anchor>
      <arglist>(MoveItControllerManager)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>moveit_sensor_manager</name>
    <filename>namespacemoveit__sensor__manager.html</filename>
    <class kind="class">moveit_sensor_manager::MoveItSensorManager</class>
    <class kind="struct">moveit_sensor_manager::SensorInfo</class>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacemoveit__sensor__manager.html</anchorfile>
      <anchor>abd78da35a8848a7b873dac38bf8b6628</anchor>
      <arglist>(MoveItSensorManager)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>octomap</name>
    <filename>namespaceoctomap.html</filename>
  </compound>
  <compound kind="namespace">
    <name>planning_interface</name>
    <filename>namespaceplanning__interface.html</filename>
    <class kind="struct">planning_interface::MotionPlanDetailedResponse</class>
    <class kind="struct">planning_interface::MotionPlanResponse</class>
    <class kind="struct">planning_interface::PlannerConfigurationSettings</class>
    <class kind="class">planning_interface::PlannerManager</class>
    <class kind="class">planning_interface::PlanningContext</class>
    <member kind="typedef">
      <type>moveit_msgs::MotionPlanRequest</type>
      <name>MotionPlanRequest</name>
      <anchorfile>namespaceplanning__interface.html</anchorfile>
      <anchor>a66b7da9ae05ece3dbde7605d89208ae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, PlannerConfigurationSettings &gt;</type>
      <name>PlannerConfigurationMap</name>
      <anchorfile>namespaceplanning__interface.html</anchorfile>
      <anchor>a0f570b4d5ea3f33ee94b3b28ee9c0147</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceplanning__interface.html</anchorfile>
      <anchor>af351b56894fa266a878f1e5054cf31b9</anchor>
      <arglist>(PlanningContext)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceplanning__interface.html</anchorfile>
      <anchor>a470f7973968f5043caf7bf15be97aa37</anchor>
      <arglist>(PlannerManager)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>planning_request_adapter</name>
    <filename>namespaceplanning__request__adapter.html</filename>
    <class kind="class">planning_request_adapter::PlanningRequestAdapter</class>
    <class kind="class">planning_request_adapter::PlanningRequestAdapterChain</class>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceplanning__request__adapter.html</anchorfile>
      <anchor>a80e01d6b3528e0f33738b73b6574b4e6</anchor>
      <arglist>(PlanningRequestAdapter)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>planning_scene</name>
    <filename>namespaceplanning__scene.html</filename>
    <class kind="class">planning_scene::PlanningScene</class>
    <class kind="class">planning_scene::SceneTransforms</class>
    <member kind="typedef">
      <type>boost::function&lt; bool(const robot_state::RobotState &amp;, const robot_state::RobotState &amp;, bool)&gt;</type>
      <name>MotionFeasibilityFn</name>
      <anchorfile>namespaceplanning__scene.html</anchorfile>
      <anchor>a7a16bac3b4d29f92ff33d9209e4d575f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, std_msgs::ColorRGBA &gt;</type>
      <name>ObjectColorMap</name>
      <anchorfile>namespaceplanning__scene.html</anchorfile>
      <anchor>ad2e666339b9fdb4d06c14c207589996b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, object_recognition_msgs::ObjectType &gt;</type>
      <name>ObjectTypeMap</name>
      <anchorfile>namespaceplanning__scene.html</anchorfile>
      <anchor>a519e68563c632f2c9e20248e3d4022fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; bool(const robot_state::RobotState &amp;, bool)&gt;</type>
      <name>StateFeasibilityFn</name>
      <anchorfile>namespaceplanning__scene.html</anchorfile>
      <anchor>af50a0aed65f6f062dd6c11d1f20be10c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceplanning__scene.html</anchorfile>
      <anchor>a39429391a4496d2fcecf3825578b0432</anchor>
      <arglist>(PlanningScene)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>pr2_arm_kinematics</name>
    <filename>namespacepr2__arm__kinematics.html</filename>
    <class kind="class">pr2_arm_kinematics::PR2ArmIK</class>
    <class kind="class">pr2_arm_kinematics::PR2ArmIKSolver</class>
    <class kind="class">pr2_arm_kinematics::PR2ArmKinematicsPlugin</class>
    <member kind="function">
      <type>double</type>
      <name>computeEuclideanDistance</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>a31e48e861fab1c1a426bda845bf56303</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;array_1, const KDL::JntArray &amp;array_2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>a24f684af4bcce4a6d0c945aa27d04550</anchor>
      <arglist>(const urdf::Pose &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getKDLChain</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>a191692da6ba1e08ad26beff4496601bf</anchor>
      <arglist>(const urdf::ModelInterface &amp;model, const std::string &amp;root_name, const std::string &amp;tip_name, KDL::Chain &amp;kdl_chain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getKDLChainInfo</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>addcd9f2d0eeb2490a281e2904044c528</anchor>
      <arglist>(const KDL::Chain &amp;chain, moveit_msgs::KinematicSolverInfo &amp;chain_info)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix4f</type>
      <name>KDLToEigenMatrix</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>a88fb121d84b3b989a84aa21a14cf8567</anchor>
      <arglist>(const KDL::Frame &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>ae5993b5f4d88330b2efe7ae180fcc499</anchor>
      <arglist>(PR2ArmIKSolver)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>a215371773d30c0b18bb34dddb4247456</anchor>
      <arglist>(PR2ArmKinematicsPlugin)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveCosineEqn</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>a6db7f60734519de9986512012be6bb5d</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double &amp;c, double &amp;soln1, double &amp;soln2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveQuadratic</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>ae40d1d4a9b03d56f302c53f3a0a84173</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double &amp;c, double *x1, double *x2)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>IK_EPS</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>ac6a291b8c671719448644572f9b7aa35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NO_IK_SOLUTION</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>ae8b821620ec119e950524b084b97545d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NUM_JOINTS_ARM7DOF</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>a816d8c9a19c2e2967b4243a2585bba79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>TIMED_OUT</name>
      <anchorfile>namespacepr2__arm__kinematics.html</anchorfile>
      <anchor>a244bc5bbfbb9d1a10247215245eb3f36</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>robot_trajectory</name>
    <filename>namespacerobot__trajectory.html</filename>
    <class kind="class">robot_trajectory::RobotTrajectory</class>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespacerobot__trajectory.html</anchorfile>
      <anchor>ac4f1b5675c17a914be6251e6e12ff60e</anchor>
      <arglist>(RobotTrajectory)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>shapes</name>
    <filename>namespaceshapes.html</filename>
    <member kind="function">
      <type></type>
      <name>MOVEIT_CLASS_FORWARD</name>
      <anchorfile>namespaceshapes.html</anchorfile>
      <anchor>a108814a0910c33efcd0897cda420fbab</anchor>
      <arglist>(Shape)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>trajectory_processing</name>
    <filename>namespacetrajectory__processing.html</filename>
    <class kind="class">trajectory_processing::IterativeParabolicTimeParameterization</class>
    <class kind="class">trajectory_processing::IterativeSplineParameterization</class>
    <class kind="struct">trajectory_processing::SingleJointTrajectory</class>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>adjust_two_positions</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>af0f3c6c85aeae2eedbcec5a9a4058c6b</anchor>
      <arglist>(const int n, const double dt[], double x[], double x1[], double x2[], const double x2_i, const double x2_f)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fit_cubic_spline</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>af02ace9917a648c816c69c0e283ba68b</anchor>
      <arglist>(const int n, const double dt[], const double x[], double x1[], double x2[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>fit_spline_and_adjust_times</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>a35aecca0f70fd0c99f1139123a5c7789</anchor>
      <arglist>(const int n, double dt[], const double x[], double x1[], double x2[], const double max_velocity, const double min_velocity, const double max_acceleration, const double min_acceleration, const double tfactor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>global_adjustment_factor</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>a6c76a0906f958439984bd71d40e03c36</anchor>
      <arglist>(const int n, double dt[], const double x[], double x1[], double x2[], const double max_velocity, const double min_velocity, const double max_acceleration, const double min_acceleration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalAdjustment</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>aa95ede4c8ef27d2bbde2f424721b3c06</anchor>
      <arglist>(std::vector&lt; SingleJointTrajectory &gt; &amp;t2, int num_joints, const int num_points, std::vector&lt; double &gt; &amp;time_diff)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init_times</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>aea2cad431a46d28d11d0351ded95f9bd</anchor>
      <arglist>(const int n, double dt[], const double x[], const double max_velocity, const double min_velocity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTrajectoryEmpty</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>a2866f4aa730439adedbf4741cbf189be</anchor>
      <arglist>(const moveit_msgs::RobotTrajectory &amp;trajectory)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>trajectoryWaypointCount</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>ab1b91ad51a7d6157920fee82e4bf5416</anchor>
      <arglist>(const moveit_msgs::RobotTrajectory &amp;trajectory)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DEFAULT_ACCEL_MAX</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>a6c7a69b98eb30a152d9515bcfa049993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DEFAULT_VEL_MAX</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>a1666aa88dc8ff71c0ad05b6d02f27325</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>ROUNDING_THRESHOLD</name>
      <anchorfile>namespacetrajectory__processing.html</anchorfile>
      <anchor>a0d999cdaed17f77bafb8a7b0fa24dd70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>constraint_sampling</name>
    <title>Sampling Constraints</title>
    <filename>constraint_sampling</filename>
  </compound>
  <compound kind="page">
    <name>constraint_representation</name>
    <title>Representation and Evaluation of Constraints</title>
    <filename>constraint_representation</filename>
  </compound>
  <compound kind="page">
    <name>planning_scene_overview</name>
    <title>Planning Scene</title>
    <filename>planning_scene_overview</filename>
  </compound>
</tagfile>
