<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.1">
  <compound kind="file">
    <name>__init__.py</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_visualization/robowflex_visualization/</path>
    <filename>____init_____8py.html</filename>
    <namespace>robowflex_visualization</namespace>
    <member kind="variable" protection="private">
      <type>list</type>
      <name>__all__</name>
      <anchorfile>namespacerobowflex__visualization.html</anchorfile>
      <anchor>a9d84327659d501d79bde78cbf7ee979e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>acm.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/src/</path>
    <filename>acm_8cpp.html</filename>
    <includes id="acm_8h" name="acm.h" local="no" imported="no">robowflex_dart/acm.h</includes>
    <includes id="structure_8h" name="structure.h" local="no" imported="no">robowflex_dart/structure.h</includes>
  </compound>
  <compound kind="file">
    <name>acm.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/include/robowflex_dart/</path>
    <filename>acm_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <class kind="class">robowflex::darts::ACM</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::darts</namespace>
  </compound>
  <compound kind="file">
    <name>adapter.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>adapter_8h.html</filename>
    <namespace>robowflex</namespace>
    <member kind="typedef">
      <type>std::decay&lt; decltype(std::declval&lt; moveit::core::Transforms &gt;().getTransform(&quot;&quot;)) &gt;::type</type>
      <name>RobotPose</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a59139b755558b8adf4a4c78871e68925</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RobotPose, Eigen::aligned_allocator&lt; RobotPose &gt; &gt;</type>
      <name>RobotPoseVector</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>ae367625140363deefd55bc430b4fc413</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>M</type>
      <name>toMatrix</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a3e9d732facd1f9002dba976f05510d20</anchor>
      <arglist>(const RobotPose &amp;pose)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bag.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/io/</path>
    <filename>bag_8h.html</filename>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">robowflex_library/macros.h</includes>
    <class kind="class">robowflex::IO::Bag</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::IO</namespace>
  </compound>
  <compound kind="file">
    <name>baxter_multi_target.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>baxter__multi__target_8cpp.html</filename>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>baxter__multi__target_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>BOTH_ARMS</name>
      <anchorfile>baxter__multi__target_8cpp.html</anchorfile>
      <anchor>aea22d21298d4f29b3bd0b15425276c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>LEFT_ARM</name>
      <anchorfile>baxter__multi__target_8cpp.html</anchorfile>
      <anchor>a7e338f02bcd30a2970f4668c61c0661a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>LEFT_EE</name>
      <anchorfile>baxter__multi__target_8cpp.html</anchorfile>
      <anchor>a4de5f609b18cbf715fc3d7c794f7eb51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>RIGHT_EE</name>
      <anchorfile>baxter__multi__target_8cpp.html</anchorfile>
      <anchor>af9640b1b755d9089ca8f0decbfede4c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>benchmarking.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/</path>
    <filename>benchmarking_8cpp.html</filename>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">robowflex_library/macros.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="benchmarking_8h" name="benchmarking.h" local="no" imported="no">robowflex_library/benchmarking.h</includes>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="io_2yaml_8h" name="io/yaml.h" local="no" imported="no">robowflex_library/io/yaml.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="trajectory_8h" name="trajectory.h" local="no" imported="no">robowflex_library/trajectory.h</includes>
  </compound>
  <compound kind="file">
    <name>benchmarking.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>benchmarking_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <includes id="bag_8h" name="bag.h" local="no" imported="no">robowflex_library/io/bag.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <class kind="struct">robowflex::PlanningQuery</class>
    <class kind="class">robowflex::PlanData</class>
    <class kind="class">robowflex::PlanDataSet</class>
    <class kind="class">robowflex::Profiler</class>
    <class kind="struct">robowflex::Profiler::Options</class>
    <class kind="class">robowflex::Experiment</class>
    <class kind="class">robowflex::PlanDataSetOutputter</class>
    <class kind="class">robowflex::JSONPlanDataSetOutputter</class>
    <class kind="class">robowflex::TrajectoryPlanDataSetOutputter</class>
    <class kind="class">robowflex::OMPLPlanDataSetOutputter</class>
    <namespace>robowflex</namespace>
    <member kind="typedef">
      <type>boost::variant&lt; bool, double, int, std::size_t, std::string &gt;</type>
      <name>PlannerMetric</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>af95cfc04fe2f34f307819d42a0760550</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toMetricString</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a317a8c48a7935217d2d7e2fc527648ab</anchor>
      <arglist>(const PlannerMetric &amp;metric)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>benchmarking.md</name>
    <path>/home/runner/work/robowflex/robowflex/.docs/markdown/</path>
    <filename>benchmarking_8md.html</filename>
  </compound>
  <compound kind="file">
    <name>blender.py</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_visualization/scripts/</path>
    <filename>blender_8py.html</filename>
    <namespace>blender</namespace>
    <member kind="function">
      <type>def</type>
      <name>add_path</name>
      <anchorfile>namespaceblender.html</anchorfile>
      <anchor>a960912cdd7a80ab1d6a0c3ad95f7a34d</anchor>
      <arglist>(path)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>initialize_path</name>
      <anchorfile>namespaceblender.html</anchorfile>
      <anchor>a301b457e29352c721a246afdeb2a8cbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>find_package</name>
      <anchorfile>namespaceblender.html</anchorfile>
      <anchor>a4cfc386ba37a3cba848c50ab744d85bf</anchor>
      <arglist>(package)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>initialize_robowflex_path</name>
      <anchorfile>namespaceblender.html</anchorfile>
      <anchor>a757f6e3d00fd22ddbf8cb370a53cd389</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_ROS_module</name>
      <anchorfile>namespaceblender.html</anchorfile>
      <anchor>abf348529f8431425e46604256caa9575</anchor>
      <arglist>(module_name, module_file, package=&quot;robowflex_visualization&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>broadcaster.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/io/</path>
    <filename>broadcaster_8cpp.html</filename>
    <includes id="broadcaster_8h" name="broadcaster.h" local="no" imported="no">robowflex_library/io/broadcaster.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="tf_8h" name="tf.h" local="no" imported="no">robowflex_library/tf.h</includes>
  </compound>
  <compound kind="file">
    <name>broadcaster.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/io/</path>
    <filename>broadcaster_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <includes id="adapter_8h" name="adapter.h" local="no" imported="no">robowflex_library/adapter.h</includes>
    <class kind="class">robowflex::IO::RobotBroadcaster</class>
    <class kind="struct">robowflex::IO::RobotBroadcaster::StaticTransform</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::IO</namespace>
  </compound>
  <compound kind="file">
    <name>builder.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/</path>
    <filename>builder_8cpp.html</filename>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">robowflex_library/constants.h</includes>
    <includes id="random_8h" name="random.h" local="no" imported="no">robowflex_library/random.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="io_2yaml_8h" name="io/yaml.h" local="no" imported="no">robowflex_library/io/yaml.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="tf_8h" name="tf.h" local="no" imported="no">robowflex_library/tf.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
  </compound>
  <compound kind="file">
    <name>builder.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>builder_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <includes id="adapter_8h" name="adapter.h" local="no" imported="no">robowflex_library/adapter.h</includes>
    <includes id="id_8h" name="id.h" local="no" imported="no">robowflex_library/id.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <class kind="class">robowflex::MotionRequestBuilder</class>
    <namespace>robowflex</namespace>
  </compound>
  <compound kind="file">
    <name>class_forward.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>class__forward_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ROBOWFLEX_CLASS_FORWARD</name>
      <anchorfile>class__forward_8h.html</anchorfile>
      <anchor>a2cb5ebc2437dd62e6f96ef92a4ec2b4d</anchor>
      <arglist>(C)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOWFLEX_EIGEN</name>
      <anchorfile>class__forward_8h.html</anchorfile>
      <anchor>aeeafaf1859a3b4874334b7cd3c1cc750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CMakeCXXCompilerId.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/.docs/build/CMakeFiles/3.26.3/CompilerIdCXX/</path>
    <filename>CMakeCXXCompilerId_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>__has_include</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>ae5510d82e4946f1656f4969911c54736</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMPILER_ID</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>a81dee0709ded976b2e0319239f72d174</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STRINGIFY_HELPER</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>a2ae9b72bb13abaabfcf2ee0ba7d3fa1d</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STRINGIFY</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>a43e1cad902b6477bec893cb6430bd6c8</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PLATFORM_ID</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>adbc5372f40838899018fadbc89bd588b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARCHITECTURE_ID</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>aba35d0d200deaeb06aee95ca297acb28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEC</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>ad1280362da42492bbc11aa78cbf776ad</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEX</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>a46d5d95daa1bef867bd0179594310ed5</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CXX_STD</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>a34cc889e576a1ae6c84ae9e0a851ba21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>char const  *</type>
      <name>info_compiler</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>a4b0efeb7a5d59313986b3a0390f050f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char const  *</type>
      <name>info_platform</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>a2321403dee54ee23f0c2fa849c60f7d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char const  *</type>
      <name>info_arch</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>a59647e99d304ed33b15cb284c27ed391</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>info_language_standard_default</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>a4607cccf070750927b458473ca82c090</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>info_language_extensions_default</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>a0f46a8a39e09d9b803c4766904fd7e99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cob4.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/detail/</path>
    <filename>cob4_8cpp.html</filename>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="cob4_8h" name="cob4.h" local="no" imported="no">robowflex_library/detail/cob4.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
  </compound>
  <compound kind="file">
    <name>cob4.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/detail/</path>
    <filename>cob4_8h.html</filename>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <class kind="class">robowflex::Cob4Robot</class>
    <class kind="class">robowflex::OMPL::Cob4OMPLPipelinePlanner</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::OMPL</namespace>
  </compound>
  <compound kind="file">
    <name>cob4_multi_target.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>cob4__multi__target_8cpp.html</filename>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="cob4_8h" name="cob4.h" local="no" imported="no">robowflex_library/detail/cob4.h</includes>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="trajectory_8h" name="trajectory.h" local="no" imported="no">robowflex_library/trajectory.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>cob4__multi__target_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>LEFT_ARM</name>
      <anchorfile>cob4__multi__target_8cpp.html</anchorfile>
      <anchor>a7e338f02bcd30a2970f4668c61c0661a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>RIGHT_ARM</name>
      <anchorfile>cob4__multi__target_8cpp.html</anchorfile>
      <anchor>afc81b2f656d252cc02cca66985cbf6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>BOTH_ARMS</name>
      <anchorfile>cob4__multi__target_8cpp.html</anchorfile>
      <anchor>aea22d21298d4f29b3bd0b15425276c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>LEFT_EE</name>
      <anchorfile>cob4__multi__target_8cpp.html</anchorfile>
      <anchor>a4de5f609b18cbf715fc3d7c794f7eb51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>RIGHT_EE</name>
      <anchorfile>cob4__multi__target_8cpp.html</anchorfile>
      <anchor>af9640b1b755d9089ca8f0decbfede4c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cob4_test.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>cob4__test_8cpp.html</filename>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="cob4_8h" name="cob4.h" local="no" imported="no">robowflex_library/detail/cob4.h</includes>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="broadcaster_8h" name="broadcaster.h" local="no" imported="no">robowflex_library/io/broadcaster.h</includes>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="trajectory_8h" name="trajectory.h" local="no" imported="no">robowflex_library/trajectory.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>cob4__test_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>LEFT_ARM</name>
      <anchorfile>cob4__test_8cpp.html</anchorfile>
      <anchor>a7e338f02bcd30a2970f4668c61c0661a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>RIGHT_ARM</name>
      <anchorfile>cob4__test_8cpp.html</anchorfile>
      <anchor>afc81b2f656d252cc02cca66985cbf6dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cob4_visualization.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>cob4__visualization_8cpp.html</filename>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="cob4_8h" name="cob4.h" local="no" imported="no">robowflex_library/detail/cob4.h</includes>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="broadcaster_8h" name="broadcaster.h" local="no" imported="no">robowflex_library/io/broadcaster.h</includes>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="trajectory_8h" name="trajectory.h" local="no" imported="no">robowflex_library/trajectory.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>cob4__visualization_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>LEFT_ARM</name>
      <anchorfile>cob4__visualization_8cpp.html</anchorfile>
      <anchor>a7e338f02bcd30a2970f4668c61c0661a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>RIGHT_ARM</name>
      <anchorfile>cob4__visualization_8cpp.html</anchorfile>
      <anchor>afc81b2f656d252cc02cca66985cbf6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>LEFT_EE</name>
      <anchorfile>cob4__visualization_8cpp.html</anchorfile>
      <anchor>a4de5f609b18cbf715fc3d7c794f7eb51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>RIGHT_EE</name>
      <anchorfile>cob4__visualization_8cpp.html</anchorfile>
      <anchor>af9640b1b755d9089ca8f0decbfede4c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>colormap.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/io/</path>
    <filename>colormap_8cpp.html</filename>
    <includes id="colormap_8h" name="colormap.h" local="no" imported="no">robowflex_library/io/colormap.h</includes>
  </compound>
  <compound kind="file">
    <name>colormap.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/io/</path>
    <filename>colormap_8h.html</filename>
    <namespace>robowflex</namespace>
    <namespace>robowflex::color</namespace>
    <member kind="function">
      <type>void</type>
      <name>viridis</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>ae284dbcb7fbb7d9b5a13522f90bd579b</anchor>
      <arglist>(double s, Eigen::Ref&lt; Eigen::Vector4d &gt; color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coolwarm</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>a7ca44d86fe7cfd6dcc4b5a8eefc2cf3a</anchor>
      <arglist>(double s, Eigen::Ref&lt; Eigen::Vector4d &gt; color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extKindlmann</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>ab220c2a1b29d2210618a00420f73d39b</anchor>
      <arglist>(double s, Eigen::Ref&lt; Eigen::Vector4d &gt; color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plasma</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>a8988904165fd1a65a64d3a8c7200b41d</anchor>
      <arglist>(double s, Eigen::Ref&lt; Eigen::Vector4d &gt; color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>turbo</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>a1ebe7dd62e19b96b9e24637ef34840cf</anchor>
      <arglist>(double s, Eigen::Ref&lt; Eigen::Vector4d &gt; color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grayscale</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>a30f62cfbf581c5b97977f6bafbcec124</anchor>
      <arglist>(double s, Eigen::Ref&lt; Eigen::Vector4d &gt; color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toGrayscale</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>a92d65958ffa9fde2e26df6f5e2dfb6b0</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::Vector4d &gt; color)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>BLACK</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>abe5da2217d10d53d5f1aa82bc1118238</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>WHITE</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>ab1c0c2a12c44c43027c4bdc0a9bd56c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>GRAY</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>ad53ae034bf8fa3b30b3b35772b47c3fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>RED</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>a146ccc1d1f450ccf4c7f1c9e298de3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>PINK</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>acf0b9d0127f91d4ab485cce2ac23bdcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>PURPLE</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>ae50d4b82c435d1091184039134c62238</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>GREEN</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>a02cb008c025958ba65a182a295b79167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>BLUE</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>aec001f3816a5c4b578341adc608b746d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>YELLOW</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>a6afd647179adb4fc07cc179425d618cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>ORANGE</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>a5bccf6674a6b5821a3ef98efbe3fef28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>BROWN</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>a93386673e1d401e22369fc0b6bfb8596</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>constants.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>constants_8h.html</filename>
    <namespace>robowflex</namespace>
    <namespace>robowflex::constants</namespace>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>half</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>a166138dc97f05d5584d66619b339593f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>third</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>af27a652266c957ef79e97136b7f50402</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>eps</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>af542bb60f743d21d4a5891d714154a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>inf</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>aa6c065b9ae735f17b7d8b60d4387c02f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>nan</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>a6cfc32cffdea3d7c3d3be06b28014830</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>pi</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>ad9bb9150e9c0d5238a1116a4b4e3ac20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>half_pi</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>a905c069f310c88074b96676757bc2b73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>quarter_pi</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>aca28bc241f85746b3e272e39e566bd12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>two_pi</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>a8b3a15ea1267d7ef016f1f9b845f9322</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>ik_tolerance</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>a330c05b5737cc6acaf5b848be0b7072e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>ik_attempts</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>a9519420c41e07d705c8dd0c9b0cf6c05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector3d</type>
      <name>ik_vec_tolerance</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>ab80213c34e79cfc7478d843e679fd5f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>cart_rot_step_size</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>af46ecc884128ef9a19016e40b772c7a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>cart_pos_step_size</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>aa29487a615e283aee021f07302999f14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>cart_rot_jump_tol</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>aea6c7a675a86cc72740108131b4315c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>cart_pos_jump_tol</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>a7274a482dc74e05c942c228ee30f5778</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>default_workspace_bound</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>a98f2a63105c514d5e1166790d0364dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>default_allowed_planning_time</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>afff4342862a4b7beb93ad63498e06048</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>conversions.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_tesseract/src/</path>
    <filename>conversions_8cpp.html</filename>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="conversions_8h" name="conversions.h" local="no" imported="no">robowflex_tesseract/conversions.h</includes>
  </compound>
  <compound kind="file">
    <name>conversions.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_tesseract/include/robowflex_tesseract/</path>
    <filename>conversions_8h.html</filename>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <namespace>robowflex</namespace>
    <namespace>robowflex::hypercube</namespace>
    <member kind="function">
      <type>bool</type>
      <name>sceneToTesseractEnv</name>
      <anchorfile>namespacerobowflex_1_1hypercube.html</anchorfile>
      <anchor>aafb0aea31d1a8c36a88844f24cea505e</anchor>
      <arglist>(const robowflex::SceneConstPtr &amp;scene, tesseract::tesseract_ros::KDLEnvPtr env)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addAttachedBodiesToTesseractEnv</name>
      <anchorfile>namespacerobowflex_1_1hypercube.html</anchorfile>
      <anchor>ab125467d4965db92828802c90d76b440</anchor>
      <arglist>(const robot_state::RobotStatePtr &amp;state, tesseract::tesseract_ros::KDLEnvPtr env)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotStateToManipState</name>
      <anchorfile>namespacerobowflex_1_1hypercube.html</anchorfile>
      <anchor>ae762b63565a26a73d014b12c4523dd29</anchor>
      <arglist>(const robot_state::RobotStatePtr &amp;robot_state, const std::vector&lt; std::string &gt; &amp;manip_joint_names, std::vector&lt; double &gt; &amp;manip_joint_values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>manipStateToRobotState</name>
      <anchorfile>namespacerobowflex_1_1hypercube.html</anchorfile>
      <anchor>a01d7c6dce1e26d507fd36199d7d4cabc</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;manip_state, const std::string &amp;manip, const tesseract::tesseract_ros::KDLEnvPtr &amp;env, robot_state::RobotStatePtr robot_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>manipTesseractTrajToRobotTraj</name>
      <anchorfile>namespacerobowflex_1_1hypercube.html</anchorfile>
      <anchor>a686a6bdaa326f5a6282154e72833f671</anchor>
      <arglist>(const tesseract::TrajArray &amp;tesseract_traj, const robot_state::RobotStatePtr &amp;ref_state, const std::string &amp;manip, const tesseract::tesseract_ros::KDLEnvPtr &amp;env, robot_trajectory::RobotTrajectoryPtr trajectory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotTrajToManipTesseractTraj</name>
      <anchorfile>namespacerobowflex_1_1hypercube.html</anchorfile>
      <anchor>ae13dece340723d93ef6bd24a1185e275</anchor>
      <arglist>(const robot_trajectory::RobotTrajectoryPtr &amp;robot_traj, const std::string &amp;manip, const tesseract::tesseract_ros::KDLEnvPtr &amp;env, tesseract::TrajArray &amp;trajectory)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>design.md</name>
    <path>/home/runner/work/robowflex/robowflex/.docs/markdown/</path>
    <filename>design_8md.html</filename>
  </compound>
  <compound kind="file">
    <name>fetch.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/detail/</path>
    <filename>fetch_8cpp.html</filename>
    <includes id="fetch_8h" name="fetch.h" local="no" imported="no">robowflex_library/detail/fetch.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
  </compound>
  <compound kind="file">
    <name>fetch.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/detail/</path>
    <filename>fetch_8h.html</filename>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <class kind="class">robowflex::FetchRobot</class>
    <class kind="class">robowflex::OMPL::FetchOMPLPipelinePlanner</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::OMPL</namespace>
  </compound>
  <compound kind="file">
    <name>fetch_benchmark.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>fetch__benchmark_8cpp.html</filename>
    <includes id="benchmarking_8h" name="benchmarking.h" local="no" imported="no">robowflex_library/benchmarking.h</includes>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="fetch_8h" name="fetch.h" local="no" imported="no">robowflex_library/detail/fetch.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="gnuplot_8h" name="gnuplot.h" local="no" imported="no">robowflex_library/io/gnuplot.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__benchmark_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GROUP</name>
      <anchorfile>fetch__benchmark_8cpp.html</anchorfile>
      <anchor>a892b6dd5a49224f3e7646b914c4462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_bimanual.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/scripts/</path>
    <filename>fetch__bimanual_8cpp.html</filename>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="gui_8h" name="gui.h" local="no" imported="no">robowflex_dart/gui.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2io_8h" name="robowflex_dart/include/robowflex_dart/io.h" local="no" imported="no">robowflex_dart/io.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2planning_8h" name="robowflex_dart/include/robowflex_dart/planning.h" local="no" imported="no">robowflex_dart/planning.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2robot_8h" name="robowflex_dart/include/robowflex_dart/robot.h" local="no" imported="no">robowflex_dart/robot.h</includes>
    <includes id="space_8h" name="space.h" local="no" imported="no">robowflex_dart/space.h</includes>
    <includes id="tsr_8h" name="tsr.h" local="no" imported="no">robowflex_dart/tsr.h</includes>
    <includes id="world_8h" name="world.h" local="no" imported="no">robowflex_dart/world.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__bimanual_8cpp.html</anchorfile>
      <anchor>a2c3f6775325c30275d11c6abee2db6a0</anchor>
      <arglist>(int, char **)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_cartesian.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>fetch__cartesian_8cpp.html</filename>
    <includes id="fetch_8h" name="fetch.h" local="no" imported="no">robowflex_library/detail/fetch.h</includes>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="trajectory_8h" name="trajectory.h" local="no" imported="no">robowflex_library/trajectory.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__cartesian_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GROUP</name>
      <anchorfile>fetch__cartesian_8cpp.html</anchorfile>
      <anchor>a892b6dd5a49224f3e7646b914c4462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_chomp.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>fetch__chomp_8cpp.html</filename>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="fetch_8h" name="fetch.h" local="no" imported="no">robowflex_library/detail/fetch.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="trajectory_8h" name="trajectory.h" local="no" imported="no">robowflex_library/trajectory.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__chomp_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GROUP</name>
      <anchorfile>fetch__chomp_8cpp.html</anchorfile>
      <anchor>a892b6dd5a49224f3e7646b914c4462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_ik.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/scripts/</path>
    <filename>fetch__ik_8cpp.html</filename>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="gui_8h" name="gui.h" local="no" imported="no">robowflex_dart/gui.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2io_8h" name="robowflex_dart/include/robowflex_dart/io.h" local="no" imported="no">robowflex_dart/io.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2planning_8h" name="robowflex_dart/include/robowflex_dart/planning.h" local="no" imported="no">robowflex_dart/planning.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2robot_8h" name="robowflex_dart/include/robowflex_dart/robot.h" local="no" imported="no">robowflex_dart/robot.h</includes>
    <includes id="space_8h" name="space.h" local="no" imported="no">robowflex_dart/space.h</includes>
    <includes id="tsr_8h" name="tsr.h" local="no" imported="no">robowflex_dart/tsr.h</includes>
    <includes id="world_8h" name="world.h" local="no" imported="no">robowflex_dart/world.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__ik_8cpp.html</anchorfile>
      <anchor>a2c3f6775325c30275d11c6abee2db6a0</anchor>
      <arglist>(int, char **)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_lift.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/scripts/</path>
    <filename>fetch__lift_8cpp.html</filename>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="gui_8h" name="gui.h" local="no" imported="no">robowflex_dart/gui.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2io_8h" name="robowflex_dart/include/robowflex_dart/io.h" local="no" imported="no">robowflex_dart/io.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2planning_8h" name="robowflex_dart/include/robowflex_dart/planning.h" local="no" imported="no">robowflex_dart/planning.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2robot_8h" name="robowflex_dart/include/robowflex_dart/robot.h" local="no" imported="no">robowflex_dart/robot.h</includes>
    <includes id="space_8h" name="space.h" local="no" imported="no">robowflex_dart/space.h</includes>
    <includes id="tsr_8h" name="tsr.h" local="no" imported="no">robowflex_dart/tsr.h</includes>
    <includes id="world_8h" name="world.h" local="no" imported="no">robowflex_dart/world.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__lift_8cpp.html</anchorfile>
      <anchor>a2c3f6775325c30275d11c6abee2db6a0</anchor>
      <arglist>(int, char **)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_ompl_benchmark.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_ompl/scripts/</path>
    <filename>fetch__ompl__benchmark_8cpp.html</filename>
    <includes id="benchmarking_8h" name="benchmarking.h" local="no" imported="no">robowflex_library/benchmarking.h</includes>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="fetch_8h" name="fetch.h" local="no" imported="no">robowflex_library/detail/fetch.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="ompl__interface_8h" name="ompl_interface.h" local="no" imported="no">robowflex_ompl/ompl_interface.h</includes>
    <member kind="function">
      <type>Profiler::ComputeMetricCallback</type>
      <name>getNumVerticesCallback</name>
      <anchorfile>fetch__ompl__benchmark_8cpp.html</anchorfile>
      <anchor>a258217313a2032cca22902db50bb76f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Profiler::ComputeMetricCallback</type>
      <name>getGoalDistanceCallback</name>
      <anchorfile>fetch__ompl__benchmark_8cpp.html</anchorfile>
      <anchor>a6c9b00ed31f04b22817c1c0d94d71098</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__ompl__benchmark_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GROUP</name>
      <anchorfile>fetch__ompl__benchmark_8cpp.html</anchorfile>
      <anchor>a892b6dd5a49224f3e7646b914c4462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_ompl_interface.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_ompl/scripts/</path>
    <filename>fetch__ompl__interface_8cpp.html</filename>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="fetch_8h" name="fetch.h" local="no" imported="no">robowflex_library/detail/fetch.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="ompl__interface_8h" name="ompl_interface.h" local="no" imported="no">robowflex_ompl/ompl_interface.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__ompl__interface_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GROUP</name>
      <anchorfile>fetch__ompl__interface_8cpp.html</anchorfile>
      <anchor>a892b6dd5a49224f3e7646b914c4462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_ompl_scenes_benchmark.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_ompl/scripts/</path>
    <filename>fetch__ompl__scenes__benchmark_8cpp.html</filename>
    <includes id="benchmarking_8h" name="benchmarking.h" local="no" imported="no">robowflex_library/benchmarking.h</includes>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="fetch_8h" name="fetch.h" local="no" imported="no">robowflex_library/detail/fetch.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="ompl__interface_8h" name="ompl_interface.h" local="no" imported="no">robowflex_ompl/ompl_interface.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__ompl__scenes__benchmark_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GROUP</name>
      <anchorfile>fetch__ompl__scenes__benchmark_8cpp.html</anchorfile>
      <anchor>a892b6dd5a49224f3e7646b914c4462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_pick.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/scripts/</path>
    <filename>fetch__pick_8cpp.html</filename>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="fetch_8h" name="fetch.h" local="no" imported="no">robowflex_library/detail/fetch.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="tf_8h" name="tf.h" local="no" imported="no">robowflex_library/tf.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="gui_8h" name="gui.h" local="no" imported="no">robowflex_dart/gui.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2planning_8h" name="robowflex_dart/include/robowflex_dart/planning.h" local="no" imported="no">robowflex_dart/planning.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2robot_8h" name="robowflex_dart/include/robowflex_dart/robot.h" local="no" imported="no">robowflex_dart/robot.h</includes>
    <includes id="space_8h" name="space.h" local="no" imported="no">robowflex_dart/space.h</includes>
    <includes id="tsr_8h" name="tsr.h" local="no" imported="no">robowflex_dart/tsr.h</includes>
    <includes id="world_8h" name="world.h" local="no" imported="no">robowflex_dart/world.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__pick_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GROUP</name>
      <anchorfile>fetch__pick_8cpp.html</anchorfile>
      <anchor>a892b6dd5a49224f3e7646b914c4462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_plan.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/scripts/</path>
    <filename>fetch__plan_8cpp.html</filename>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="gui_8h" name="gui.h" local="no" imported="no">robowflex_dart/gui.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2io_8h" name="robowflex_dart/include/robowflex_dart/io.h" local="no" imported="no">robowflex_dart/io.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2planning_8h" name="robowflex_dart/include/robowflex_dart/planning.h" local="no" imported="no">robowflex_dart/planning.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2robot_8h" name="robowflex_dart/include/robowflex_dart/robot.h" local="no" imported="no">robowflex_dart/robot.h</includes>
    <includes id="space_8h" name="space.h" local="no" imported="no">robowflex_dart/space.h</includes>
    <includes id="world_8h" name="world.h" local="no" imported="no">robowflex_dart/world.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__plan_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_profile.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_ompl/scripts/</path>
    <filename>fetch__profile_8cpp.html</filename>
    <includes id="benchmarking_8h" name="benchmarking.h" local="no" imported="no">robowflex_library/benchmarking.h</includes>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="fetch_8h" name="fetch.h" local="no" imported="no">robowflex_library/detail/fetch.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="gnuplot_8h" name="gnuplot.h" local="no" imported="no">robowflex_library/io/gnuplot.h</includes>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="ompl__interface_8h" name="ompl_interface.h" local="no" imported="no">robowflex_ompl/ompl_interface.h</includes>
    <member kind="function">
      <type>Profiler::ProgressCallback</type>
      <name>getGNUPlotCallback</name>
      <anchorfile>fetch__profile_8cpp.html</anchorfile>
      <anchor>aabfd78e2b5a70d08d02f532e19f31d1b</anchor>
      <arglist>(IO::GNUPlotHelper &amp;plotter, const std::string &amp;field)</arglist>
    </member>
    <member kind="function">
      <type>Profiler::ProgressPropertyAllocator</type>
      <name>getNumVerticesAllocator</name>
      <anchorfile>fetch__profile_8cpp.html</anchorfile>
      <anchor>a749dc584dbf419b4e26c5077b5951422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Profiler::ProgressCallbackAllocator</type>
      <name>getRVIZGraphVisualizationAllocator</name>
      <anchorfile>fetch__profile_8cpp.html</anchorfile>
      <anchor>a1b715cb2364a40ad62df3f44980af70d</anchor>
      <arglist>(IO::RVIZHelperPtr &amp;rviz)</arglist>
    </member>
    <member kind="function">
      <type>Profiler::ComputeMetricCallback</type>
      <name>getGoalDistanceCallback</name>
      <anchorfile>fetch__profile_8cpp.html</anchorfile>
      <anchor>a6c9b00ed31f04b22817c1c0d94d71098</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__profile_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GROUP</name>
      <anchorfile>fetch__profile_8cpp.html</anchorfile>
      <anchor>a892b6dd5a49224f3e7646b914c4462fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>TIME</name>
      <anchorfile>fetch__profile_8cpp.html</anchorfile>
      <anchor>af6da079abf465267a3a6450cf9428a87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_robowflex_plan.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/scripts/</path>
    <filename>fetch__robowflex__plan_8cpp.html</filename>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="fetch_8h" name="fetch.h" local="no" imported="no">robowflex_library/detail/fetch.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="tf_8h" name="tf.h" local="no" imported="no">robowflex_library/tf.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="gui_8h" name="gui.h" local="no" imported="no">robowflex_dart/gui.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2planning_8h" name="robowflex_dart/include/robowflex_dart/planning.h" local="no" imported="no">robowflex_dart/planning.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2robot_8h" name="robowflex_dart/include/robowflex_dart/robot.h" local="no" imported="no">robowflex_dart/robot.h</includes>
    <includes id="space_8h" name="space.h" local="no" imported="no">robowflex_dart/space.h</includes>
    <includes id="tsr_8h" name="tsr.h" local="no" imported="no">robowflex_dart/tsr.h</includes>
    <includes id="world_8h" name="world.h" local="no" imported="no">robowflex_dart/world.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__robowflex__plan_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GROUP</name>
      <anchorfile>fetch__robowflex__plan_8cpp.html</anchorfile>
      <anchor>a892b6dd5a49224f3e7646b914c4462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_robowflex_planner.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/scripts/</path>
    <filename>fetch__robowflex__planner_8cpp.html</filename>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="fetch_8h" name="fetch.h" local="no" imported="no">robowflex_library/detail/fetch.h</includes>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="planner_8h" name="planner.h" local="no" imported="no">robowflex_dart/planner.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__robowflex__planner_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GROUP</name>
      <anchorfile>fetch__robowflex__planner_8cpp.html</anchorfile>
      <anchor>a892b6dd5a49224f3e7646b914c4462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_scenes_benchmark.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>fetch__scenes__benchmark_8cpp.html</filename>
    <includes id="benchmarking_8h" name="benchmarking.h" local="no" imported="no">robowflex_library/benchmarking.h</includes>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="fetch_8h" name="fetch.h" local="no" imported="no">robowflex_library/detail/fetch.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__scenes__benchmark_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GROUP</name>
      <anchorfile>fetch__scenes__benchmark_8cpp.html</anchorfile>
      <anchor>a892b6dd5a49224f3e7646b914c4462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_scenes_visualize.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>fetch__scenes__visualize_8cpp.html</filename>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="fetch_8h" name="fetch.h" local="no" imported="no">robowflex_library/detail/fetch.h</includes>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__scenes__visualize_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GROUP</name>
      <anchorfile>fetch__scenes__visualize_8cpp.html</anchorfile>
      <anchor>a892b6dd5a49224f3e7646b914c4462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_se2.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/scripts/</path>
    <filename>fetch__se2_8cpp.html</filename>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="random_8h" name="random.h" local="no" imported="no">robowflex_library/random.h</includes>
    <includes id="gui_8h" name="gui.h" local="no" imported="no">robowflex_dart/gui.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2io_8h" name="robowflex_dart/include/robowflex_dart/io.h" local="no" imported="no">robowflex_dart/io.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2planning_8h" name="robowflex_dart/include/robowflex_dart/planning.h" local="no" imported="no">robowflex_dart/planning.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2robot_8h" name="robowflex_dart/include/robowflex_dart/robot.h" local="no" imported="no">robowflex_dart/robot.h</includes>
    <includes id="space_8h" name="space.h" local="no" imported="no">robowflex_dart/space.h</includes>
    <includes id="world_8h" name="world.h" local="no" imported="no">robowflex_dart/world.h</includes>
    <includes id="acm_8h" name="acm.h" local="no" imported="no">robowflex_dart/acm.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__se2_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_tabletop_goalpose.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_tesseract/scripts/</path>
    <filename>fetch__tabletop__goalpose_8cpp.html</filename>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="fetch_8h" name="fetch.h" local="no" imported="no">robowflex_library/detail/fetch.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="yaml_8h" name="yaml.h" local="no" imported="no">robowflex_library/yaml.h</includes>
    <includes id="trajopt__planner_8h" name="trajopt_planner.h" local="no" imported="no">robowflex_tesseract/trajopt_planner.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__tabletop__goalpose_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GROUP</name>
      <anchorfile>fetch__tabletop__goalpose_8cpp.html</anchorfile>
      <anchor>a892b6dd5a49224f3e7646b914c4462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_tabletop_goalstate.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_tesseract/scripts/</path>
    <filename>fetch__tabletop__goalstate_8cpp.html</filename>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="fetch_8h" name="fetch.h" local="no" imported="no">robowflex_library/detail/fetch.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="yaml_8h" name="yaml.h" local="no" imported="no">robowflex_library/yaml.h</includes>
    <includes id="trajopt__planner_8h" name="trajopt_planner.h" local="no" imported="no">robowflex_tesseract/trajopt_planner.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__tabletop__goalstate_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GROUP</name>
      <anchorfile>fetch__tabletop__goalstate_8cpp.html</anchorfile>
      <anchor>a892b6dd5a49224f3e7646b914c4462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_tabletop_inits.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_tesseract/scripts/</path>
    <filename>fetch__tabletop__inits_8cpp.html</filename>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="fetch_8h" name="fetch.h" local="no" imported="no">robowflex_library/detail/fetch.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="yaml_8h" name="yaml.h" local="no" imported="no">robowflex_library/yaml.h</includes>
    <includes id="trajopt__planner_8h" name="trajopt_planner.h" local="no" imported="no">robowflex_tesseract/trajopt_planner.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__tabletop__inits_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GROUP</name>
      <anchorfile>fetch__tabletop__inits_8cpp.html</anchorfile>
      <anchor>a892b6dd5a49224f3e7646b914c4462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_tabletop_planning_time.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_tesseract/scripts/</path>
    <filename>fetch__tabletop__planning__time_8cpp.html</filename>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="fetch_8h" name="fetch.h" local="no" imported="no">robowflex_library/detail/fetch.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="yaml_8h" name="yaml.h" local="no" imported="no">robowflex_library/yaml.h</includes>
    <includes id="trajopt__planner_8h" name="trajopt_planner.h" local="no" imported="no">robowflex_tesseract/trajopt_planner.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__tabletop__planning__time_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GROUP</name>
      <anchorfile>fetch__tabletop__planning__time_8cpp.html</anchorfile>
      <anchor>a892b6dd5a49224f3e7646b914c4462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_test.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>fetch__test_8cpp.html</filename>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="fetch_8h" name="fetch.h" local="no" imported="no">robowflex_library/detail/fetch.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="trajectory_8h" name="trajectory.h" local="no" imported="no">robowflex_library/trajectory.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__test_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GROUP</name>
      <anchorfile>fetch__test_8cpp.html</anchorfile>
      <anchor>a892b6dd5a49224f3e7646b914c4462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_trajopt.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_tesseract/scripts/</path>
    <filename>fetch__trajopt_8cpp.html</filename>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="fetch_8h" name="fetch.h" local="no" imported="no">robowflex_library/detail/fetch.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="trajectory_8h" name="trajectory.h" local="no" imported="no">robowflex_library/trajectory.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="trajopt__planner_8h" name="trajopt_planner.h" local="no" imported="no">robowflex_tesseract/trajopt_planner.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__trajopt_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GROUP</name>
      <anchorfile>fetch__trajopt_8cpp.html</anchorfile>
      <anchor>a892b6dd5a49224f3e7646b914c4462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fetch_visualization.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>fetch__visualization_8cpp.html</filename>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="fetch_8h" name="fetch.h" local="no" imported="no">robowflex_library/detail/fetch.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="broadcaster_8h" name="broadcaster.h" local="no" imported="no">robowflex_library/io/broadcaster.h</includes>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="trajectory_8h" name="trajectory.h" local="no" imported="no">robowflex_library/trajectory.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fetch__visualization_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GROUP</name>
      <anchorfile>fetch__visualization_8cpp.html</anchorfile>
      <anchor>a892b6dd5a49224f3e7646b914c4462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometry.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/</path>
    <filename>geometry_8cpp.html</filename>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
  </compound>
  <compound kind="file">
    <name>geometry.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>geometry_8h.html</filename>
    <includes id="adapter_8h" name="adapter.h" local="no" imported="no">robowflex_library/adapter.h</includes>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <class kind="class">robowflex::Geometry</class>
    <class kind="class">robowflex::Geometry::ShapeType</class>
    <namespace>robowflex</namespace>
  </compound>
  <compound kind="file">
    <name>gnuplot.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/io/</path>
    <filename>gnuplot_8cpp.html</filename>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="gnuplot_8h" name="gnuplot.h" local="no" imported="no">robowflex_library/io/gnuplot.h</includes>
  </compound>
  <compound kind="file">
    <name>gnuplot.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/io/</path>
    <filename>gnuplot_8h.html</filename>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">robowflex_library/macros.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">robowflex_library/constants.h</includes>
    <includes id="benchmarking_8h" name="benchmarking.h" local="no" imported="no">robowflex_library/benchmarking.h</includes>
    <class kind="class">robowflex::IO::GNUPlotHelper</class>
    <class kind="struct">robowflex::IO::GNUPlotHelper::PlottingOptions</class>
    <class kind="struct">robowflex::IO::GNUPlotHelper::PlottingOptions::Axis</class>
    <class kind="struct">robowflex::IO::GNUPlotHelper::TimeSeriesOptions</class>
    <class kind="struct">robowflex::IO::GNUPlotHelper::BoxPlotOptions</class>
    <class kind="class">robowflex::IO::GNUPlotHelper::Instance</class>
    <class kind="class">robowflex::IO::GNUPlotPlanDataSetOutputter</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::IO</namespace>
  </compound>
  <compound kind="file">
    <name>gui.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/src/</path>
    <filename>gui_8cpp.html</filename>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">robowflex_library/constants.h</includes>
    <includes id="gui_8h" name="gui.h" local="no" imported="no">robowflex_dart/gui.h</includes>
  </compound>
  <compound kind="file">
    <name>gui.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/include/robowflex_dart/</path>
    <filename>gui_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <includes id="adapter_8h" name="adapter.h" local="no" imported="no">robowflex_library/adapter.h</includes>
    <includes id="world_8h" name="world.h" local="no" imported="no">robowflex_dart/world.h</includes>
    <includes id="space_8h" name="space.h" local="no" imported="no">robowflex_dart/space.h</includes>
    <includes id="tsr_8h" name="tsr.h" local="no" imported="no">robowflex_dart/tsr.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2planning_8h" name="robowflex_dart/include/robowflex_dart/planning.h" local="no" imported="no">robowflex_dart/planning.h</includes>
    <class kind="class">robowflex::darts::Viewer</class>
    <class kind="class">robowflex::darts::Window</class>
    <class kind="struct">robowflex::darts::Window::InteractiveOptions</class>
    <class kind="struct">robowflex::darts::Window::InteractiveReturn</class>
    <class kind="struct">robowflex::darts::Window::DnDReturn</class>
    <class kind="class">robowflex::darts::Widget</class>
    <class kind="class">robowflex::darts::ImGuiElement</class>
    <class kind="class">robowflex::darts::TextElement</class>
    <class kind="class">robowflex::darts::CheckboxElement</class>
    <class kind="class">robowflex::darts::ButtonElement</class>
    <class kind="class">robowflex::darts::RenderElement</class>
    <class kind="class">robowflex::darts::LinePlotElement</class>
    <class kind="class">robowflex::darts::WindowWidget</class>
    <class kind="class">robowflex::darts::TSREditWidget</class>
    <class kind="class">robowflex::darts::TSRSolveWidget</class>
    <class kind="struct">robowflex::darts::TSRSolveWidget::ErrorLines</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::darts</namespace>
    <member kind="typedef">
      <type>std::function&lt; void()&gt;</type>
      <name>ButtonCallback</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>a43e09343abe40e2ca5d599d239dbaa32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void()&gt;</type>
      <name>RenderCallback</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>aab2d1bf28ecdcc9c6e473c7c54bb44ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>generateUUID</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>aad2bcbc070089061186e1ee184476e63</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gui_test.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/scripts/</path>
    <filename>gui__test_8cpp.html</filename>
    <includes id="gui_8h" name="gui.h" local="no" imported="no">robowflex_dart/gui.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2io_8h" name="robowflex_dart/include/robowflex_dart/io.h" local="no" imported="no">robowflex_dart/io.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2robot_8h" name="robowflex_dart/include/robowflex_dart/robot.h" local="no" imported="no">robowflex_dart/robot.h</includes>
    <includes id="space_8h" name="space.h" local="no" imported="no">robowflex_dart/space.h</includes>
    <includes id="tsr_8h" name="tsr.h" local="no" imported="no">robowflex_dart/tsr.h</includes>
    <includes id="world_8h" name="world.h" local="no" imported="no">robowflex_dart/world.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>gui__test_8cpp.html</anchorfile>
      <anchor>a2c3f6775325c30275d11c6abee2db6a0</anchor>
      <arglist>(int, char **)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>handler.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/io/</path>
    <filename>handler_8h.html</filename>
    <class kind="class">robowflex::IO::Handler</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::IO</namespace>
  </compound>
  <compound kind="file">
    <name>hdf5.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/io/</path>
    <filename>hdf5_8cpp.html</filename>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="hdf5_8h" name="hdf5.h" local="no" imported="no">robowflex_library/io/hdf5.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">robowflex_library/macros.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
  </compound>
  <compound kind="file">
    <name>hdf5.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/io/</path>
    <filename>hdf5_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <class kind="class">robowflex::IO::HDF5Data</class>
    <class kind="class">robowflex::IO::HDF5File</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::IO</namespace>
  </compound>
  <compound kind="file">
    <name>home.md</name>
    <path>/home/runner/work/robowflex/robowflex/.docs/markdown/</path>
    <filename>home_8md.html</filename>
  </compound>
  <compound kind="file">
    <name>id.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/</path>
    <filename>id_8cpp.html</filename>
    <includes id="id_8h" name="id.h" local="no" imported="no">robowflex_library/id.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
  </compound>
  <compound kind="file">
    <name>id.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>id_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <class kind="class">robowflex::ID</class>
    <namespace>robowflex</namespace>
    <member kind="function">
      <type>bool</type>
      <name>compareIDs</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a28bcb44aebedd0e7485b420d445841b2</anchor>
      <arglist>(const ID &amp;a, const ID &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareIDs</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>ae88371a7f7ee2ec6ca58b843f4eae36d</anchor>
      <arglist>(const IDPtr &amp;a, const IDPtr &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareIDs</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>ab532c2071664e1d660074b069521e599</anchor>
      <arglist>(const IDConstPtr &amp;a, const IDConstPtr &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareIDs</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a7e4145fde7630eb6df2794b817aa827e</anchor>
      <arglist>(const ID &amp;a, const ID::Key &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareIDs</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a3f00160f3e95602c4e0a6bb6ef2d0276</anchor>
      <arglist>(const IDPtr &amp;a, const ID::Key &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareIDs</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a06418241c2aaf3a864ae9cb1486ae412</anchor>
      <arglist>(const IDConstPtr &amp;a, const ID::Key &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareIDs</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a8a89b73213c0edaef1f07a26761edede</anchor>
      <arglist>(const ID::Key &amp;a, const ID::Key &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>installation.md</name>
    <path>/home/runner/work/robowflex/robowflex/.docs/markdown/</path>
    <filename>installation_8md.html</filename>
  </compound>
  <compound kind="file">
    <name>robowflex_library/src/io.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/</path>
    <filename>robowflex__library_2src_2io_8cpp.html</filename>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="bag_8h" name="bag.h" local="no" imported="no">robowflex_library/io/bag.h</includes>
    <includes id="handler_8h" name="handler.h" local="no" imported="no">robowflex_library/io/handler.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">robowflex_library/macros.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
  </compound>
  <compound kind="file">
    <name>robowflex_dart/src/io.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/src/</path>
    <filename>robowflex__dart_2src_2io_8cpp.html</filename>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2io_8h" name="robowflex_dart/include/robowflex_dart/io.h" local="no" imported="no">robowflex_dart/io.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2robot_8h" name="robowflex_dart/include/robowflex_dart/robot.h" local="no" imported="no">robowflex_dart/robot.h</includes>
    <member kind="variable" static="yes">
      <type>static dart::utils::DartLoader</type>
      <name>URDF</name>
      <anchorfile>robowflex__dart_2src_2io_8cpp.html</anchorfile>
      <anchor>a702f9930c06a158953d07aa4347e27b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static dart::utils::PackageResourceRetriever</type>
      <name>PACKAGE</name>
      <anchorfile>robowflex__dart_2src_2io_8cpp.html</anchorfile>
      <anchor>a15718c470c31736211051bf346d63bb2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>robowflex_library/include/robowflex_library/io.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>robowflex__library_2include_2robowflex__library_2io_8h.html</filename>
    <namespace>robowflex</namespace>
    <namespace>robowflex::IO</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>generateUUID</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a996a4ec7bbc57f72f5544bec1b9d199c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>resolvePackage</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a4117e00a49336925d58c9b37f010b0e5</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; std::string &gt;</type>
      <name>findPackageURIs</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a3a8ce2bec32c4a5aa5f3cfd7bf264de2</anchor>
      <arglist>(const std::string &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>resolvePath</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>ab2ba1256c969b810983689062ed7a25d</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>resolveParent</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a3a89ab61c2d3e80618f9c0bb5a8f8197</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>makeFilepath</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a6bb0f4923d361fe515fe917250044aef</anchor>
      <arglist>(const std::string &amp;directory, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>loadXMLToString</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>ad3efd7be4a295a491b9f90317207aaf8</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>loadXacroToString</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>aec349912cd268197f920a72b92c63e60</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>loadFileToString</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a902af29cd974bbf290c3ec2e8312f006</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>runCommand</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a74ebd6c2fbd150ef347609ab650c1bed</anchor>
      <arglist>(const std::string &amp;cmd)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, YAML::Node &gt;</type>
      <name>loadFileToYAML</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a675bb2ff60b43d90a7661d23bbed75b3</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, std::vector&lt; YAML::Node &gt; &gt;</type>
      <name>loadAllFromFileToYAML</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a65be5de9bc7ef2117bbfd00383252440</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createFile</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>ad82de1798068dd05831c5eb168fe285e</anchor>
      <arglist>(std::ofstream &amp;out, const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>createTempFile</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a9edbc582d4a99e5b8b673b525be07dcc</anchor>
      <arglist>(std::ofstream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteFile</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a599f55ea02f8340f52f2da3a3255471e</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, std::vector&lt; std::string &gt; &gt;</type>
      <name>listDirectory</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a820ea54af8f26bddfff6d3c7f48e9ff3</anchor>
      <arglist>(const std::string &amp;directory)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getHostname</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a7815c4abc028bb90421f587f322fa976</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getProcessID</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a5eb9e620ba5cd9ee919ce07e9366ba41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getThreadID</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a9a2ab45fc8b4e3dbf992e145c2845a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::posix_time::ptime</type>
      <name>getDate</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a407d1992227eef3b0031d5c8e74aa278</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSeconds</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a315407b1e9df8de448487999788a271e</anchor>
      <arglist>(boost::posix_time::ptime start, boost::posix_time::ptime finish)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>threadSleep</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>af03f960b02b1eb3e2428f1b23bca4293</anchor>
      <arglist>(double seconds)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>tokenize</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a8a8c9368dd68ea4bb0c1843ff204746e</anchor>
      <arglist>(const std::string &amp;string, const std::string &amp;separators=&quot; &quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>YAMLToFile</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a14b1fd382262138158a5adbad8691ea0</anchor>
      <arglist>(const YAML::Node &amp;node, const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>messageToYAMLFile</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>ab412be03d8a95eb75be650509931ab80</anchor>
      <arglist>(T &amp;msg, const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>YAMLFileToMessage</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>afc0e96b30b4528708e238b3635addda7</anchor>
      <arglist>(T &amp;msg, const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getMessageMD5</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a8122defb07fdbfebfd40a2a8de5ed62b</anchor>
      <arglist>(T &amp;msg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>robowflex_dart/include/robowflex_dart/io.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/include/robowflex_dart/</path>
    <filename>robowflex__dart_2include_2robowflex__dart_2io_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <namespace>robowflex</namespace>
    <namespace>robowflex::darts</namespace>
    <namespace>robowflex::darts::IO</namespace>
    <member kind="function">
      <type>void</type>
      <name>addPackage</name>
      <anchorfile>namespacerobowflex_1_1darts_1_1IO.html</anchorfile>
      <anchor>ab963a929bce4f033355e4707a8e00ee7</anchor>
      <arglist>(const std::string &amp;package)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPackage</name>
      <anchorfile>namespacerobowflex_1_1darts_1_1IO.html</anchorfile>
      <anchor>ab10c2fc8a3475c54cf29ba281bd86208</anchor>
      <arglist>(const std::string &amp;package, const std::string &amp;location)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadURDF</name>
      <anchorfile>namespacerobowflex_1_1darts_1_1IO.html</anchorfile>
      <anchor>a8f94a731a469619b6898a0d346caec04</anchor>
      <arglist>(Robot &amp;robot, const std::string &amp;urdf)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPackageFile</name>
      <anchorfile>namespacerobowflex_1_1darts_1_1IO.html</anchorfile>
      <anchor>a0101c0e2c1d19141eadb2a011f1f557d</anchor>
      <arglist>(const std::string &amp;uri)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>joint.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/src/joints/</path>
    <filename>joint_8cpp.html</filename>
    <includes id="joints_8h" name="joints.h" local="no" imported="no">robowflex_dart/joints.h</includes>
    <includes id="space_8h" name="space.h" local="no" imported="no">robowflex_dart/space.h</includes>
    <includes id="world_8h" name="world.h" local="no" imported="no">robowflex_dart/world.h</includes>
  </compound>
  <compound kind="file">
    <name>joints.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/include/robowflex_dart/</path>
    <filename>joints_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <class kind="class">robowflex::darts::Joint</class>
    <class kind="class">robowflex::darts::RnJoint</class>
    <class kind="class">robowflex::darts::SO2Joint</class>
    <class kind="class">robowflex::darts::SO3Joint</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::darts</namespace>
  </compound>
  <compound kind="file">
    <name>log.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/</path>
    <filename>log_8cpp.html</filename>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
  </compound>
  <compound kind="file">
    <name>log.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>log_8h.html</filename>
    <namespace>robowflex</namespace>
    <namespace>robowflex::log</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RBX_FATAL</name>
      <anchorfile>log_8h.html</anchorfile>
      <anchor>ac2a3d7d9353da2efe88218f48364d10f</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RBX_ERROR</name>
      <anchorfile>log_8h.html</anchorfile>
      <anchor>a2c44743d46f951f291d07023cfbb62c1</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RBX_WARN</name>
      <anchorfile>log_8h.html</anchorfile>
      <anchor>a04c6e11f9a851b9912a30ee180f5c7ad</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RBX_INFO</name>
      <anchorfile>log_8h.html</anchorfile>
      <anchor>a2eca843b87983ff89ed09734e5e97a26</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RBX_DEBUG</name>
      <anchorfile>log_8h.html</anchorfile>
      <anchor>ab6ccb916136d7e0566ce12315b84b05c</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>formatRecurse</name>
      <anchorfile>namespacerobowflex_1_1log.html</anchorfile>
      <anchor>ae0ea7a690ae191989874f86710bff910</anchor>
      <arglist>(boost::format &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>formatRecurse</name>
      <anchorfile>namespacerobowflex_1_1log.html</anchorfile>
      <anchor>afaf677a59618f4004e83648c191b2271</anchor>
      <arglist>(boost::format &amp;f, T &amp;&amp;t, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>format</name>
      <anchorfile>namespacerobowflex_1_1log.html</anchorfile>
      <anchor>a7bcd1f6094375d49cd5b1b66413cf7d1</anchor>
      <arglist>(const std::string &amp;fmt, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showUpToFatal</name>
      <anchorfile>namespacerobowflex_1_1log.html</anchorfile>
      <anchor>adab20e7c2c483f019cd66e1fddfc537b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showUpToError</name>
      <anchorfile>namespacerobowflex_1_1log.html</anchorfile>
      <anchor>a8cab4127cff94298f2b74ae62c074e7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showUpToWarning</name>
      <anchorfile>namespacerobowflex_1_1log.html</anchorfile>
      <anchor>a8a30bc81e244ac8b83e08303e145c0fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showUpToInfo</name>
      <anchorfile>namespacerobowflex_1_1log.html</anchorfile>
      <anchor>a8a9c6ff56ad61f1e9ea7990fec36eb5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showUpToDebug</name>
      <anchorfile>namespacerobowflex_1_1log.html</anchorfile>
      <anchor>a8789f9911b13df9ebda1ed22166baef2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>macros.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>macros_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ROBOWFLEX_INCLUDE_EXISTS</name>
      <anchorfile>macros_8h.html</anchorfile>
      <anchor>a0af68f66e61725ec683794740917874d</anchor>
      <arglist>(file)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOWFLEX_AT_LEAST_INDIGO</name>
      <anchorfile>macros_8h.html</anchorfile>
      <anchor>aecb14573ba0e2696283d4a8c9c8dac93</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOWFLEX_AT_LEAST_KINETIC</name>
      <anchorfile>macros_8h.html</anchorfile>
      <anchor>aa6c58faad24f1328810b04d4e061c64d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOWFLEX_AT_LEAST_LUNAR</name>
      <anchorfile>macros_8h.html</anchorfile>
      <anchor>a68fdc5803aa8bfeb77b4a5df3173d5d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOWFLEX_AT_LEAST_MELODIC</name>
      <anchorfile>macros_8h.html</anchorfile>
      <anchor>a1a9ac25ecfa55309b79ab3532331a6b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOWFLEX_AT_LEAST_NOETIC</name>
      <anchorfile>macros_8h.html</anchorfile>
      <anchor>abac5de9fa56ab64b861926eb4601d6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOWFLEX_AT_MOST_MELODIC</name>
      <anchorfile>macros_8h.html</anchorfile>
      <anchor>a37fe2ffe64047290af096c6747dcaf18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_BOOST_164</name>
      <anchorfile>macros_8h.html</anchorfile>
      <anchor>ae0471ce73063b1fef4c45b2929d1b261</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_BOOST_158</name>
      <anchorfile>macros_8h.html</anchorfile>
      <anchor>a4f5c865297dd1c4327a7b1042aa670ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOWFLEX_YAML_FLOW</name>
      <anchorfile>macros_8h.html</anchorfile>
      <anchor>a8d80e8c7c7c78cc84ab0f7af6cf2634c</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOWFLEX_MOVEIT_VERSION_COMPUTE</name>
      <anchorfile>macros_8h.html</anchorfile>
      <anchor>a4c0b25203282f5baedd204cf8e5cc835</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOWFLEX_MOVEIT_VERSION</name>
      <anchorfile>macros_8h.html</anchorfile>
      <anchor>ae32d653aedc37a67658fa575f2a6ade8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOWFLEX_PRAGMA_HELPER0</name>
      <anchorfile>macros_8h.html</anchorfile>
      <anchor>a55c06931fdef32dd79bdc8f933e21f25</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOWFLEX_PRAGMA_HELPER1</name>
      <anchorfile>macros_8h.html</anchorfile>
      <anchor>a88db03a6bcf9fef77c4ba3b38dcd5a4a</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOWFLEX_PUSH_DISABLE_GCC_WARNING</name>
      <anchorfile>macros_8h.html</anchorfile>
      <anchor>a0f0536510815f9b8c1eb554ae2f07ee4</anchor>
      <arglist>(warning)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOWFLEX_POP_GCC</name>
      <anchorfile>macros_8h.html</anchorfile>
      <anchor>a335b9b2561e97ed978f5d3c263463b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOWFLEX_PUSH_DISABLE_CLANG_WARNING</name>
      <anchorfile>macros_8h.html</anchorfile>
      <anchor>a14207782048abde18f6d27676929dd89</anchor>
      <arglist>(warning)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOWFLEX_POP_CLANG</name>
      <anchorfile>macros_8h.html</anchorfile>
      <anchor>aaab1cfda5263c3e5180b2980ab3d406b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOWFLEX_DEMANGLE</name>
      <anchorfile>macros_8h.html</anchorfile>
      <anchor>a4a7889be8ed53dbb3864afb61bb91d5b</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ompl_interface.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_ompl/src/</path>
    <filename>ompl__interface_8cpp.html</filename>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">robowflex_library/macros.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="ompl__interface_8h" name="ompl_interface.h" local="no" imported="no">robowflex_ompl/ompl_interface.h</includes>
  </compound>
  <compound kind="file">
    <name>ompl_interface.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_ompl/include/robowflex_ompl/</path>
    <filename>ompl__interface_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <class kind="class">robowflex::OMPL::OMPLInterfacePlanner</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::OMPL</namespace>
  </compound>
  <compound kind="file">
    <name>ompl_trajectory.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_ompl/src/</path>
    <filename>ompl__trajectory_8cpp.html</filename>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="trajectory_8h" name="trajectory.h" local="no" imported="no">robowflex_library/trajectory.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="ompl__trajectory_8h" name="ompl_trajectory.h" local="no" imported="no">robowflex_ompl/ompl_trajectory.h</includes>
  </compound>
  <compound kind="file">
    <name>ompl_trajectory.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_ompl/include/robowflex_ompl/</path>
    <filename>ompl__trajectory_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <class kind="class">robowflex::OMPL::OMPLTrajectory</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::OMPL</namespace>
  </compound>
  <compound kind="file">
    <name>openrave.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/</path>
    <filename>openrave_8cpp.html</filename>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">robowflex_library/constants.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="openrave_8h" name="openrave.h" local="no" imported="no">robowflex_library/openrave.h</includes>
    <includes id="tf_8h" name="tf.h" local="no" imported="no">robowflex_library/tf.h</includes>
  </compound>
  <compound kind="file">
    <name>openrave.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>openrave_8h.html</filename>
    <namespace>robowflex</namespace>
    <namespace>robowflex::openrave</namespace>
    <member kind="function">
      <type>bool</type>
      <name>fromXMLFile</name>
      <anchorfile>namespacerobowflex_1_1openrave.html</anchorfile>
      <anchor>a0334a2b6366e94b0966fae9e93e5e555</anchor>
      <arglist>(moveit_msgs::PlanningScene &amp;planning_scene, const std::string &amp;file, const std::string &amp;model_dir)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>planner.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/src/</path>
    <filename>planner_8cpp.html</filename>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="trajectory_8h" name="trajectory.h" local="no" imported="no">robowflex_library/trajectory.h</includes>
    <includes id="planner_8h" name="planner.h" local="no" imported="no">robowflex_dart/planner.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2robot_8h" name="robowflex_dart/include/robowflex_dart/robot.h" local="no" imported="no">robowflex_dart/robot.h</includes>
    <includes id="structure_8h" name="structure.h" local="no" imported="no">robowflex_dart/structure.h</includes>
    <includes id="world_8h" name="world.h" local="no" imported="no">robowflex_dart/world.h</includes>
  </compound>
  <compound kind="file">
    <name>planner.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/include/robowflex_dart/</path>
    <filename>planner_8h.html</filename>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2planning_8h" name="robowflex_dart/include/robowflex_dart/planning.h" local="no" imported="no">robowflex_dart/planning.h</includes>
    <class kind="class">robowflex::darts::DARTPlanner</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::darts</namespace>
  </compound>
  <compound kind="file">
    <name>robowflex_library/src/planning.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/</path>
    <filename>robowflex__library_2src_2planning_8cpp.html</filename>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">robowflex_library/macros.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="trajectory_8h" name="trajectory.h" local="no" imported="no">robowflex_library/trajectory.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ROBOWFLEX_HAS_CARTESIAN_INTERPOLATOR</name>
      <anchorfile>robowflex__library_2src_2planning_8cpp.html</anchorfile>
      <anchor>a3cf26ad6f18f37d7a97c0ce9991f9a84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>robowflex_dart/src/planning.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/src/</path>
    <filename>robowflex__dart_2src_2planning_8cpp.html</filename>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="tf_8h" name="tf.h" local="no" imported="no">robowflex_library/tf.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2planning_8h" name="robowflex_dart/include/robowflex_dart/planning.h" local="no" imported="no">robowflex_dart/planning.h</includes>
    <includes id="tsr_8h" name="tsr.h" local="no" imported="no">robowflex_dart/tsr.h</includes>
    <includes id="world_8h" name="world.h" local="no" imported="no">robowflex_dart/world.h</includes>
  </compound>
  <compound kind="file">
    <name>robowflex_library/include/robowflex_library/planning.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>robowflex__library_2include_2robowflex__library_2planning_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">robowflex_library/constants.h</includes>
    <includes id="pool_8h" name="pool.h" local="no" imported="no">robowflex_library/pool.h</includes>
    <includes id="handler_8h" name="handler.h" local="no" imported="no">robowflex_library/io/handler.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <class kind="class">robowflex::Planner</class>
    <class kind="class">robowflex::PoolPlanner</class>
    <class kind="class">robowflex::SimpleCartesianPlanner</class>
    <class kind="class">robowflex::PipelinePlanner</class>
    <class kind="class">robowflex::OMPL::Settings</class>
    <class kind="class">robowflex::OMPL::OMPLPipelinePlanner</class>
    <class kind="class">robowflex::opt::CHOMPSettings</class>
    <class kind="class">robowflex::opt::CHOMPPipelinePlanner</class>
    <class kind="class">robowflex::opt::TrajOptPipelinePlanner</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::OMPL</namespace>
    <namespace>robowflex::opt</namespace>
    <member kind="function">
      <type>bool</type>
      <name>loadOMPLConfig</name>
      <anchorfile>namespacerobowflex_1_1OMPL.html</anchorfile>
      <anchor>a31492e70aba96a5bf04e48eb9840f6be</anchor>
      <arglist>(IO::Handler &amp;handler, const std::string &amp;config_file, std::vector&lt; std::string &gt; &amp;configs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadConfig</name>
      <anchorfile>namespacerobowflex_1_1opt.html</anchorfile>
      <anchor>afb390cb6d29ba1a56f2336733e190e5c</anchor>
      <arglist>(IO::Handler &amp;handler, const std::string &amp;config_file)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>robowflex_dart/include/robowflex_dart/planning.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/include/robowflex_dart/</path>
    <filename>robowflex__dart_2include_2robowflex__dart_2planning_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <includes id="space_8h" name="space.h" local="no" imported="no">robowflex_dart/space.h</includes>
    <class kind="class">robowflex::darts::ConstraintExtractor</class>
    <class kind="class">robowflex::darts::TSRGoal</class>
    <class kind="class">robowflex::darts::JointRegionGoal</class>
    <class kind="class">robowflex::darts::PlanBuilder</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::darts</namespace>
  </compound>
  <compound kind="file">
    <name>plugin.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/io/</path>
    <filename>plugin_8h.html</filename>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">robowflex_library/macros.h</includes>
    <class kind="class">robowflex::IO::PluginManager</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::IO</namespace>
  </compound>
  <compound kind="file">
    <name>plugin_io.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>plugin__io_8cpp.html</filename>
    <includes id="plugin_8h" name="plugin.h" local="no" imported="no">robowflex_library/io/plugin.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>plugin__io_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pool.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/</path>
    <filename>pool_8cpp.html</filename>
    <includes id="pool_8h" name="pool.h" local="no" imported="no">robowflex_library/pool.h</includes>
  </compound>
  <compound kind="file">
    <name>pool.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>pool_8h.html</filename>
    <class kind="class">robowflex::Pool</class>
    <class kind="class">robowflex::Pool::Joblet</class>
    <class kind="class">robowflex::Pool::Job</class>
    <namespace>robowflex</namespace>
  </compound>
  <compound kind="file">
    <name>primitives.py</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_visualization/robowflex_visualization/</path>
    <filename>primitives_8py.html</filename>
    <namespace>robowflex_visualization::primitives</namespace>
    <namespace>primitives</namespace>
    <member kind="function">
      <type>def</type>
      <name>add_box</name>
      <anchorfile>namespacerobowflex__visualization_1_1primitives.html</anchorfile>
      <anchor>a622370ddeeb74db30dbd52d0cdddea66</anchor>
      <arglist>(box)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_sphere</name>
      <anchorfile>namespacerobowflex__visualization_1_1primitives.html</anchorfile>
      <anchor>a9fdc8fe618085bda55591c5fdc464c3c</anchor>
      <arglist>(sphere)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_cylinder</name>
      <anchorfile>namespacerobowflex__visualization_1_1primitives.html</anchorfile>
      <anchor>a45c5491e412f0b7e5faf68203f49c910</anchor>
      <arglist>(cylinder)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_cone</name>
      <anchorfile>namespacerobowflex__visualization_1_1primitives.html</anchorfile>
      <anchor>ab8343c2c80dd3d56010d5564de3b219d</anchor>
      <arglist>(cone)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_mesh</name>
      <anchorfile>namespacerobowflex__visualization_1_1primitives.html</anchorfile>
      <anchor>ab0035abe7100b2c11f6941c55caeabeb</anchor>
      <arglist>(mesh)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_shape</name>
      <anchorfile>namespacerobowflex__visualization_1_1primitives.html</anchorfile>
      <anchor>a0e9e78bd6edf87dbe18de1477df99b43</anchor>
      <arglist>(shape)</arglist>
    </member>
    <member kind="variable">
      <type>dictionary</type>
      <name>SHAPE_MAP</name>
      <anchorfile>namespacerobowflex__visualization_1_1primitives.html</anchorfile>
      <anchor>a1bcbfba96ec97a86536a9b451620021a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>r2.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/detail/</path>
    <filename>r2_8h.html</filename>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <class kind="class">robowflex::R2Robot</class>
    <class kind="class">robowflex::OMPL::R2OMPLPipelinePlanner</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::OMPL</namespace>
  </compound>
  <compound kind="file">
    <name>random.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/</path>
    <filename>random_8cpp.html</filename>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">robowflex_library/constants.h</includes>
    <includes id="random_8h" name="random.h" local="no" imported="no">robowflex_library/random.h</includes>
  </compound>
  <compound kind="file">
    <name>random.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>random_8h.html</filename>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">robowflex_library/constants.h</includes>
    <namespace>robowflex</namespace>
    <namespace>robowflex::RNG</namespace>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>aaac4e8b03765162b787640b0a47bf1fe</anchor>
      <arglist>(unsigned int seed)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uniform01</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>a3769e670322eb743e80bf004ab39939c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uniformReal</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>a12d582893aa7629eebf3faa880ea54d3</anchor>
      <arglist>(double lower_bound, double upper_bound)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>uniformInt</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>aaa1fda5137839d2555722cd3a5ebe3dd</anchor>
      <arglist>(int lower_bound, int upper_bound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uniformBool</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>a738b24586a944f872dd8c64bb60cc7e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gaussian01</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>ac0b13f6a59c2616194c31131255f2ee3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gaussian</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>a5ca013b7f88a6ed0d4ad896d2792397a</anchor>
      <arglist>(double mean, double stddev)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gaussian</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>a416348bd2493b3990c684f00ebf2a005</anchor>
      <arglist>(double stddev)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>uniformRPY</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>a773a1a29cd8c902c8c58287359c4f016</anchor>
      <arglist>(const Eigen::Vector3d &amp;lbound, const Eigen::Vector3d &amp;ubound)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>uniformRPY</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>a197de7175c7c07fcf74bac9c3025cba0</anchor>
      <arglist>(const Eigen::Vector3d &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>unifromRPY</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>aa63573761aeef4592eae63932ce19842</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>uniformVec</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>addd52f1da4d8ca653f1abd08f44fb1a0</anchor>
      <arglist>(const Eigen::Vector3d &amp;lbound, const Eigen::Vector3d &amp;ubound)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>uniformVec</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>a8b7cffefd1ef7f7ddaf77d631bf1c9fe</anchor>
      <arglist>(const Eigen::Vector3d &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>gaussianVec</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>aeae4b5b5c25d08d4cfaa16d1d91ccdc0</anchor>
      <arglist>(const Eigen::Vector3d &amp;mean, const Eigen::Vector3d &amp;stddev)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>gaussianVec</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>aa6bd30c300219fccf0ad0e949ed74aa1</anchor>
      <arglist>(const Eigen::Vector3d &amp;stddev)</arglist>
    </member>
    <member kind="function">
      <type>Iter</type>
      <name>uniformSample</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>a9f06cb670e106f9cdd99dd26b1de2c03</anchor>
      <arglist>(Iter start, Iter end)</arglist>
    </member>
    <member kind="function">
      <type>Type &amp;</type>
      <name>uniformSample</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>aada299acf72e9bd0b024343bfd11c839</anchor>
      <arglist>(std::vector&lt; Type &gt; &amp;vector)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>robowflex_tesseract/README.md</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_tesseract/</path>
    <filename>robowflex__tesseract_2README_8md.html</filename>
  </compound>
  <compound kind="file">
    <name>robowflex_visualization/README.md</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_visualization/</path>
    <filename>robowflex__visualization_2README_8md.html</filename>
  </compound>
  <compound kind="file">
    <name>robowflex_dart/README.md</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/</path>
    <filename>robowflex__dart_2README_8md.html</filename>
  </compound>
  <compound kind="file">
    <name>.docker/README.md</name>
    <path>/home/runner/work/robowflex/robowflex/.docker/</path>
    <filename>_8docker_2README_8md.html</filename>
  </compound>
  <compound kind="file">
    <name>.docs/README.md</name>
    <path>/home/runner/work/robowflex/robowflex/.docs/</path>
    <filename>_8docs_2README_8md.html</filename>
  </compound>
  <compound kind="file">
    <name>resources_visualization.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>resources__visualization_8cpp.html</filename>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>resources__visualization_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>FETCH</name>
      <anchorfile>resources__visualization_8cpp.html</anchorfile>
      <anchor>a5d208033bb81ac02b94ee77a203793fe</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>UR5</name>
      <anchorfile>resources__visualization_8cpp.html</anchorfile>
      <anchor>ab6a372986df2d8a025ec7f7331bd28e3</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>PANDA</name>
      <anchorfile>resources__visualization_8cpp.html</anchorfile>
      <anchor>af839d6e09cf425b0c9b982d93461c013</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>BAXTER</name>
      <anchorfile>resources__visualization_8cpp.html</anchorfile>
      <anchor>a42d0de28f130ce2a346f89364297bc21</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>YUMI</name>
      <anchorfile>resources__visualization_8cpp.html</anchorfile>
      <anchor>ad761ed940cc6250e69f0e18adf72c43b</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>SHADOWHAND</name>
      <anchorfile>resources__visualization_8cpp.html</anchorfile>
      <anchor>a64238ddf1c438a6209c770323886f218</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rnjoint.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/src/joints/</path>
    <filename>rnjoint_8cpp.html</filename>
    <includes id="joints_8h" name="joints.h" local="no" imported="no">robowflex_dart/joints.h</includes>
    <includes id="space_8h" name="space.h" local="no" imported="no">robowflex_dart/space.h</includes>
  </compound>
  <compound kind="file">
    <name>robowflex_library/src/robot.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/</path>
    <filename>robowflex__library_2src_2robot_8cpp.html</filename>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="io_2yaml_8h" name="io/yaml.h" local="no" imported="no">robowflex_library/io/yaml.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">robowflex_library/macros.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="tf_8h" name="tf.h" local="no" imported="no">robowflex_library/tf.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
  </compound>
  <compound kind="file">
    <name>robowflex_dart/src/robot.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/src/</path>
    <filename>robowflex__dart_2src_2robot_8cpp.html</filename>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="tf_8h" name="tf.h" local="no" imported="no">robowflex_library/tf.h</includes>
    <includes id="acm_8h" name="acm.h" local="no" imported="no">robowflex_dart/acm.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2io_8h" name="robowflex_dart/include/robowflex_dart/io.h" local="no" imported="no">robowflex_dart/io.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2robot_8h" name="robowflex_dart/include/robowflex_dart/robot.h" local="no" imported="no">robowflex_dart/robot.h</includes>
  </compound>
  <compound kind="file">
    <name>robowflex_library/include/robowflex_library/robot.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>robowflex__library_2include_2robowflex__library_2robot_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <includes id="adapter_8h" name="adapter.h" local="no" imported="no">robowflex_library/adapter.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">robowflex_library/constants.h</includes>
    <includes id="handler_8h" name="handler.h" local="no" imported="no">robowflex_library/io/handler.h</includes>
    <class kind="class">robowflex::Robot</class>
    <class kind="struct">robowflex::Robot::IKQuery</class>
    <class kind="class">robowflex::ParamRobot</class>
    <namespace>robowflex</namespace>
  </compound>
  <compound kind="file">
    <name>robowflex_dart/include/robowflex_dart/robot.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/include/robowflex_dart/</path>
    <filename>robowflex__dart_2include_2robowflex__dart_2robot_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2io_8h" name="robowflex_dart/include/robowflex_dart/io.h" local="no" imported="no">robowflex_dart/io.h</includes>
    <includes id="structure_8h" name="structure.h" local="no" imported="no">robowflex_dart/structure.h</includes>
    <class kind="class">robowflex::darts::Robot</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::darts</namespace>
    <member kind="function">
      <type>RobotPtr</type>
      <name>loadMoveItRobot</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>a2dbfc2798b6d0a88aa807f37d5ca142d</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;urdf, const std::string &amp;srdf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>robot.py</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_visualization/robowflex_visualization/</path>
    <filename>robot_8py.html</filename>
    <class kind="class">robowflex_visualization::robot::Robot</class>
    <namespace>robowflex_visualization::robot</namespace>
    <namespace>robot</namespace>
  </compound>
  <compound kind="file">
    <name>robowflex.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>robowflex_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <includes id="adapter_8h" name="adapter.h" local="no" imported="no">robowflex_library/adapter.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">robowflex_library/macros.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="yaml_8h" name="yaml.h" local="no" imported="no">robowflex_library/yaml.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="bag_8h" name="bag.h" local="no" imported="no">robowflex_library/io/bag.h</includes>
    <includes id="handler_8h" name="handler.h" local="no" imported="no">robowflex_library/io/handler.h</includes>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="io_2yaml_8h" name="io/yaml.h" local="no" imported="no">robowflex_library/io/yaml.h</includes>
    <includes id="plugin_8h" name="plugin.h" local="no" imported="no">robowflex_library/io/plugin.h</includes>
    <includes id="pool_8h" name="pool.h" local="no" imported="no">robowflex_library/pool.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="tf_8h" name="tf.h" local="no" imported="no">robowflex_library/tf.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="benchmarking_8h" name="benchmarking.h" local="no" imported="no">robowflex_library/benchmarking.h</includes>
    <includes id="openrave_8h" name="openrave.h" local="no" imported="no">robowflex_library/openrave.h</includes>
    <namespace>robowflex</namespace>
  </compound>
  <compound kind="file">
    <name>robowflex.py</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_visualization/scripts/</path>
    <filename>robowflex_8py.html</filename>
    <namespace>robowflex</namespace>
    <member kind="variable">
      <type></type>
      <name>fetch</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a7fada167b1f9460e9e8e846ac42d77b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>scene</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a61813fadacd0aa13c7e772ab55c38a4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>frame</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a276e823279e3c6448235f9cbfae01a02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>cube</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a5590451ffb41026b24edb1c7aee39ee7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>robowflex_dart.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/include/</path>
    <filename>robowflex__dart_8h.html</filename>
    <includes id="structure_8h" name="structure.h" local="no" imported="no">robowflex_dart/structure.h</includes>
    <includes id="tsr_8h" name="tsr.h" local="no" imported="no">robowflex_dart/tsr.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2robot_8h" name="robowflex_dart/include/robowflex_dart/robot.h" local="no" imported="no">robowflex_dart/robot.h</includes>
    <includes id="world_8h" name="world.h" local="no" imported="no">robowflex_dart/world.h</includes>
    <includes id="space_8h" name="space.h" local="no" imported="no">robowflex_dart/space.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2planning_8h" name="robowflex_dart/include/robowflex_dart/planning.h" local="no" imported="no">robowflex_dart/planning.h</includes>
    <namespace>robowflex</namespace>
    <namespace>robowflex::darts</namespace>
  </compound>
  <compound kind="file">
    <name>rviz.md</name>
    <path>/home/runner/work/robowflex/robowflex/.docs/markdown/</path>
    <filename>rviz_8md.html</filename>
  </compound>
  <compound kind="file">
    <name>scene.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/</path>
    <filename>scene_8cpp.html</filename>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="io_2yaml_8h" name="io/yaml.h" local="no" imported="no">robowflex_library/io/yaml.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">robowflex_library/macros.h</includes>
    <includes id="openrave_8h" name="openrave.h" local="no" imported="no">robowflex_library/openrave.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="tf_8h" name="tf.h" local="no" imported="no">robowflex_library/tf.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <class kind="class">robowflex::Scene::CollisionPluginLoader</class>
    <namespace>robowflex</namespace>
  </compound>
  <compound kind="file">
    <name>scene.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>scene_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <includes id="adapter_8h" name="adapter.h" local="no" imported="no">robowflex_library/adapter.h</includes>
    <includes id="id_8h" name="id.h" local="no" imported="no">robowflex_library/id.h</includes>
    <class kind="class">robowflex::Scene</class>
    <namespace>robowflex</namespace>
  </compound>
  <compound kind="file">
    <name>scene.py</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_visualization/robowflex_visualization/</path>
    <filename>scene_8py.html</filename>
    <class kind="class">robowflex_visualization::scene::Scene</class>
    <namespace>robowflex_visualization::scene</namespace>
    <namespace>scene</namespace>
  </compound>
  <compound kind="file">
    <name>scripts.md</name>
    <path>/home/runner/work/robowflex/robowflex/.docs/markdown/</path>
    <filename>scripts_8md.html</filename>
  </compound>
  <compound kind="file">
    <name>services.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_movegroup/src/</path>
    <filename>services_8cpp.html</filename>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="io_2yaml_8h" name="io/yaml.h" local="no" imported="no">robowflex_library/io/yaml.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="trajectory_8h" name="trajectory.h" local="no" imported="no">robowflex_library/trajectory.h</includes>
    <includes id="yaml_8h" name="yaml.h" local="no" imported="no">robowflex_library/yaml.h</includes>
    <includes id="services_8h" name="services.h" local="no" imported="no">robowflex_movegroup/services.h</includes>
  </compound>
  <compound kind="file">
    <name>services.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_movegroup/include/robowflex_movegroup/</path>
    <filename>services_8h.html</filename>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <class kind="class">robowflex::movegroup::MoveGroupHelper</class>
    <class kind="struct">robowflex::movegroup::MoveGroupHelper::Action</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::movegroup</namespace>
  </compound>
  <compound kind="file">
    <name>shadowhand_ik.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>shadowhand__ik_8cpp.html</filename>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>shadowhand__ik_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable">
      <type>const std::vector&lt; std::string &gt;</type>
      <name>tips</name>
      <anchorfile>shadowhand__ik_8cpp.html</anchorfile>
      <anchor>af72ce0a1c60528a9a32e90420ad9e9f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>so2joint.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/src/joints/</path>
    <filename>so2joint_8cpp.html</filename>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">robowflex_library/constants.h</includes>
    <includes id="joints_8h" name="joints.h" local="no" imported="no">robowflex_dart/joints.h</includes>
    <includes id="space_8h" name="space.h" local="no" imported="no">robowflex_dart/space.h</includes>
  </compound>
  <compound kind="file">
    <name>so3joint.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/src/joints/</path>
    <filename>so3joint_8cpp.html</filename>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">robowflex_library/constants.h</includes>
    <includes id="joints_8h" name="joints.h" local="no" imported="no">robowflex_dart/joints.h</includes>
    <includes id="space_8h" name="space.h" local="no" imported="no">robowflex_dart/space.h</includes>
  </compound>
  <compound kind="file">
    <name>space.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/src/</path>
    <filename>space_8cpp.html</filename>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">robowflex_library/constants.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="space_8h" name="space.h" local="no" imported="no">robowflex_dart/space.h</includes>
    <includes id="world_8h" name="world.h" local="no" imported="no">robowflex_dart/world.h</includes>
  </compound>
  <compound kind="file">
    <name>space.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/include/robowflex_dart/</path>
    <filename>space_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2robot_8h" name="robowflex_dart/include/robowflex_dart/robot.h" local="no" imported="no">robowflex_dart/robot.h</includes>
    <includes id="joints_8h" name="joints.h" local="no" imported="no">robowflex_dart/joints.h</includes>
    <class kind="class">robowflex::darts::StateSpace</class>
    <class kind="class">robowflex::darts::StateSpace::StateSampler</class>
    <class kind="class">robowflex::darts::StateSpace::StateType</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::darts</namespace>
  </compound>
  <compound kind="file">
    <name>structure.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/src/</path>
    <filename>structure_8cpp.html</filename>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="acm_8h" name="acm.h" local="no" imported="no">robowflex_dart/acm.h</includes>
    <includes id="structure_8h" name="structure.h" local="no" imported="no">robowflex_dart/structure.h</includes>
  </compound>
  <compound kind="file">
    <name>structure.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/include/robowflex_dart/</path>
    <filename>structure_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <includes id="adapter_8h" name="adapter.h" local="no" imported="no">robowflex_library/adapter.h</includes>
    <includes id="tf_8h" name="tf.h" local="no" imported="no">robowflex_library/tf.h</includes>
    <class kind="class">robowflex::darts::Structure</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::darts</namespace>
    <namespace>robowflex::darts::magic</namespace>
    <member kind="function">
      <type>dart::dynamics::ShapePtr</type>
      <name>makeGeometry</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>a6d7c4b57886aad4cd2cf44461d5ed42f</anchor>
      <arglist>(const GeometryPtr &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::dynamics::BoxShape &gt;</type>
      <name>makeBox</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>afdd8c4d0aae1003f64ec8e6b8afa6ee4</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::Vector3d &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::dynamics::BoxShape &gt;</type>
      <name>makeBox</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>ac626e749615172491dce34f370b2c576</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::dynamics::CylinderShape &gt;</type>
      <name>makeCylinder</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>a00ddd4641427e8044b293079aabc145d</anchor>
      <arglist>(double radius, double height)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::dynamics::SphereShape &gt;</type>
      <name>makeSphere</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>a3ca6d4b92b5df5be1eef8ba872881fa3</anchor>
      <arglist>(double radius)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::dynamics::MeshShape &gt;</type>
      <name>makeMesh</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>ad4c3a9fb24780aa997003ccd46a7e946</anchor>
      <arglist>(const GeometryPtr &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::dynamics::MeshShape &gt;</type>
      <name>makeArcsegment</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>a2291cdf216a3236c3bbac94df3e21a6a</anchor>
      <arglist>(double low, double high, double inner_radius, double outer_radius, std::size_t resolution=32)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColor</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>a075e5a421093f31718cc61e89c52251a</anchor>
      <arglist>(dart::dynamics::BodyNode *node, const Eigen::Vector4d &amp;color)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DEFAULT_DENSITY</name>
      <anchorfile>namespacerobowflex_1_1darts_1_1magic.html</anchorfile>
      <anchor>adb5f5ea20b574f5f3b51a11b16b7ce0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DEFAULT_DAMPING</name>
      <anchorfile>namespacerobowflex_1_1darts_1_1magic.html</anchorfile>
      <anchor>a7bab53d9be7ae72073c5d1ee5271487d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DEFAULT_RESTITUTION</name>
      <anchorfile>namespacerobowflex_1_1darts_1_1magic.html</anchorfile>
      <anchor>a59610bfebdd58a0ba6bdcb81ed5e6d86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>style.md</name>
    <path>/home/runner/work/robowflex/robowflex/.docs/markdown/</path>
    <filename>style_8md.html</filename>
  </compound>
  <compound kind="file">
    <name>tapedeck.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_movegroup/scripts/</path>
    <filename>tapedeck_8cpp.html</filename>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="services_8h" name="services.h" local="no" imported="no">robowflex_movegroup/services.h</includes>
    <member kind="function">
      <type>void</type>
      <name>callback</name>
      <anchorfile>tapedeck_8cpp.html</anchorfile>
      <anchor>a71a61eac1f6c474c38e7aa100cc8f341</anchor>
      <arglist>(movegroup::MoveGroupHelper::Action &amp;action)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tapedeck_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tf.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/</path>
    <filename>tf_8cpp.html</filename>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="random_8h" name="random.h" local="no" imported="no">robowflex_library/random.h</includes>
    <includes id="tf_8h" name="tf.h" local="no" imported="no">robowflex_library/tf.h</includes>
  </compound>
  <compound kind="file">
    <name>tf.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>tf_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <includes id="adapter_8h" name="adapter.h" local="no" imported="no">robowflex_library/adapter.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">robowflex_library/constants.h</includes>
    <namespace>robowflex</namespace>
    <namespace>robowflex::TF</namespace>
    <member kind="function">
      <type>RobotPose</type>
      <name>identity</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>ad3fe2e98d5f345a814076ac5e72f42e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>createPoseXYZ</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a64fe1f7962e920823606ea7bd3116a28</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>createPoseXYZ</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a024aee0521b09149fed0abbb0c2b88ac</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::Vector3d &gt; &amp;translation)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>createPoseXYZ</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>af4bfc510d4c9a23669df8401a064583a</anchor>
      <arglist>(double x, double y, double z, double X, double Y, double Z)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>createPoseXYZ</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a4df5857e76855c50a4062e8189018d7f</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::Vector3d &gt; &amp;translation, const Eigen::Ref&lt; const Eigen::Vector3d &gt; &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>createPoseQ</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a573a0ab7df9d8ce2a5bbc0ed6353b2c8</anchor>
      <arglist>(double x, double y, double z, double W, double X, double Y, double Z)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>createPoseQ</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>aa1b9037e353e088347bbd9b31bb3f071</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::Vector3d &gt; &amp;translation, const Eigen::Ref&lt; const Eigen::Vector4d &gt; &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>createPoseQ</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>acaf2b14023e3ec216438e971f61bb3a2</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::Vector3d &gt; &amp;translation, const Eigen::Quaterniond &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Quaterniond</type>
      <name>getPoseRotation</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>af489ecef90bd4233553c1f7e744d944a</anchor>
      <arglist>(const RobotPose &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>pointMsgToEigen</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a6ef7477d38ed3d634c35e372e0a86ade</anchor>
      <arglist>(const geometry_msgs::Point &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Point</type>
      <name>pointEigenToMsg</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>aa786c41125b645e01ec24fd89193aa8c</anchor>
      <arglist>(const Eigen::Vector3d &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>vectorMsgToEigen</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a1ed7fbaac296f875a3dfc136ff80bc99</anchor>
      <arglist>(const geometry_msgs::Vector3 &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Vector3</type>
      <name>vectorEigenToMsg</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a1708cf70a26bb21cbdeea7df8e7dec9b</anchor>
      <arglist>(const Eigen::Vector3d &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>poseMsgToEigen</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a4bae1252b665b01a76b783986a365251</anchor>
      <arglist>(const geometry_msgs::Pose &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Pose</type>
      <name>poseEigenToMsg</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a7065853322259e60f3b2ce12f2ded0b0</anchor>
      <arglist>(const RobotPose &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Quaterniond</type>
      <name>quaternionMsgToEigen</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>aa36db77a74d939b2d1c6eac8579f6921</anchor>
      <arglist>(const geometry_msgs::Quaternion &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Quaternion</type>
      <name>quaternionEigenToMsg</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>ae84c5fbe81f21d64a9caa67bad89563d</anchor>
      <arglist>(const Eigen::Quaterniond &amp;quaternion)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::BoundingVolume</type>
      <name>getBoundingVolume</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>ab2aee755c034bcbf58ac1660dbf33c6c</anchor>
      <arglist>(const RobotPose &amp;pose, const GeometryConstPtr &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::PositionConstraint</type>
      <name>getPositionConstraint</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>adf0cce7ea1ccd1e413f859d0ed4fe0e1</anchor>
      <arglist>(const std::string &amp;ee_name, const std::string &amp;base_name, const RobotPose &amp;pose, const GeometryConstPtr &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>samplePositionConstraint</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a44dc89c4ce9ca2eb587eabcbaaf6f184</anchor>
      <arglist>(const moveit_msgs::PositionConstraint &amp;pc)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::OrientationConstraint</type>
      <name>getOrientationConstraint</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a1519d7a4836023d69ae0cd587a527906</anchor>
      <arglist>(const std::string &amp;ee_name, const std::string &amp;base_name, const Eigen::Quaterniond &amp;orientation, const Eigen::Vector3d &amp;tolerances)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Quaterniond</type>
      <name>sampleOrientation</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a6e8c3dcd0a542c8923fe4eea954d6948</anchor>
      <arglist>(const Eigen::Quaterniond &amp;orientation, const Eigen::Vector3d &amp;tolerances)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Quaterniond</type>
      <name>sampleOrientationUniform</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>ac8e76eba36cdb957bda43ab55931caa2</anchor>
      <arglist>(const Eigen::Vector3d &amp;tolerances)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Quaterniond</type>
      <name>offsetOrientation</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>aaf266eedc3516efb48d44d8e85e51480</anchor>
      <arglist>(const Eigen::Quaterniond &amp;orientation, const Eigen::Vector3d &amp;axis, double value)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>samplePositionUniform</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>aa0fec7eac1fc03690279247e59f8ac9b</anchor>
      <arglist>(const Eigen::Vector3d &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>samplePositionGaussian</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a6c85d25d4fe28c18e6f966f481a7c74f</anchor>
      <arglist>(const Eigen::Vector3d &amp;stddev)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>samplePoseUniform</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a7eddceb3f96f177705748be6d5e565b6</anchor>
      <arglist>(const Eigen::Vector3d &amp;pos_bounds, const Eigen::Vector3d &amp;orn_bounds)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>samplePoseGaussian</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>ae1ceb7ed08a654ab16d6550e270531f8</anchor>
      <arglist>(const Eigen::Vector3d &amp;pos_stddev, const Eigen::Vector3d &amp;orn_bounds)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>transformMsgToEigen</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>ae91bd26676e0d089ef7ee9370f29ffeb</anchor>
      <arglist>(const geometry_msgs::TransformStamped &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::TransformStamped</type>
      <name>transformEigenToMsg</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a3e3319cc164ab3b14dfefc3e1d9bd4bc</anchor>
      <arglist>(const std::string &amp;source, const std::string &amp;target, const RobotPose &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>angleNormalize</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a9dd774bfe83b1e1b4d97df5d60fbed2f</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>toDegrees</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a36d1509d93c50c9baf8cc1788ee18e48</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>toRadians</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a5d08f24cb62e1f2eefab639b96c769aa</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVecZero</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>ae2239f3ba046e0da099fd3246279d278</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;v, double tolerance=constants::eps)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>trajectory.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/</path>
    <filename>trajectory_8cpp.html</filename>
    <includes id="trajectory_8h" name="trajectory.h" local="no" imported="no">robowflex_library/trajectory.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">robowflex_library/constants.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="io_2yaml_8h" name="io/yaml.h" local="no" imported="no">robowflex_library/io/yaml.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="yaml_8h" name="yaml.h" local="no" imported="no">robowflex_library/yaml.h</includes>
  </compound>
  <compound kind="file">
    <name>trajectory.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>trajectory_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <class kind="class">robowflex::Trajectory</class>
    <namespace>robowflex</namespace>
    <member kind="typedef">
      <type>std::function&lt; double(const robot_state::RobotState &amp;, const robot_state::RobotState &amp;)&gt;</type>
      <name>PathMetric</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>ae752ff77754c646b8e84c741ee9a6437</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>trajopt_planner.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_tesseract/src/</path>
    <filename>trajopt__planner_8cpp.html</filename>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="trajectory_8h" name="trajectory.h" local="no" imported="no">robowflex_library/trajectory.h</includes>
    <includes id="conversions_8h" name="conversions.h" local="no" imported="no">robowflex_tesseract/conversions.h</includes>
    <includes id="trajopt__planner_8h" name="trajopt_planner.h" local="no" imported="no">robowflex_tesseract/trajopt_planner.h</includes>
  </compound>
  <compound kind="file">
    <name>trajopt_planner.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_tesseract/include/robowflex_tesseract/</path>
    <filename>trajopt__planner_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <class kind="class">robowflex::TrajOptPlanner</class>
    <class kind="struct">robowflex::TrajOptPlanner::Options</class>
    <namespace>robowflex</namespace>
  </compound>
  <compound kind="file">
    <name>tsr.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/src/</path>
    <filename>tsr_8cpp.html</filename>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">robowflex_library/constants.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="tf_8h" name="tf.h" local="no" imported="no">robowflex_library/tf.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2robot_8h" name="robowflex_dart/include/robowflex_dart/robot.h" local="no" imported="no">robowflex_dart/robot.h</includes>
    <includes id="space_8h" name="space.h" local="no" imported="no">robowflex_dart/space.h</includes>
    <includes id="structure_8h" name="structure.h" local="no" imported="no">robowflex_dart/structure.h</includes>
    <includes id="tsr_8h" name="tsr.h" local="no" imported="no">robowflex_dart/tsr.h</includes>
    <includes id="world_8h" name="world.h" local="no" imported="no">robowflex_dart/world.h</includes>
  </compound>
  <compound kind="file">
    <name>tsr.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/include/robowflex_dart/</path>
    <filename>tsr_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <includes id="adapter_8h" name="adapter.h" local="no" imported="no">robowflex_library/adapter.h</includes>
    <class kind="class">robowflex::darts::TSR</class>
    <class kind="class">robowflex::darts::TSR::Specification</class>
    <class kind="class">robowflex::darts::TSRSet</class>
    <class kind="class">robowflex::darts::TSRConstraint</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::darts</namespace>
    <namespace>robowflex::darts::magic</namespace>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DEFAULT_IK_TOLERANCE</name>
      <anchorfile>namespacerobowflex_1_1darts_1_1magic.html</anchorfile>
      <anchor>a24df87a80c00e85cb8644cb583735ceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>ROOT_FRAME</name>
      <anchorfile>namespacerobowflex_1_1darts_1_1magic.html</anchorfile>
      <anchor>aef5d6ac81df3a172ec209d681037f56a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector3d</type>
      <name>DEFAULT_IK_TOLERANCES</name>
      <anchorfile>namespacerobowflex_1_1darts_1_1magic.html</anchorfile>
      <anchor>a40316377b043058934633777997b6e7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tsr_helper.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/scripts/</path>
    <filename>tsr__helper_8cpp.html</filename>
    <includes id="io_2yaml_8h" name="io/yaml.h" local="no" imported="no">robowflex_library/io/yaml.h</includes>
    <includes id="gui_8h" name="gui.h" local="no" imported="no">robowflex_dart/gui.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2io_8h" name="robowflex_dart/include/robowflex_dart/io.h" local="no" imported="no">robowflex_dart/io.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2robot_8h" name="robowflex_dart/include/robowflex_dart/robot.h" local="no" imported="no">robowflex_dart/robot.h</includes>
    <includes id="space_8h" name="space.h" local="no" imported="no">robowflex_dart/space.h</includes>
    <includes id="tsr_8h" name="tsr.h" local="no" imported="no">robowflex_dart/tsr.h</includes>
    <includes id="world_8h" name="world.h" local="no" imported="no">robowflex_dart/world.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tsr__helper_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ur5.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/detail/</path>
    <filename>ur5_8cpp.html</filename>
    <includes id="ur5_8h" name="ur5.h" local="no" imported="no">robowflex_library/detail/ur5.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
  </compound>
  <compound kind="file">
    <name>ur5.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/detail/</path>
    <filename>ur5_8h.html</filename>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <class kind="class">robowflex::UR5Robot</class>
    <class kind="class">robowflex::OMPL::UR5OMPLPipelinePlanner</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::OMPL</namespace>
  </compound>
  <compound kind="file">
    <name>ur5_benchmark.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>ur5__benchmark_8cpp.html</filename>
    <includes id="benchmarking_8h" name="benchmarking.h" local="no" imported="no">robowflex_library/benchmarking.h</includes>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="ur5_8h" name="ur5.h" local="no" imported="no">robowflex_library/detail/ur5.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>ur5__benchmark_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ur5_cartesian.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>ur5__cartesian_8cpp.html</filename>
    <includes id="ur5_8h" name="ur5.h" local="no" imported="no">robowflex_library/detail/ur5.h</includes>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="trajectory_8h" name="trajectory.h" local="no" imported="no">robowflex_library/trajectory.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>ur5__cartesian_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ur5_custom_planning.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_tesseract/scripts/</path>
    <filename>ur5__custom__planning_8cpp.html</filename>
    <includes id="ur5_8h" name="ur5.h" local="no" imported="no">robowflex_library/detail/ur5.h</includes>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="trajectory_8h" name="trajectory.h" local="no" imported="no">robowflex_library/trajectory.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="conversions_8h" name="conversions.h" local="no" imported="no">robowflex_tesseract/conversions.h</includes>
    <includes id="trajopt__planner_8h" name="trajopt_planner.h" local="no" imported="no">robowflex_tesseract/trajopt_planner.h</includes>
    <class kind="class">CustomTrajOptPlanner</class>
    <class kind="struct">CustomTrajOptPlanner::CartCnt</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>ur5__custom__planning_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GROUP</name>
      <anchorfile>ur5__custom__planning_8cpp.html</anchorfile>
      <anchor>a892b6dd5a49224f3e7646b914c4462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ur5_cylinder.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>ur5__cylinder_8cpp.html</filename>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="ur5_8h" name="ur5.h" local="no" imported="no">robowflex_library/detail/ur5.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>ur5__cylinder_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ur5_ik.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>ur5__ik_8cpp.html</filename>
    <includes id="ur5_8h" name="ur5.h" local="no" imported="no">robowflex_library/detail/ur5.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>ur5__ik_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ur5_io.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>ur5__io_8cpp.html</filename>
    <includes id="ur5_8h" name="ur5.h" local="no" imported="no">robowflex_library/detail/ur5.h</includes>
    <includes id="bag_8h" name="bag.h" local="no" imported="no">robowflex_library/io/bag.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>ur5__io_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ur5_ompl_interface.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_ompl/scripts/</path>
    <filename>ur5__ompl__interface_8cpp.html</filename>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="ur5_8h" name="ur5.h" local="no" imported="no">robowflex_library/detail/ur5.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="ompl__interface_8h" name="ompl_interface.h" local="no" imported="no">robowflex_ompl/ompl_interface.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>ur5__ompl__interface_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ur5_pool.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>ur5__pool_8cpp.html</filename>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="ur5_8h" name="ur5.h" local="no" imported="no">robowflex_library/detail/ur5.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>ur5__pool_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ur5_test.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>ur5__test_8cpp.html</filename>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="ur5_8h" name="ur5.h" local="no" imported="no">robowflex_library/detail/ur5.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>ur5__test_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ur5_visualization.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>ur5__visualization_8cpp.html</filename>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="ur5_8h" name="ur5.h" local="no" imported="no">robowflex_library/detail/ur5.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>ur5__visualization_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>util.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/</path>
    <filename>util_8cpp.html</filename>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">robowflex_library/macros.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
  </compound>
  <compound kind="file">
    <name>util.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>util_8h.html</filename>
    <class kind="class">robowflex::Exception</class>
    <class kind="class">robowflex::ROS</class>
    <namespace>robowflex</namespace>
    <member kind="function">
      <type>void</type>
      <name>explode</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>aa3c6c6a0a52b8ce690f26c87aad1103e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utils.py</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_visualization/robowflex_visualization/</path>
    <filename>utils_8py.html</filename>
    <namespace>robowflex_visualization::utils</namespace>
    <member kind="function">
      <type>def</type>
      <name>resolve_package</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a7932f430b9ed305d8665a87edbf5ae42</anchor>
      <arglist>(path)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>resolve_path</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>ab8b8e916c2c9fc0fb72af8c0692df145</anchor>
      <arglist>(path)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>select_all_children</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>aff2d044bdf1b03f7c265e81ea5e6966c</anchor>
      <arglist>(item)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>apply_smooth_shade</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>aad1401a6ec843f2693ccbee65894a3e6</anchor>
      <arglist>(item)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>apply_edge_split</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>af84b2409980b99fd3053163729c797cc</anchor>
      <arglist>(item, angle=math.pi/8)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>find_object_in_collection</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a1812dd3a0e6a155997d412ab53d81893</anchor>
      <arglist>(coll_name, item_name)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>move_selected_to_collection</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a72fc29753267b30ac4c4f0427e25a7e1</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>find_collection</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>aff7d987f7995a6301e00458a21561baa</anchor>
      <arglist>(item)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_collection</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a0f25a4e732bec25e9c4653ce32565f49</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>remove_collection</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>ad8dd24c7141469ef96aee8d1301a38ce</anchor>
      <arglist>(name, remove_objects=True)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>make_collection</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a717e1e3c359780737cb6b845e61edca8</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>deselect_all</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a5c9ba46cc8152973864a1191f99acd91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_object_parent</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a30855ce8d634d6ec557aab5b3eea31cf</anchor>
      <arglist>(parent, child)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_object_parent</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a850b9b28c24f0821d118a303ee5cc376</anchor>
      <arglist>(parent, child)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>parent_object</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>af0f3aaa5d83d93823e2ef83f64bae212</anchor>
      <arglist>(parent, child, frame)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>unparent_object</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>aa19d7ee42ecb4ad6c82bb20ce971d2f3</anchor>
      <arglist>(parent, child, frame)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_active</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>ab1a22df161250d9b6cdee7cef1575f45</anchor>
      <arglist>(item)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_material</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>af360bbe82c674876914a2df36db725a1</anchor>
      <arglist>(item, material)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_color</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a6fd60b4594c9c4275c4b5dd92dfcbdd5</anchor>
      <arglist>(obj, element)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>pose_to_quat</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a5cdecfb6b5323333468f9d4e87651cda</anchor>
      <arglist>(pose)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>pose_to_vec</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a455546cbd83056f4f954c878b6d23c5b</anchor>
      <arglist>(pose)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>pose_add</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>ab6571cc111455e78b5d2b1474bcbf4d9</anchor>
      <arglist>(obj, pose1, pose2)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_pose</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a4713c008852f1c3ca48d58cf2d89e266</anchor>
      <arglist>(obj, pose)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>read_YAML_data</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>abbcdade3263e0fe0a4238b548f1a0675</anchor>
      <arglist>(file_name)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>remove_doubles</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a892f1e4dcec4a4f4ad157caf859d6b82</anchor>
      <arglist>(item, threshold=0.0001)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>remove_inner_faces</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a09223f872cc50c17f4510c542280478d</anchor>
      <arglist>(item)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>clear_alpha</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a7dd548304a4f353f692b9c35de134d83</anchor>
      <arglist>(obj)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_tf_origin_xml</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>aa9ba8df51c1799879210235ccb55ed03</anchor>
      <arglist>(xml)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>visualization.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/io/</path>
    <filename>visualization_8cpp.html</filename>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">robowflex_library/constants.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="colormap_8h" name="colormap.h" local="no" imported="no">robowflex_library/io/colormap.h</includes>
    <includes id="visualization_8h" name="visualization.h" local="no" imported="no">robowflex_library/io/visualization.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="random_8h" name="random.h" local="no" imported="no">robowflex_library/random.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="tf_8h" name="tf.h" local="no" imported="no">robowflex_library/tf.h</includes>
    <includes id="trajectory_8h" name="trajectory.h" local="no" imported="no">robowflex_library/trajectory.h</includes>
  </compound>
  <compound kind="file">
    <name>visualization.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/io/</path>
    <filename>visualization_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <includes id="colormap_8h" name="colormap.h" local="no" imported="no">robowflex_library/io/colormap.h</includes>
    <includes id="tf_8h" name="tf.h" local="no" imported="no">robowflex_library/tf.h</includes>
    <class kind="class">robowflex::IO::RVIZHelper</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::IO</namespace>
  </compound>
  <compound kind="file">
    <name>wam7_benchmark.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>wam7__benchmark_8cpp.html</filename>
    <includes id="benchmarking_8h" name="benchmarking.h" local="no" imported="no">robowflex_library/benchmarking.h</includes>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>wam7__benchmark_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>wam7_test.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/scripts/</path>
    <filename>wam7__test_8cpp.html</filename>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">robowflex_library/builder.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2planning_8h" name="robowflex_library/include/robowflex_library/planning.h" local="no" imported="no">robowflex_library/planning.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2robot_8h" name="robowflex_library/include/robowflex_library/robot.h" local="no" imported="no">robowflex_library/robot.h</includes>
    <includes id="scene_8h" name="scene.h" local="no" imported="no">robowflex_library/scene.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">robowflex_library/util.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>wam7__test_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>world.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/src/</path>
    <filename>world_8cpp.html</filename>
    <includes id="log_8h" name="log.h" local="no" imported="no">robowflex_library/log.h</includes>
    <includes id="acm_8h" name="acm.h" local="no" imported="no">robowflex_dart/acm.h</includes>
    <includes id="robowflex__dart_2include_2robowflex__dart_2robot_8h" name="robowflex_dart/include/robowflex_dart/robot.h" local="no" imported="no">robowflex_dart/robot.h</includes>
    <includes id="world_8h" name="world.h" local="no" imported="no">robowflex_dart/world.h</includes>
  </compound>
  <compound kind="file">
    <name>world.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_dart/include/robowflex_dart/</path>
    <filename>world_8h.html</filename>
    <includes id="class__forward_8h" name="class_forward.h" local="no" imported="no">robowflex_library/class_forward.h</includes>
    <class kind="class">robowflex::darts::DistanceCollisionWrapper</class>
    <class kind="class">robowflex::darts::World</class>
    <class kind="struct">robowflex::darts::World::CollisionInfo</class>
    <namespace>robowflex</namespace>
    <namespace>robowflex::darts</namespace>
  </compound>
  <compound kind="file">
    <name>yaml.cpp</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/src/</path>
    <filename>yaml_8cpp.html</filename>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">robowflex_library/geometry.h</includes>
    <includes id="robowflex__library_2include_2robowflex__library_2io_8h" name="robowflex_library/include/robowflex_library/io.h" local="no" imported="no">robowflex_library/io.h</includes>
    <includes id="tf_8h" name="tf.h" local="no" imported="no">robowflex_library/tf.h</includes>
    <includes id="io_2yaml_8h" name="io/yaml.h" local="no" imported="no">robowflex_library/io/yaml.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">robowflex_library/macros.h</includes>
    <includes id="yaml_8h" name="yaml.h" local="no" imported="no">robowflex_library/yaml.h</includes>
    <namespace>YAML</namespace>
    <namespace>robowflex</namespace>
    <namespace>robowflex::IO</namespace>
    <member kind="function">
      <type>bool</type>
      <name>isNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a23927fb72a17ab8ce0d0654d06b5532e</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::RobotState</type>
      <name>robotStateFromNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>aa50520f9b580f0f7ab32c5aadff15851</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>YAML::Node</type>
      <name>toNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>aed4974f62a649f4a6107ac3d6e919b33</anchor>
      <arglist>(const geometry_msgs::Pose &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Pose</type>
      <name>poseFromNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>ab9d42d5eeaa3e66fcbab28703ebbaef5</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>YAML::Node</type>
      <name>toNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a819245f223ff0eb589ad28aa153f2485</anchor>
      <arglist>(const moveit_msgs::PlanningScene &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>YAML::Node</type>
      <name>toNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a799d8a2989dee49fff0dd91d17a883be</anchor>
      <arglist>(const moveit_msgs::MotionPlanRequest &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>YAML::Node</type>
      <name>toNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a414861fda8e5df5e954e0f65a97b2ed7</anchor>
      <arglist>(const moveit_msgs::RobotTrajectory &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>YAML::Node</type>
      <name>toNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a48e9aa6858f48615cefb4b186457d7be</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromYAMLFile</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a50e952949006a40e6b7b5d589958e01d</anchor>
      <arglist>(moveit_msgs::PlanningScene &amp;msg, const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromYAMLFile</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a0500ed90fd25e45a7a0476fee615bcc3</anchor>
      <arglist>(moveit_msgs::MotionPlanRequest &amp;msg, const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromYAMLFile</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>aaab20586b460694598632218742ee4b6</anchor>
      <arglist>(moveit_msgs::RobotState &amp;msg, const std::string &amp;file)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>io/yaml.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/io/</path>
    <filename>io_2yaml_8h.html</filename>
    <namespace>robowflex</namespace>
    <namespace>robowflex::IO</namespace>
    <member kind="function">
      <type>bool</type>
      <name>isNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a23927fb72a17ab8ce0d0654d06b5532e</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::RobotState</type>
      <name>robotStateFromNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>aa50520f9b580f0f7ab32c5aadff15851</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>YAML::Node</type>
      <name>toNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>aed4974f62a649f4a6107ac3d6e919b33</anchor>
      <arglist>(const geometry_msgs::Pose &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Pose</type>
      <name>poseFromNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>ab9d42d5eeaa3e66fcbab28703ebbaef5</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>YAML::Node</type>
      <name>toNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a819245f223ff0eb589ad28aa153f2485</anchor>
      <arglist>(const moveit_msgs::PlanningScene &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>YAML::Node</type>
      <name>toNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a799d8a2989dee49fff0dd91d17a883be</anchor>
      <arglist>(const moveit_msgs::MotionPlanRequest &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>YAML::Node</type>
      <name>toNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a414861fda8e5df5e954e0f65a97b2ed7</anchor>
      <arglist>(const moveit_msgs::RobotTrajectory &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>YAML::Node</type>
      <name>toNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a48e9aa6858f48615cefb4b186457d7be</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromYAMLFile</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a50e952949006a40e6b7b5d589958e01d</anchor>
      <arglist>(moveit_msgs::PlanningScene &amp;msg, const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromYAMLFile</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a0500ed90fd25e45a7a0476fee615bcc3</anchor>
      <arglist>(moveit_msgs::MotionPlanRequest &amp;msg, const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromYAMLFile</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>aaab20586b460694598632218742ee4b6</anchor>
      <arglist>(moveit_msgs::RobotState &amp;msg, const std::string &amp;file)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>yaml.h</name>
    <path>/home/runner/work/robowflex/robowflex/robowflex_library/include/robowflex_library/</path>
    <filename>yaml_8h.html</filename>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">robowflex_library/macros.h</includes>
  </compound>
  <compound kind="class">
    <name>CustomTrajOptPlanner</name>
    <filename>classCustomTrajOptPlanner.html</filename>
    <base>robowflex::TrajOptPlanner</base>
    <class kind="struct">CustomTrajOptPlanner::CartCnt</class>
    <member kind="function">
      <type></type>
      <name>CustomTrajOptPlanner</name>
      <anchorfile>classCustomTrajOptPlanner.html</anchorfile>
      <anchor>af320191814f10ff99b8c015a6bdae95f</anchor>
      <arglist>(const RobotPtr &amp;robot, const std::string &amp;group_name)</arglist>
    </member>
    <member kind="function">
      <type>PlannerResult</type>
      <name>plan</name>
      <anchorfile>classCustomTrajOptPlanner.html</anchorfile>
      <anchor>aaf2ddcf833ba8b9c49260f0b6384387d</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const robot_state::RobotStatePtr &amp;start_state)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; CartCnt &gt;</type>
      <name>constraints_</name>
      <anchorfile>classCustomTrajOptPlanner.html</anchorfile>
      <anchor>ae9b7adb51afbaf474906d0f339cb2545</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addCartTerms</name>
      <anchorfile>classCustomTrajOptPlanner.html</anchorfile>
      <anchor>abc60b33d1983480b51fb9d9380546d86</anchor>
      <arglist>(std::shared_ptr&lt; trajopt::ProblemConstructionInfo &gt; pci) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CustomTrajOptPlanner::CartCnt</name>
    <filename>structCustomTrajOptPlanner_1_1CartCnt.html</filename>
    <member kind="variable">
      <type>RobotPose</type>
      <name>pose</name>
      <anchorfile>structCustomTrajOptPlanner_1_1CartCnt.html</anchorfile>
      <anchor>a0512035e8d0eb79c962ac54e7de5aa53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>timestep</name>
      <anchorfile>structCustomTrajOptPlanner_1_1CartCnt.html</anchorfile>
      <anchor>af26eb3184d7a6c59583e55af1ee0d9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>link</name>
      <anchorfile>structCustomTrajOptPlanner_1_1CartCnt.html</anchorfile>
      <anchor>a00534a4f41996ec5b2b48f7b4ba9015b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pos_coeffs</name>
      <anchorfile>structCustomTrajOptPlanner_1_1CartCnt.html</anchorfile>
      <anchor>ae7124eeca243062566fd491b56114364</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rot_coeffs</name>
      <anchorfile>structCustomTrajOptPlanner_1_1CartCnt.html</anchorfile>
      <anchor>a717aa3397657dc71687ea7b9c1b7b779</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::CHOMP::CHOMPPipelinePlannerConstPtr</name>
    <filename>classrobowflex_1_1CHOMP_1_1CHOMPPipelinePlannerConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::CHOMP::CHOMPPipelinePlannerPtr</name>
    <filename>classrobowflex_1_1CHOMP_1_1CHOMPPipelinePlannerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::Cob4Robot</name>
    <filename>classrobowflex_1_1Cob4Robot.html</filename>
    <base>robowflex::Robot</base>
    <member kind="function">
      <type></type>
      <name>Cob4Robot</name>
      <anchorfile>classrobowflex_1_1Cob4Robot.html</anchorfile>
      <anchor>accc32ef78fa1581784132e3cd28c4472</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1Cob4Robot.html</anchorfile>
      <anchor>a5510448f6591eeeebf54fa1a453b3b32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBasePose</name>
      <anchorfile>classrobowflex_1_1Cob4Robot.html</anchorfile>
      <anchor>aa84f4e2fcf6f5a43e30f6d6f2600efae</anchor>
      <arglist>(double x, double y, double theta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointHead</name>
      <anchorfile>classrobowflex_1_1Cob4Robot.html</anchorfile>
      <anchor>acf832715e0931348ef770f9def7a8dfe</anchor>
      <arglist>(const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>openGrippers</name>
      <anchorfile>classrobowflex_1_1Cob4Robot.html</anchorfile>
      <anchor>ab3b91daeb4ea10165c41e54d7e99f55b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>openLeftGripper</name>
      <anchorfile>classrobowflex_1_1Cob4Robot.html</anchorfile>
      <anchor>a8d3b284f4e677a0770b1349fe80191fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>openRightGripper</name>
      <anchorfile>classrobowflex_1_1Cob4Robot.html</anchorfile>
      <anchor>a9a9877a06b154833aad9e1ccafbc6142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeGrippers</name>
      <anchorfile>classrobowflex_1_1Cob4Robot.html</anchorfile>
      <anchor>a0f76d89db1dc2022ad759315964de5c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeLeftGripper</name>
      <anchorfile>classrobowflex_1_1Cob4Robot.html</anchorfile>
      <anchor>a06e3595f7ffb7938a5bcffa61a31ee3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeRightGripper</name>
      <anchorfile>classrobowflex_1_1Cob4Robot.html</anchorfile>
      <anchor>ac1c31dbf04659790b2c69d06b9e2e799</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_URDF</name>
      <anchorfile>classrobowflex_1_1Cob4Robot.html</anchorfile>
      <anchor>adcbe3fc6671d07c0ba91c207ace28e56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_SRDF</name>
      <anchorfile>classrobowflex_1_1Cob4Robot.html</anchorfile>
      <anchor>aac6a7d2ac86fe12a83844ca6716da575</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_LIMITS</name>
      <anchorfile>classrobowflex_1_1Cob4Robot.html</anchorfile>
      <anchor>aaa37eec119bb1162c1691b5875a02555</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_KINEMATICS</name>
      <anchorfile>classrobowflex_1_1Cob4Robot.html</anchorfile>
      <anchor>ac48e0692fce28dbf62ea63c111fdbded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>RESOURCE_URDF</name>
      <anchorfile>classrobowflex_1_1Cob4Robot.html</anchorfile>
      <anchor>ab3a9acfc307a0753c4024e26d8c263a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>RESOURCE_SRDF</name>
      <anchorfile>classrobowflex_1_1Cob4Robot.html</anchorfile>
      <anchor>adf8a52edbb1177671a40138158c2e76a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>RESOURCE_LIMITS</name>
      <anchorfile>classrobowflex_1_1Cob4Robot.html</anchorfile>
      <anchor>acbc8d984578548a2e80c582af39ae81e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>RESOURCE_KINEMATICS</name>
      <anchorfile>classrobowflex_1_1Cob4Robot.html</anchorfile>
      <anchor>ac0c7de752628c7771f3534e0f806e01d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::Cob4RobotConstPtr</name>
    <filename>classrobowflex_1_1Cob4RobotConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::Cob4RobotPtr</name>
    <filename>classrobowflex_1_1Cob4RobotPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::ACM</name>
    <filename>classrobowflex_1_1darts_1_1ACM.html</filename>
    <member kind="function">
      <type></type>
      <name>ACM</name>
      <anchorfile>classrobowflex_1_1darts_1_1ACM.html</anchorfile>
      <anchor>a932482f040ae65b5191cc66df68a9b72</anchor>
      <arglist>(const Structure *structure)</arglist>
    </member>
    <member kind="function">
      <type>const Structure *</type>
      <name>getStructure</name>
      <anchorfile>classrobowflex_1_1darts_1_1ACM.html</anchorfile>
      <anchor>afd2ae67850ae89ca9bdfd0a72b05c80c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableCollision</name>
      <anchorfile>classrobowflex_1_1darts_1_1ACM.html</anchorfile>
      <anchor>a7b9ab610d0ed2fe8d6b86a3b25276fc5</anchor>
      <arglist>(const std::string &amp;a, const std::string &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableCollision</name>
      <anchorfile>classrobowflex_1_1darts_1_1ACM.html</anchorfile>
      <anchor>adeb83f35e4a96fe98edfb2c255029056</anchor>
      <arglist>(const std::string &amp;a, const std::string &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;</type>
      <name>getDisabledPairs</name>
      <anchorfile>classrobowflex_1_1darts_1_1ACM.html</anchorfile>
      <anchor>a201adc030627203f5c60ea2357f2a69e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;</type>
      <name>getDisabledPairsConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1ACM.html</anchorfile>
      <anchor>a0eeb91c07d5a36f971f82f88b5274ac7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::collision::BodyNodeCollisionFilter &gt;</type>
      <name>getFilter</name>
      <anchorfile>classrobowflex_1_1darts_1_1ACM.html</anchorfile>
      <anchor>a73caaec77ad67e1c0c87eccd892f0712</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; dart::collision::BodyNodeCollisionFilter &gt; &amp;</type>
      <name>getFilterConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1ACM.html</anchorfile>
      <anchor>a83203eeb7c5fb5155434d69fd0ad5364</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::pair&lt; std::string, std::string &gt;</type>
      <name>makeKey</name>
      <anchorfile>classrobowflex_1_1darts_1_1ACM.html</anchorfile>
      <anchor>aa78e573c95e9362e32cc554b81bf135d</anchor>
      <arglist>(const std::string &amp;a, const std::string &amp;b) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>dart::dynamics::BodyNode *</type>
      <name>getBodyNode</name>
      <anchorfile>classrobowflex_1_1darts_1_1ACM.html</anchorfile>
      <anchor>a92105d3d4325dcc2be68c2b23ea591e2</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Structure *</type>
      <name>structure_</name>
      <anchorfile>classrobowflex_1_1darts_1_1ACM.html</anchorfile>
      <anchor>a3b24fcd2426451bd805344d5d851d02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::set&lt; std::pair&lt; std::string, std::string &gt; &gt;</type>
      <name>acm_</name>
      <anchorfile>classrobowflex_1_1darts_1_1ACM.html</anchorfile>
      <anchor>adbc763528d733391faf7e2268304644e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; dart::collision::BodyNodeCollisionFilter &gt;</type>
      <name>filter_</name>
      <anchorfile>classrobowflex_1_1darts_1_1ACM.html</anchorfile>
      <anchor>a2ff891a2c93808fcd83202d6c53ad30a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableCollision</name>
      <anchorfile>classrobowflex_1_1darts_1_1ACM.html</anchorfile>
      <anchor>a7b9ab610d0ed2fe8d6b86a3b25276fc5</anchor>
      <arglist>(const std::string &amp;a, const std::string &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableCollision</name>
      <anchorfile>classrobowflex_1_1darts_1_1ACM.html</anchorfile>
      <anchor>adeb83f35e4a96fe98edfb2c255029056</anchor>
      <arglist>(const std::string &amp;a, const std::string &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;</type>
      <name>getDisabledPairs</name>
      <anchorfile>classrobowflex_1_1darts_1_1ACM.html</anchorfile>
      <anchor>a201adc030627203f5c60ea2357f2a69e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;</type>
      <name>getDisabledPairsConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1ACM.html</anchorfile>
      <anchor>a0eeb91c07d5a36f971f82f88b5274ac7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::collision::BodyNodeCollisionFilter &gt;</type>
      <name>getFilter</name>
      <anchorfile>classrobowflex_1_1darts_1_1ACM.html</anchorfile>
      <anchor>a73caaec77ad67e1c0c87eccd892f0712</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; dart::collision::BodyNodeCollisionFilter &gt; &amp;</type>
      <name>getFilterConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1ACM.html</anchorfile>
      <anchor>a83203eeb7c5fb5155434d69fd0ad5364</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::ACMConstPtr</name>
    <filename>classrobowflex_1_1darts_1_1ACMConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::ACMPtr</name>
    <filename>classrobowflex_1_1darts_1_1ACMPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::ButtonElement</name>
    <filename>classrobowflex_1_1darts_1_1ButtonElement.html</filename>
    <base>robowflex::darts::ImGuiElement</base>
    <member kind="function">
      <type></type>
      <name>ButtonElement</name>
      <anchorfile>classrobowflex_1_1darts_1_1ButtonElement.html</anchorfile>
      <anchor>a3f031555c5a44034847ae1871429f4e3</anchor>
      <arglist>(const std::string &amp;text, const ButtonCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classrobowflex_1_1darts_1_1ButtonElement.html</anchorfile>
      <anchor>aa208a3c8bad3545d5a49f29c9e8b222a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>text</name>
      <anchorfile>classrobowflex_1_1darts_1_1ButtonElement.html</anchorfile>
      <anchor>a3f14843d65464a2770fd640ea980c8a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ButtonCallback</type>
      <name>callback</name>
      <anchorfile>classrobowflex_1_1darts_1_1ButtonElement.html</anchorfile>
      <anchor>a338675d74e8a937db2f0888031376725</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::CheckboxElement</name>
    <filename>classrobowflex_1_1darts_1_1CheckboxElement.html</filename>
    <base>robowflex::darts::ImGuiElement</base>
    <member kind="function">
      <type></type>
      <name>CheckboxElement</name>
      <anchorfile>classrobowflex_1_1darts_1_1CheckboxElement.html</anchorfile>
      <anchor>a167968abbbd644c6fea17ae4f11ead64</anchor>
      <arglist>(const std::string &amp;text, bool &amp;boolean)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classrobowflex_1_1darts_1_1CheckboxElement.html</anchorfile>
      <anchor>a6dd638d1bccdc91c54d9efded03cf266</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>text</name>
      <anchorfile>classrobowflex_1_1darts_1_1CheckboxElement.html</anchorfile>
      <anchor>a3a5b4e2e3d25e33a4d3e699679f0b7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool &amp;</type>
      <name>boolean</name>
      <anchorfile>classrobowflex_1_1darts_1_1CheckboxElement.html</anchorfile>
      <anchor>a057aa4821e3bdd3cc30fadb656cdf595</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::ConstraintExtractor</name>
    <filename>classrobowflex_1_1darts_1_1ConstraintExtractor.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstraintExtractor</name>
      <anchorfile>classrobowflex_1_1darts_1_1ConstraintExtractor.html</anchorfile>
      <anchor>af4c9adf8655cea6bd88b2820e3ad4eed</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstraintExtractor</name>
      <anchorfile>classrobowflex_1_1darts_1_1ConstraintExtractor.html</anchorfile>
      <anchor>a49b51f099459b7987306873ccf00e0bc</anchor>
      <arglist>(const ompl::base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>const StateSpace *</type>
      <name>getSpace</name>
      <anchorfile>classrobowflex_1_1darts_1_1ConstraintExtractor.html</anchorfile>
      <anchor>a67bc9f0a52cfad8d147d8fb2df2a8d17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpaceInformation</name>
      <anchorfile>classrobowflex_1_1darts_1_1ConstraintExtractor.html</anchorfile>
      <anchor>a545ffeab231c2a73781ffd8f654b67d9</anchor>
      <arglist>(const ompl::base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>StateSpace::StateType *</type>
      <name>toState</name>
      <anchorfile>classrobowflex_1_1darts_1_1ConstraintExtractor.html</anchorfile>
      <anchor>ad852becbefacbecc96d955a3bea7d7e4</anchor>
      <arglist>(ompl::base::State *state) const</arglist>
    </member>
    <member kind="function">
      <type>const StateSpace::StateType *</type>
      <name>toStateConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1ConstraintExtractor.html</anchorfile>
      <anchor>a3d75a180c93364d337b75e77401ceceb</anchor>
      <arglist>(const ompl::base::State *state) const</arglist>
    </member>
    <member kind="function">
      <type>StateSpace::StateType *</type>
      <name>fromConstrainedState</name>
      <anchorfile>classrobowflex_1_1darts_1_1ConstraintExtractor.html</anchorfile>
      <anchor>a5196959f984802e9c871dff127973b40</anchor>
      <arglist>(ompl::base::State *state) const</arglist>
    </member>
    <member kind="function">
      <type>const StateSpace::StateType *</type>
      <name>fromConstrainedStateConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1ConstraintExtractor.html</anchorfile>
      <anchor>a4e7034b59eb1d9e4cf8b19540e65a51e</anchor>
      <arglist>(const ompl::base::State *state) const</arglist>
    </member>
    <member kind="function">
      <type>StateSpace::StateType *</type>
      <name>fromUnconstrainedState</name>
      <anchorfile>classrobowflex_1_1darts_1_1ConstraintExtractor.html</anchorfile>
      <anchor>a76630df4d803e20f33ce324c4000cee8</anchor>
      <arglist>(ompl::base::State *state) const</arglist>
    </member>
    <member kind="function">
      <type>const StateSpace::StateType *</type>
      <name>fromUnconstrainedStateConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1ConstraintExtractor.html</anchorfile>
      <anchor>a90a3256092489b567e8b6304c91334fd</anchor>
      <arglist>(const ompl::base::State *state) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ompl::base::SpaceInformationPtr</type>
      <name>space_info_</name>
      <anchorfile>classrobowflex_1_1darts_1_1ConstraintExtractor.html</anchorfile>
      <anchor>a1c8bf92fbb462206fd92b924d09c4feb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>is_constrained_</name>
      <anchorfile>classrobowflex_1_1darts_1_1ConstraintExtractor.html</anchorfile>
      <anchor>ac2a938eb28e6a26fc6aee1dee6f17cef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>StateSpace::StateType *</type>
      <name>toState</name>
      <anchorfile>classrobowflex_1_1darts_1_1ConstraintExtractor.html</anchorfile>
      <anchor>ad852becbefacbecc96d955a3bea7d7e4</anchor>
      <arglist>(ompl::base::State *state) const</arglist>
    </member>
    <member kind="function">
      <type>const StateSpace::StateType *</type>
      <name>toStateConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1ConstraintExtractor.html</anchorfile>
      <anchor>a3d75a180c93364d337b75e77401ceceb</anchor>
      <arglist>(const ompl::base::State *state) const</arglist>
    </member>
    <member kind="function">
      <type>StateSpace::StateType *</type>
      <name>fromConstrainedState</name>
      <anchorfile>classrobowflex_1_1darts_1_1ConstraintExtractor.html</anchorfile>
      <anchor>a5196959f984802e9c871dff127973b40</anchor>
      <arglist>(ompl::base::State *state) const</arglist>
    </member>
    <member kind="function">
      <type>const StateSpace::StateType *</type>
      <name>fromConstrainedStateConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1ConstraintExtractor.html</anchorfile>
      <anchor>a4e7034b59eb1d9e4cf8b19540e65a51e</anchor>
      <arglist>(const ompl::base::State *state) const</arglist>
    </member>
    <member kind="function">
      <type>StateSpace::StateType *</type>
      <name>fromUnconstrainedState</name>
      <anchorfile>classrobowflex_1_1darts_1_1ConstraintExtractor.html</anchorfile>
      <anchor>a76630df4d803e20f33ce324c4000cee8</anchor>
      <arglist>(ompl::base::State *state) const</arglist>
    </member>
    <member kind="function">
      <type>const StateSpace::StateType *</type>
      <name>fromUnconstrainedStateConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1ConstraintExtractor.html</anchorfile>
      <anchor>a90a3256092489b567e8b6304c91334fd</anchor>
      <arglist>(const ompl::base::State *state) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::DARTPlanner</name>
    <filename>classrobowflex_1_1darts_1_1DARTPlanner.html</filename>
    <base>robowflex::Planner</base>
    <member kind="function">
      <type></type>
      <name>DARTPlanner</name>
      <anchorfile>classrobowflex_1_1darts_1_1DARTPlanner.html</anchorfile>
      <anchor>a7e940c4d8d5803f85adead688f5c011a</anchor>
      <arglist>(const robowflex::RobotPtr &amp;robot, const std::string &amp;name=&quot;DARTPlanner&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preRun</name>
      <anchorfile>classrobowflex_1_1darts_1_1DARTPlanner.html</anchorfile>
      <anchor>abe59b65207d07f4a1328fab9aa90b2ea</anchor>
      <arglist>(const robowflex::SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request) override</arglist>
    </member>
    <member kind="function">
      <type>planning_interface::MotionPlanResponse</type>
      <name>plan</name>
      <anchorfile>classrobowflex_1_1darts_1_1DARTPlanner.html</anchorfile>
      <anchor>acc153865f0d7071f0d5fad32475e0a9e</anchor>
      <arglist>(const robowflex::SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request) override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getPlannerConfigs</name>
      <anchorfile>classrobowflex_1_1darts_1_1DARTPlanner.html</anchorfile>
      <anchor>a165b3d21e13366028a1e3ce5f5186911</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable">
      <type>PlanBuilderPtr</type>
      <name>builder</name>
      <anchorfile>classrobowflex_1_1darts_1_1DARTPlanner.html</anchorfile>
      <anchor>aa89b53c06b9cf608c4a67dddc092631b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::function&lt; ompl::base::PlannerPtr()&gt;</type>
      <name>PlannerAllocator</name>
      <anchorfile>classrobowflex_1_1darts_1_1DARTPlanner.html</anchorfile>
      <anchor>af5f590680ab9df6ed5e6d8beafd56b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>PlannerAllocator</type>
      <name>makePlanner</name>
      <anchorfile>classrobowflex_1_1darts_1_1DARTPlanner.html</anchorfile>
      <anchor>ac354196b3b8de5348ee6f0d9e79e5505</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setupPlanners</name>
      <anchorfile>classrobowflex_1_1darts_1_1DARTPlanner.html</anchorfile>
      <anchor>a1b776ec54866deff83b9a51a59257ca0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, PlannerAllocator &gt;</type>
      <name>planner_allocators_</name>
      <anchorfile>classrobowflex_1_1darts_1_1DARTPlanner.html</anchorfile>
      <anchor>afb9f7d977469b18741ec08620f86067e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SceneConstPtr</type>
      <name>scene_</name>
      <anchorfile>classrobowflex_1_1darts_1_1DARTPlanner.html</anchorfile>
      <anchor>aeb66c41e23ebe8b297c1ba745bcae5e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>StructurePtr</type>
      <name>dart_scene_</name>
      <anchorfile>classrobowflex_1_1darts_1_1DARTPlanner.html</anchorfile>
      <anchor>ab42aa4e36ffd99a4ad6029157295efb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RobotPtr</type>
      <name>dart_robot_</name>
      <anchorfile>classrobowflex_1_1darts_1_1DARTPlanner.html</anchorfile>
      <anchor>a5b33240e34ac0f74bfeea5c4f087dd2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldPtr</type>
      <name>world_</name>
      <anchorfile>classrobowflex_1_1darts_1_1DARTPlanner.html</anchorfile>
      <anchor>ade1a886140a610ca29e583af6b37be8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ompl::base::GoalPtr</type>
      <name>goal_</name>
      <anchorfile>classrobowflex_1_1darts_1_1DARTPlanner.html</anchorfile>
      <anchor>ae0bac61ab6300be234c326f4dc15ea35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::DARTPlannerConstPtr</name>
    <filename>classrobowflex_1_1darts_1_1DARTPlannerConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::DARTPlannerPtr</name>
    <filename>classrobowflex_1_1darts_1_1DARTPlannerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::DistanceCollisionWrapper</name>
    <filename>classrobowflex_1_1darts_1_1DistanceCollisionWrapper.html</filename>
    <member kind="function">
      <type></type>
      <name>DistanceCollisionWrapper</name>
      <anchorfile>classrobowflex_1_1darts_1_1DistanceCollisionWrapper.html</anchorfile>
      <anchor>a1d19256cfb2633f33e94aadb0302c682</anchor>
      <arglist>(const std::shared_ptr&lt; dart::collision::CollisionFilter &gt; &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needDistance</name>
      <anchorfile>classrobowflex_1_1darts_1_1DistanceCollisionWrapper.html</anchorfile>
      <anchor>af321b52414b8c73c664ea356c2cd8fbf</anchor>
      <arglist>(const dart::collision::CollisionObject *object1, const dart::collision::CollisionObject *object2) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; dart::collision::CollisionFilter &gt;</type>
      <name>filter_</name>
      <anchorfile>classrobowflex_1_1darts_1_1DistanceCollisionWrapper.html</anchorfile>
      <anchor>a70f29f7ae0a81946243acbc8440eda9e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::ImGuiElement</name>
    <filename>classrobowflex_1_1darts_1_1ImGuiElement.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classrobowflex_1_1darts_1_1ImGuiElement.html</anchorfile>
      <anchor>a399224ffb7b0639604224b373a7a08a8</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::ImGuiElementConstPtr</name>
    <filename>classrobowflex_1_1darts_1_1ImGuiElementConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::ImGuiElementPtr</name>
    <filename>classrobowflex_1_1darts_1_1ImGuiElementPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::Joint</name>
    <filename>classrobowflex_1_1darts_1_1Joint.html</filename>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a4aa61f4bd2693b3311d554a4ffa888ad</anchor>
      <arglist>(StateSpace *space, unsigned int skelIndex, unsigned int jointIndex, unsigned int sizeInSpace, unsigned int startIndex, unsigned int numDof)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>ad68cce7a0095a80f4be86097d4e81fc4</anchor>
      <arglist>(StateSpace *space, dart::dynamics::Joint *joint, unsigned int sizeInSpace, unsigned int startIndex=0, unsigned int numDof=0)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
      <name>getSpaceVars</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a42bdc3084574636a1a645dc259a1622d</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; a)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Ref&lt; const Eigen::VectorXd &gt;</type>
      <name>getSpaceVarsConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a8b7f437f63c8c201a7fb22f353669ea9</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::size_t &gt; &amp;</type>
      <name>getIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a04735b67dceb01cca425669fca2edbf9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getDofs</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>aa020dd3b3fc6e6a4e2b075bd512cfc7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getSkeletonIndex</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>ae0b5174b044f0ced2bc1e54fc03c2251</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getJointIndex</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a657bdbe63226dd9981d1b6f4b780c69f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDimension</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a9c593ed7f3b98b35f58ed4c277a4917b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUpperLimits</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>af0d6c6291c2e4fe3084592a5a0a87da6</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLowerLimits</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a0acb807d3c5b8e2f0b5271fbd0ab8a15</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>getUpperLimits</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>acf8b9472ebfcf27be30c9a3c2c7e3a17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>getLowerLimits</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a31509035d5ce512455c9576054cbdcf3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a8f41dda95cc7a75e42493c04995d3484</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;b) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>aaa00dbcce715e5433f8ac4a778ad042e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a65159cddff04d3b690e30dc868bfd653</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;b, double t, Eigen::Ref&lt; Eigen::VectorXd &gt; c) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enforceBounds</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a3a3af2118b97496037d0136ff0320ffd</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; a) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a3cabffdc632f941e20d66c5baf591b31</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>aa6090b09d9b6d74b59307700cde98f2a</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; a) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sampleNear</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>ac8c83688badb8782c72eca0251f586ca</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; a, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;near, double r) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setJointState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a195a47d6cd4286438f52585a42db9414</anchor>
      <arglist>(WorldPtr world, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getJointState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a86e5980e1791c95bf709cd0234da25f4</anchor>
      <arglist>(WorldPtr world, Eigen::Ref&lt; Eigen::VectorXd &gt; a) const</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::Joint *</type>
      <name>getJoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a7ea0f05a01223c89525283709ba4e532</anchor>
      <arglist>(WorldPtr world) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSpace *</type>
      <name>space_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a1779a06abd24203a1ef7b7d228de193a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::RNG &amp;</type>
      <name>rng_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>aa3772537ab5344448c0513a85db7b762</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>indices_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a3627b189369e7d5c9403a1726f7c4f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>dofs_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a9aa449f1ea089463f4468b38e55fe884</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>skelIndex_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a04ea3aded7b176a8a6dde868aa828ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>jointIndex_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a0b3ad97772bcfb30447403ee2d4d78e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>startInSpace_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a6ea76914ae90029974de25698973e34b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>sizeInSpace_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a93f67d170cbf58f9aaac7723b6f6d053</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>startIndex_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a12d34e36a445e99698c9501108bb2ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numDof_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a47e80eb632595e80624b11eaaa1d791e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a4aa61f4bd2693b3311d554a4ffa888ad</anchor>
      <arglist>(StateSpace *space, unsigned int skelIndex, unsigned int jointIndex, unsigned int sizeInSpace, unsigned int startIndex, unsigned int numDof)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>ad68cce7a0095a80f4be86097d4e81fc4</anchor>
      <arglist>(StateSpace *space, dart::dynamics::Joint *joint, unsigned int sizeInSpace, unsigned int startIndex=0, unsigned int numDof=0)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
      <name>getSpaceVars</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a42bdc3084574636a1a645dc259a1622d</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; a)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Ref&lt; const Eigen::VectorXd &gt;</type>
      <name>getSpaceVarsConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a8b7f437f63c8c201a7fb22f353669ea9</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::size_t &gt; &amp;</type>
      <name>getIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a04735b67dceb01cca425669fca2edbf9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getDofs</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>aa020dd3b3fc6e6a4e2b075bd512cfc7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getSkeletonIndex</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>ae0b5174b044f0ced2bc1e54fc03c2251</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getJointIndex</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a657bdbe63226dd9981d1b6f4b780c69f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDimension</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a9c593ed7f3b98b35f58ed4c277a4917b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUpperLimits</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>af0d6c6291c2e4fe3084592a5a0a87da6</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLowerLimits</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a0acb807d3c5b8e2f0b5271fbd0ab8a15</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>getUpperLimits</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>acf8b9472ebfcf27be30c9a3c2c7e3a17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>getLowerLimits</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a31509035d5ce512455c9576054cbdcf3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a8f41dda95cc7a75e42493c04995d3484</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;b) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>aaa00dbcce715e5433f8ac4a778ad042e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a65159cddff04d3b690e30dc868bfd653</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;b, double t, Eigen::Ref&lt; Eigen::VectorXd &gt; c) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enforceBounds</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a3a3af2118b97496037d0136ff0320ffd</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; a) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a3cabffdc632f941e20d66c5baf591b31</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>aa6090b09d9b6d74b59307700cde98f2a</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; a) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sampleNear</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>ac8c83688badb8782c72eca0251f586ca</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; a, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;near, double r) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setJointState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a195a47d6cd4286438f52585a42db9414</anchor>
      <arglist>(WorldPtr world, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getJointState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a86e5980e1791c95bf709cd0234da25f4</anchor>
      <arglist>(WorldPtr world, Eigen::Ref&lt; Eigen::VectorXd &gt; a) const</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::Joint *</type>
      <name>getJoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1Joint.html</anchorfile>
      <anchor>a7ea0f05a01223c89525283709ba4e532</anchor>
      <arglist>(WorldPtr world) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::JointConstPtr</name>
    <filename>classrobowflex_1_1darts_1_1JointConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::JointPtr</name>
    <filename>classrobowflex_1_1darts_1_1JointPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::JointRegionGoal</name>
    <filename>classrobowflex_1_1darts_1_1JointRegionGoal.html</filename>
    <base>robowflex::darts::ConstraintExtractor</base>
    <member kind="function">
      <type></type>
      <name>JointRegionGoal</name>
      <anchorfile>classrobowflex_1_1darts_1_1JointRegionGoal.html</anchorfile>
      <anchor>a01e106eaf29f1b35dcb8337c79b983df</anchor>
      <arglist>(const PlanBuilder &amp;builder, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;state, double tolerance=0.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointRegionGoal</name>
      <anchorfile>classrobowflex_1_1darts_1_1JointRegionGoal.html</anchorfile>
      <anchor>a366d631d51c8dd3c5b8c8ff67ad35c37</anchor>
      <arglist>(const PlanBuilder &amp;builder, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;lower, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JointRegionGoal</name>
      <anchorfile>classrobowflex_1_1darts_1_1JointRegionGoal.html</anchorfile>
      <anchor>a121e59270992fc31105096c38547949b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGoal</name>
      <anchorfile>classrobowflex_1_1darts_1_1JointRegionGoal.html</anchorfile>
      <anchor>aad134f562687bee0ad23a96831d2e70a</anchor>
      <arglist>(ompl::base::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>maxSampleCount</name>
      <anchorfile>classrobowflex_1_1darts_1_1JointRegionGoal.html</anchorfile>
      <anchor>a43aa2516ae1c583927d597ff1019abdc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceGoal</name>
      <anchorfile>classrobowflex_1_1darts_1_1JointRegionGoal.html</anchorfile>
      <anchor>aeeb67c60f97203298acc1b12b94bcd92</anchor>
      <arglist>(const ompl::base::State *state) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ompl::RNG</type>
      <name>rng_</name>
      <anchorfile>classrobowflex_1_1darts_1_1JointRegionGoal.html</anchorfile>
      <anchor>a7b167798b1c63f86b2295d045b4c3402</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ompl::base::State *</type>
      <name>lower_</name>
      <anchorfile>classrobowflex_1_1darts_1_1JointRegionGoal.html</anchorfile>
      <anchor>aea2d158cdc59b3d0e9c6a96bf68500cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ompl::base::State *</type>
      <name>upper_</name>
      <anchorfile>classrobowflex_1_1darts_1_1JointRegionGoal.html</anchorfile>
      <anchor>a7d652c00eb795241a0863f07f2f95243</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::JointRegionGoalConstPtr</name>
    <filename>classrobowflex_1_1darts_1_1JointRegionGoalConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::JointRegionGoalPtr</name>
    <filename>classrobowflex_1_1darts_1_1JointRegionGoalPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::LinePlotElement</name>
    <filename>classrobowflex_1_1darts_1_1LinePlotElement.html</filename>
    <base>robowflex::darts::ImGuiElement</base>
    <member kind="function">
      <type>void</type>
      <name>addPoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1LinePlotElement.html</anchorfile>
      <anchor>ae1a19a16ff5ac1798b00ac4a63182fed</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classrobowflex_1_1darts_1_1LinePlotElement.html</anchorfile>
      <anchor>a8b0e7008a25ae22e12766471a2cbe614</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>id</name>
      <anchorfile>classrobowflex_1_1darts_1_1LinePlotElement.html</anchorfile>
      <anchor>ad8a0defbb2c2d889390d7f827d23c4c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>label</name>
      <anchorfile>classrobowflex_1_1darts_1_1LinePlotElement.html</anchorfile>
      <anchor>af147f8c4c6c814e0af0091eb8c4f40d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>units</name>
      <anchorfile>classrobowflex_1_1darts_1_1LinePlotElement.html</anchorfile>
      <anchor>a343bfce35b9439ded13e3fb8c24a9486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>show_min</name>
      <anchorfile>classrobowflex_1_1darts_1_1LinePlotElement.html</anchorfile>
      <anchor>ad51d1fc0f140651ef1c6745637bc381e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>show_max</name>
      <anchorfile>classrobowflex_1_1darts_1_1LinePlotElement.html</anchorfile>
      <anchor>af2b7f267d08df275e399a4873d400c09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>show_avg</name>
      <anchorfile>classrobowflex_1_1darts_1_1LinePlotElement.html</anchorfile>
      <anchor>a15c8d1339aaa6f56010e7ad91e73a26f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>recent</name>
      <anchorfile>classrobowflex_1_1darts_1_1LinePlotElement.html</anchorfile>
      <anchor>aba4eef870f0ea7c93867db8e95077551</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>max_size</name>
      <anchorfile>classrobowflex_1_1darts_1_1LinePlotElement.html</anchorfile>
      <anchor>ae3e3d81a5bc573c8828d6738d3918fd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>color</name>
      <anchorfile>classrobowflex_1_1darts_1_1LinePlotElement.html</anchorfile>
      <anchor>a42e9237687a2bf0e2c479154b436747f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>float</type>
      <name>average</name>
      <anchorfile>classrobowflex_1_1darts_1_1LinePlotElement.html</anchorfile>
      <anchor>a5800667a1982d18584ac0862c8e3258f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>float</type>
      <name>minimum</name>
      <anchorfile>classrobowflex_1_1darts_1_1LinePlotElement.html</anchorfile>
      <anchor>a0e3baefcc8babbb357691d1d41665dcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>float</type>
      <name>maximum</name>
      <anchorfile>classrobowflex_1_1darts_1_1LinePlotElement.html</anchorfile>
      <anchor>a79854254c395dd3f7e95d3cd26a0dc84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>index</name>
      <anchorfile>classrobowflex_1_1darts_1_1LinePlotElement.html</anchorfile>
      <anchor>a48681c173a8bebccee8693db5dbf5a6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>total_elements</name>
      <anchorfile>classrobowflex_1_1darts_1_1LinePlotElement.html</anchorfile>
      <anchor>ae3d1fdbaf7dd06b816633dfeddec307f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; float &gt;</type>
      <name>elements</name>
      <anchorfile>classrobowflex_1_1darts_1_1LinePlotElement.html</anchorfile>
      <anchor>a23918770a7e8f8317a36f573d03e4584</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>latest</name>
      <anchorfile>classrobowflex_1_1darts_1_1LinePlotElement.html</anchorfile>
      <anchor>a4eb10a067b90e47f823b3860ac1ac95f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::PlanBuilder</name>
    <filename>classrobowflex_1_1darts_1_1PlanBuilder.html</filename>
    <base>robowflex::darts::ConstraintExtractor</base>
    <member kind="function">
      <type></type>
      <name>PlanBuilder</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a71c291fb868104f9c6d29d94759c4f99</anchor>
      <arglist>(WorldPtr world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a3b1400e7a532220fe5e46fcb9db174ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a25b351d98226e91fee3d7abd8d50dbf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getWorkspaceBoundsFromMessage</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a7bca4983ddad95e6b332c3be227c4422</anchor>
      <arglist>(const moveit_msgs::MotionPlanRequest &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGroupFromMessage</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>afef2c4269227925aac90718c3d1b0ad6</anchor>
      <arglist>(const std::string &amp;robot_name, const moveit_msgs::MotionPlanRequest &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getStartFromMessage</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a946b0860586a9ac1061ad99ce2ffd0d7</anchor>
      <arglist>(const std::string &amp;robot_name, const moveit_msgs::MotionPlanRequest &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPathConstraintsFromMessage</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a3543d94cc92a0c7feac9297cd732d416</anchor>
      <arglist>(const std::string &amp;robot_name, const moveit_msgs::MotionPlanRequest &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::GoalPtr</type>
      <name>getGoalFromMessage</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>adb534bae0fd805f477ee1628a50454b4</anchor>
      <arglist>(const std::string &amp;robot_name, const moveit_msgs::MotionPlanRequest &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>TSRPtr</type>
      <name>fromPositionConstraint</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>aa15a4e3613fffec9259d784d719c50de</anchor>
      <arglist>(const std::string &amp;robot_name, const moveit_msgs::PositionConstraint &amp;msg) const</arglist>
    </member>
    <member kind="function">
      <type>TSRPtr</type>
      <name>fromOrientationConstraint</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a12be41d10a2b4270081d79b64db30f59</anchor>
      <arglist>(const std::string &amp;robot_name, const moveit_msgs::OrientationConstraint &amp;msg) const</arglist>
    </member>
    <member kind="function">
      <type>JointRegionGoalPtr</type>
      <name>fromJointConstraints</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>ad783797b17e098b8b61e591272803007</anchor>
      <arglist>(const std::vector&lt; moveit_msgs::JointConstraint &gt; &amp;msgs) const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::GoalPtr</type>
      <name>fromMessage</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a9e010f6fea0771537f79d4788ba4597a</anchor>
      <arglist>(const std::string &amp;robot_name, const moveit_msgs::MotionPlanRequest &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a6abef54ee71a4e50437c2e3b434b1301</anchor>
      <arglist>(const std::string &amp;robot, const std::string &amp;name, std::size_t cyclic=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraint</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a166b2ffe907db42cefc0387f292f1c42</anchor>
      <arglist>(const TSRPtr &amp;tsr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartConfigurationFromWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a1049ce45fba0134a26d5e74911101139</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartConfiguration</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a25bca1061a9b1b91f1b7138d94574413</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartConfiguration</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a08571e98baa8b6dfbae7828296a57b93</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleStartConfiguration</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a9116fccc25d4decc25d9e30133708193</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ompl::base::GoalStates &gt;</type>
      <name>getGoalConfigurationFromWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a96a44042c7429a6689ce543cfc038b43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ompl::base::GoalStates &gt;</type>
      <name>getGoalConfiguration</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>af2748ef98900f79a8facc965482585c9</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ompl::base::GoalStates &gt;</type>
      <name>getGoalConfiguration</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a1c02502751e666196717a7ec268d3b17</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>TSRGoalPtr</type>
      <name>getGoalTSR</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a4cf92d04f31cfff25857fc48222299b9</anchor>
      <arglist>(const TSRPtr &amp;tsr)</arglist>
    </member>
    <member kind="function">
      <type>TSRGoalPtr</type>
      <name>getGoalTSR</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>af8b7c6bb0f3993eab74868a6a828209e</anchor>
      <arglist>(const std::vector&lt; TSRPtr &gt; &amp;tsrs)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ompl::base::GoalStates &gt;</type>
      <name>sampleGoalConfiguration</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a1651a4f0d11fb33c6c5f993a4e2cec52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoal</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a0a1b14a58db89dcba9d18368adfd4122</anchor>
      <arglist>(const ompl::base::GoalPtr &amp;goal)</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::State *</type>
      <name>sampleState</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>abbee6ae3c985943dcc3d1c0acf60d759</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ompl::geometric::PathGeometric</type>
      <name>getSolutionPath</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a590c2787e42a5437c8122a35238c60a3</anchor>
      <arglist>(bool simplify=true, bool interpolate=true) const</arglist>
    </member>
    <member kind="variable">
      <type>StateSpacePtr</type>
      <name>rspace</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a696eb7af546289e1ea5c5517e05a316f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ompl::base::StateSpacePtr</type>
      <name>space</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>aa6cc29275148acdbf512aa1ee758ab73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ompl::base::SpaceInformationPtr</type>
      <name>rinfo</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>ae716fd2f896b46d1c5e3ad0f5399e9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ompl::base::SpaceInformationPtr</type>
      <name>info</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a41457bfbaa539f2a46aaf3cc01fbfd24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ompl::geometric::SimpleSetupPtr</type>
      <name>ss</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a5ba3f6566806581ea9fb9f1fee739585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>WorldPtr</type>
      <name>world</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a97a580c58ef9db3b68d11985fddee2a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TSRPtr &gt;</type>
      <name>path_constraints</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a9208342c152c7fc60a208148cf272b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TSRConstraintPtr</type>
      <name>constraint</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a42ea21724081015a092ce0f1641e78c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>start</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a2f39fdb64c90d803dbe454f05a6cf9fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>delta</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a7b62df27aa82db696fb0d04a86272d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>lambda</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a21c420a332ac197d38f3540c93dd1d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct robowflex::darts::PlanBuilder::@1::@2</type>
      <name>constraints</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a7ae9546eaf6cd6b2174c3ce070180f41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct robowflex::darts::PlanBuilder::@1</type>
      <name>options</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a945f40c1d6fbef63289c75afa50a79a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeConstrained</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a3df775f06eb13fe4f1c2ad17e3ae9ebf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeUnconstrained</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>aac739233f154db8036ac197dfd40afee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setStateValidityChecker</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a8274b7de6c3e16e95f311a4c5234735d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ompl::base::StateValidityCheckerFn</type>
      <name>getSVCUnconstrained</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a41c56f7c5550721dcc7d519635cd93f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ompl::base::StateValidityCheckerFn</type>
      <name>getSVCConstrained</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>ad658c8029070b8ebb55d2a94d2e47bfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::GoalPtr</type>
      <name>goal_</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>adf4ca59a63d558cbfa512c3c568da4e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlanBuilder</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a71c291fb868104f9c6d29d94759c4f99</anchor>
      <arglist>(WorldPtr world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a3b1400e7a532220fe5e46fcb9db174ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a25b351d98226e91fee3d7abd8d50dbf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getWorkspaceBoundsFromMessage</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a7bca4983ddad95e6b332c3be227c4422</anchor>
      <arglist>(const moveit_msgs::MotionPlanRequest &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGroupFromMessage</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>afef2c4269227925aac90718c3d1b0ad6</anchor>
      <arglist>(const std::string &amp;robot_name, const moveit_msgs::MotionPlanRequest &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getStartFromMessage</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a946b0860586a9ac1061ad99ce2ffd0d7</anchor>
      <arglist>(const std::string &amp;robot_name, const moveit_msgs::MotionPlanRequest &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPathConstraintsFromMessage</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a3543d94cc92a0c7feac9297cd732d416</anchor>
      <arglist>(const std::string &amp;robot_name, const moveit_msgs::MotionPlanRequest &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::GoalPtr</type>
      <name>getGoalFromMessage</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>adb534bae0fd805f477ee1628a50454b4</anchor>
      <arglist>(const std::string &amp;robot_name, const moveit_msgs::MotionPlanRequest &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>TSRPtr</type>
      <name>fromPositionConstraint</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>aa15a4e3613fffec9259d784d719c50de</anchor>
      <arglist>(const std::string &amp;robot_name, const moveit_msgs::PositionConstraint &amp;msg) const</arglist>
    </member>
    <member kind="function">
      <type>TSRPtr</type>
      <name>fromOrientationConstraint</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a12be41d10a2b4270081d79b64db30f59</anchor>
      <arglist>(const std::string &amp;robot_name, const moveit_msgs::OrientationConstraint &amp;msg) const</arglist>
    </member>
    <member kind="function">
      <type>JointRegionGoalPtr</type>
      <name>fromJointConstraints</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>ad783797b17e098b8b61e591272803007</anchor>
      <arglist>(const std::vector&lt; moveit_msgs::JointConstraint &gt; &amp;msgs) const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::GoalPtr</type>
      <name>fromMessage</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a9e010f6fea0771537f79d4788ba4597a</anchor>
      <arglist>(const std::string &amp;robot_name, const moveit_msgs::MotionPlanRequest &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a6abef54ee71a4e50437c2e3b434b1301</anchor>
      <arglist>(const std::string &amp;robot, const std::string &amp;name, std::size_t cyclic=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraint</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a166b2ffe907db42cefc0387f292f1c42</anchor>
      <arglist>(const TSRPtr &amp;tsr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartConfigurationFromWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a1049ce45fba0134a26d5e74911101139</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartConfiguration</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a25bca1061a9b1b91f1b7138d94574413</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartConfiguration</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a08571e98baa8b6dfbae7828296a57b93</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleStartConfiguration</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a9116fccc25d4decc25d9e30133708193</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ompl::base::GoalStates &gt;</type>
      <name>getGoalConfigurationFromWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a96a44042c7429a6689ce543cfc038b43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ompl::base::GoalStates &gt;</type>
      <name>getGoalConfiguration</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>af2748ef98900f79a8facc965482585c9</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ompl::base::GoalStates &gt;</type>
      <name>getGoalConfiguration</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a1c02502751e666196717a7ec268d3b17</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>TSRGoalPtr</type>
      <name>getGoalTSR</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a4cf92d04f31cfff25857fc48222299b9</anchor>
      <arglist>(const TSRPtr &amp;tsr)</arglist>
    </member>
    <member kind="function">
      <type>TSRGoalPtr</type>
      <name>getGoalTSR</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>af8b7c6bb0f3993eab74868a6a828209e</anchor>
      <arglist>(const std::vector&lt; TSRPtr &gt; &amp;tsrs)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ompl::base::GoalStates &gt;</type>
      <name>sampleGoalConfiguration</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a1651a4f0d11fb33c6c5f993a4e2cec52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoal</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a0a1b14a58db89dcba9d18368adfd4122</anchor>
      <arglist>(const ompl::base::GoalPtr &amp;goal)</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::State *</type>
      <name>sampleState</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>abbee6ae3c985943dcc3d1c0acf60d759</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ompl::geometric::PathGeometric</type>
      <name>getSolutionPath</name>
      <anchorfile>classrobowflex_1_1darts_1_1PlanBuilder.html</anchorfile>
      <anchor>a590c2787e42a5437c8122a35238c60a3</anchor>
      <arglist>(bool simplify=true, bool interpolate=true) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::PlanBuilderConstPtr</name>
    <filename>classrobowflex_1_1darts_1_1PlanBuilderConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::PlanBuilderPtr</name>
    <filename>classrobowflex_1_1darts_1_1PlanBuilderPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::RenderElement</name>
    <filename>classrobowflex_1_1darts_1_1RenderElement.html</filename>
    <base>robowflex::darts::ImGuiElement</base>
    <member kind="function">
      <type></type>
      <name>RenderElement</name>
      <anchorfile>classrobowflex_1_1darts_1_1RenderElement.html</anchorfile>
      <anchor>a1fcc1b80fd1fe97c86a5d62039dacfc2</anchor>
      <arglist>(const RenderCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classrobowflex_1_1darts_1_1RenderElement.html</anchorfile>
      <anchor>af81c6c0c08250206a5aa67eceed75de7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const RenderCallback</type>
      <name>callback</name>
      <anchorfile>classrobowflex_1_1darts_1_1RenderElement.html</anchorfile>
      <anchor>a9ac608a3a8e25efd6f2081f6b5824601</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::RnJoint</name>
    <filename>classrobowflex_1_1darts_1_1RnJoint.html</filename>
    <base>robowflex::darts::Joint</base>
    <member kind="function">
      <type>void</type>
      <name>setUpperLimits</name>
      <anchorfile>classrobowflex_1_1darts_1_1RnJoint.html</anchorfile>
      <anchor>aa75050bcd29bbb7e58615774cecd396f</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;v) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLowerLimits</name>
      <anchorfile>classrobowflex_1_1darts_1_1RnJoint.html</anchorfile>
      <anchor>aaf93c91aab701cf601ca6ecbb9b55de1</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;v) override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classrobowflex_1_1darts_1_1RnJoint.html</anchorfile>
      <anchor>a0b1070009c661c97357c8687305a4f47</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;b) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classrobowflex_1_1darts_1_1RnJoint.html</anchorfile>
      <anchor>a1f7447130a74d6be4c599a562abe9df7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classrobowflex_1_1darts_1_1RnJoint.html</anchorfile>
      <anchor>ac023344e392f564605435a7889f61104</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;b, double t, Eigen::Ref&lt; Eigen::VectorXd &gt; c) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classrobowflex_1_1darts_1_1RnJoint.html</anchorfile>
      <anchor>a4c47374541ffb6298ed610b256c9fa5d</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; a) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classrobowflex_1_1darts_1_1RnJoint.html</anchorfile>
      <anchor>a601e7f151360b5b4951a30bec6545b15</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classrobowflex_1_1darts_1_1RnJoint.html</anchorfile>
      <anchor>a3e72a5319cb02c968f8e20bb9edac17a</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; a) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleNear</name>
      <anchorfile>classrobowflex_1_1darts_1_1RnJoint.html</anchorfile>
      <anchor>a0aa3bfcba1e0a488bae213871ea85a82</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; a, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;near, double r) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RnJoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1RnJoint.html</anchorfile>
      <anchor>a11ab2d76792930428ae49b1fe4b61bbf</anchor>
      <arglist>(StateSpace *space, dart::dynamics::Joint *joint, double low, double high)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RnJoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1RnJoint.html</anchorfile>
      <anchor>ae8743bbc505d755217044cae6780318a</anchor>
      <arglist>(StateSpace *space, dart::dynamics::Joint *joint, unsigned int n, unsigned int start, Eigen::VectorXd low, Eigen::VectorXd high)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::VectorXd</type>
      <name>low_</name>
      <anchorfile>classrobowflex_1_1darts_1_1RnJoint.html</anchorfile>
      <anchor>ae997fbedab5809ddb54b9893d8851449</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::VectorXd</type>
      <name>high_</name>
      <anchorfile>classrobowflex_1_1darts_1_1RnJoint.html</anchorfile>
      <anchor>a5b433b026c9cf77246baca87754c94d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RnJoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1RnJoint.html</anchorfile>
      <anchor>a11ab2d76792930428ae49b1fe4b61bbf</anchor>
      <arglist>(StateSpace *space, dart::dynamics::Joint *joint, double low, double high)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RnJoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1RnJoint.html</anchorfile>
      <anchor>ae8743bbc505d755217044cae6780318a</anchor>
      <arglist>(StateSpace *space, dart::dynamics::Joint *joint, unsigned int n, unsigned int start, Eigen::VectorXd low, Eigen::VectorXd high)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::Robot</name>
    <filename>classrobowflex_1_1darts_1_1Robot.html</filename>
    <base>robowflex::darts::Structure</base>
    <member kind="typedef">
      <type>std::map&lt; std::string, std::vector&lt; std::string &gt; &gt;</type>
      <name>GroupsMap</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a9f17c9fcba11100a29369ddd8d75a1cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, std::map&lt; std::string, Eigen::VectorXd &gt; &gt;</type>
      <name>NamedStatesMap</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a3361b26e2ed8a41f7d84a44eafeaa228</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Robot</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a457bcf0ddf445edee175402066a74e04</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Robot</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a0177a3997c3ec93d458aa3d17220c7e0</anchor>
      <arglist>(robowflex::RobotPtr robot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Robot</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a868aaf4ea4bf3fcc7dc32885a6deac94</anchor>
      <arglist>(const std::string &amp;name, const ScenePtr &amp;scene)</arglist>
    </member>
    <member kind="function">
      <type>RobotPtr</type>
      <name>cloneRobot</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>ab6debe4006927a58301798a2e5e62eea</anchor>
      <arglist>(const std::string &amp;newName) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadURDF</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>adc661f435af61bd3e3b81c503b5b7ecb</anchor>
      <arglist>(const std::string &amp;urdf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadSRDF</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a60627c98d91a462d5c2d1e5eae792388</anchor>
      <arglist>(const std::string &amp;srdf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateFromMoveItMsg</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>ab19eda73277d5b9b50be9f821b7ff248</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMoveItMsgFromState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a5fdc5c6bf00c3e50f3ac7e6e0671f664</anchor>
      <arglist>(moveit_msgs::RobotState &amp;msg) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateFromMoveItState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a0ebd2f50a6d69930aea9ca0d9210d373</anchor>
      <arglist>(const robot_state::RobotState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMoveItStateFromState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a4d920c5995330ec91407af9a9dbdd205</anchor>
      <arglist>(robot_state::RobotState &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateFromMoveItJMG</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a498e5c6408f2d560169d2d246141875b</anchor>
      <arglist>(const std::string &amp;jmg, const std::vector&lt; double &gt; &amp;joints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateFromMoveItJMG</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>aadcd838c1f9ddc72a5588bef87b48833</anchor>
      <arglist>(const std::string &amp;jmg, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMoveItJMGFromState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>ad5ee363a1f045f81a521c944782ec8fb</anchor>
      <arglist>(const std::string &amp;jmg, std::vector&lt; double &gt; &amp;joints) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMoveItJMGFromState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a31fe9abcb7f37b884fe8b92f8353abc5</anchor>
      <arglist>(const std::string &amp;jmg, Eigen::Ref&lt; Eigen::VectorXd &gt; vec) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGroups</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a35aa165881d9b01730945e931c400a81</anchor>
      <arglist>(const GroupsMap &amp;newGroups)</arglist>
    </member>
    <member kind="function">
      <type>const GroupsMap &amp;</type>
      <name>getGroups</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a1cb4ea9040cd2a498af20de519081d11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt; &amp;</type>
      <name>getGroupJointNames</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>ac0f646f875ace1bf26fe146ff9241935</anchor>
      <arglist>(const std::string &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getGroupJointNamesConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a15dadc00ac9501764203a09bcbb8e108</anchor>
      <arglist>(const std::string &amp;group) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; dart::dynamics::Joint * &gt;</type>
      <name>getGroupJoints</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>ad1ea005e7b9720075e8bc9979e646c6d</anchor>
      <arglist>(const std::string &amp;group) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::size_t, dart::dynamics::Joint * &gt;</type>
      <name>getGroupJoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>ab9b35de872f4db5505a7cd77935c7937</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;joint) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::size_t &gt; &amp;</type>
      <name>getGroupIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a1de869a74baf8982bc6a207426f210fc</anchor>
      <arglist>(const std::string &amp;group) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a8ef49370de99031cefb29f258b52562a</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumDofsGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a14fa550344b093ae9d747e8110f9d8a1</anchor>
      <arglist>(const std::string &amp;group) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGroupState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a8305b201b1272dfdbc8ebf9b6cc693c2</anchor>
      <arglist>(const std::string &amp;group, Eigen::Ref&lt; Eigen::VectorXd &gt; q) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGroupState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a32e88ed68a853097102db9866db63e88</anchor>
      <arglist>(const std::string &amp;group, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addJointToGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a5cae7b420da3fd29bcf3035628b450ed</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;joint_name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addLinkToGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>aec246a214e141fb14a85ac0cff9cbf8f</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;link_name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addChainToGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a9bb0c5a53c47698cb990793b6da8073d</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;tip, const std::string &amp;base)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addGroupToGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a2d5173626134234884274e26e7b03058</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNamedGroupStates</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>aaea3c837a0cdd9f0674261ead00a8369</anchor>
      <arglist>(const NamedStatesMap &amp;states)</arglist>
    </member>
    <member kind="function">
      <type>const NamedStatesMap &amp;</type>
      <name>getNamedGroupStates</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a467f710fdc3dfc674c6054c11cedadd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getNamedGroupStates</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a1a84b34eb6cbf7c30408e6d9468e6cf8</anchor>
      <arglist>(const std::string &amp;group) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNamedGroupState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a51a67c093a53f34ac1eef9cf41c613af</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;name, Eigen::Ref&lt; Eigen::VectorXd &gt; q) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNamedGroupState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a5a5064a00ed24ee85972e689fe4dd056</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;name, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;q)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>addNameToGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>aaa2d663861c9a4980e1941f915eb14b7</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>processGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>abc5c8336d07456baec0687726cd9b45f</anchor>
      <arglist>(const std::string &amp;group)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, std::vector&lt; std::string &gt; &gt;</type>
      <name>groups_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>addc6734cd168aece03059ee50a4e7014</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, std::map&lt; std::string, Eigen::VectorXd &gt; &gt;</type>
      <name>group_states_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>acaa486ea52271860c5a050a3257fcd91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, std::vector&lt; std::size_t &gt; &gt;</type>
      <name>group_indices_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a716b81d37c8943ec91b5b5f5bf7ba341</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>robowflex::RobotPtr</type>
      <name>robot_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a9f1a984241954b41ba2035fe8658f30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Robot</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a457bcf0ddf445edee175402066a74e04</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Robot</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a0177a3997c3ec93d458aa3d17220c7e0</anchor>
      <arglist>(robowflex::RobotPtr robot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Robot</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a868aaf4ea4bf3fcc7dc32885a6deac94</anchor>
      <arglist>(const std::string &amp;name, const ScenePtr &amp;scene)</arglist>
    </member>
    <member kind="function">
      <type>RobotPtr</type>
      <name>cloneRobot</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>ab6debe4006927a58301798a2e5e62eea</anchor>
      <arglist>(const std::string &amp;newName) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadURDF</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>adc661f435af61bd3e3b81c503b5b7ecb</anchor>
      <arglist>(const std::string &amp;urdf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadSRDF</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a60627c98d91a462d5c2d1e5eae792388</anchor>
      <arglist>(const std::string &amp;srdf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateFromMoveItMsg</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>ab19eda73277d5b9b50be9f821b7ff248</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMoveItMsgFromState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a5fdc5c6bf00c3e50f3ac7e6e0671f664</anchor>
      <arglist>(moveit_msgs::RobotState &amp;msg) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateFromMoveItState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a0ebd2f50a6d69930aea9ca0d9210d373</anchor>
      <arglist>(const robot_state::RobotState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMoveItStateFromState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a4d920c5995330ec91407af9a9dbdd205</anchor>
      <arglist>(robot_state::RobotState &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateFromMoveItJMG</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a498e5c6408f2d560169d2d246141875b</anchor>
      <arglist>(const std::string &amp;jmg, const std::vector&lt; double &gt; &amp;joints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateFromMoveItJMG</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>aadcd838c1f9ddc72a5588bef87b48833</anchor>
      <arglist>(const std::string &amp;jmg, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMoveItJMGFromState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>ad5ee363a1f045f81a521c944782ec8fb</anchor>
      <arglist>(const std::string &amp;jmg, std::vector&lt; double &gt; &amp;joints) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMoveItJMGFromState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a31fe9abcb7f37b884fe8b92f8353abc5</anchor>
      <arglist>(const std::string &amp;jmg, Eigen::Ref&lt; Eigen::VectorXd &gt; vec) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGroups</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a35aa165881d9b01730945e931c400a81</anchor>
      <arglist>(const GroupsMap &amp;newGroups)</arglist>
    </member>
    <member kind="function">
      <type>const GroupsMap &amp;</type>
      <name>getGroups</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a1cb4ea9040cd2a498af20de519081d11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt; &amp;</type>
      <name>getGroupJointNames</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>ac0f646f875ace1bf26fe146ff9241935</anchor>
      <arglist>(const std::string &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getGroupJointNamesConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a15dadc00ac9501764203a09bcbb8e108</anchor>
      <arglist>(const std::string &amp;group) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; dart::dynamics::Joint * &gt;</type>
      <name>getGroupJoints</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>ad1ea005e7b9720075e8bc9979e646c6d</anchor>
      <arglist>(const std::string &amp;group) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::size_t, dart::dynamics::Joint * &gt;</type>
      <name>getGroupJoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>ab9b35de872f4db5505a7cd77935c7937</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;joint) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::size_t &gt; &amp;</type>
      <name>getGroupIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a1de869a74baf8982bc6a207426f210fc</anchor>
      <arglist>(const std::string &amp;group) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a8ef49370de99031cefb29f258b52562a</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumDofsGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a14fa550344b093ae9d747e8110f9d8a1</anchor>
      <arglist>(const std::string &amp;group) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGroupState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a8305b201b1272dfdbc8ebf9b6cc693c2</anchor>
      <arglist>(const std::string &amp;group, Eigen::Ref&lt; Eigen::VectorXd &gt; q) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGroupState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a32e88ed68a853097102db9866db63e88</anchor>
      <arglist>(const std::string &amp;group, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addJointToGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a5cae7b420da3fd29bcf3035628b450ed</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;joint_name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addLinkToGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>aec246a214e141fb14a85ac0cff9cbf8f</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;link_name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addChainToGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a9bb0c5a53c47698cb990793b6da8073d</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;tip, const std::string &amp;base)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addGroupToGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a2d5173626134234884274e26e7b03058</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNamedGroupStates</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>aaea3c837a0cdd9f0674261ead00a8369</anchor>
      <arglist>(const NamedStatesMap &amp;states)</arglist>
    </member>
    <member kind="function">
      <type>const NamedStatesMap &amp;</type>
      <name>getNamedGroupStates</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a467f710fdc3dfc674c6054c11cedadd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getNamedGroupStates</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a1a84b34eb6cbf7c30408e6d9468e6cf8</anchor>
      <arglist>(const std::string &amp;group) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNamedGroupState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a51a67c093a53f34ac1eef9cf41c613af</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;name, Eigen::Ref&lt; Eigen::VectorXd &gt; q) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNamedGroupState</name>
      <anchorfile>classrobowflex_1_1darts_1_1Robot.html</anchorfile>
      <anchor>a5a5064a00ed24ee85972e689fe4dd056</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;name, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;q)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::SO2Joint</name>
    <filename>classrobowflex_1_1darts_1_1SO2Joint.html</filename>
    <base>robowflex::darts::Joint</base>
    <member kind="function">
      <type></type>
      <name>SO2Joint</name>
      <anchorfile>classrobowflex_1_1darts_1_1SO2Joint.html</anchorfile>
      <anchor>af5ff04ee94fedd80907480ca183c8517</anchor>
      <arglist>(StateSpace *space, dart::dynamics::Joint *joint, unsigned int index=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classrobowflex_1_1darts_1_1SO2Joint.html</anchorfile>
      <anchor>aaba86f4650a2296c125930dbb48f956b</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;b) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classrobowflex_1_1darts_1_1SO2Joint.html</anchorfile>
      <anchor>ab48366cdc6c8c54bd375602b647c910f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classrobowflex_1_1darts_1_1SO2Joint.html</anchorfile>
      <anchor>a912e9cda77859aaa15d2e993cd289aca</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;b, double t, Eigen::Ref&lt; Eigen::VectorXd &gt; c) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classrobowflex_1_1darts_1_1SO2Joint.html</anchorfile>
      <anchor>a5145f499aff34f2bf24208e1acabd979</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; a) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classrobowflex_1_1darts_1_1SO2Joint.html</anchorfile>
      <anchor>adcfce24ecb428f009110a0f18ad11934</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classrobowflex_1_1darts_1_1SO2Joint.html</anchorfile>
      <anchor>a3d5d472faf0a572cb6c20d6874aa8531</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; a) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleNear</name>
      <anchorfile>classrobowflex_1_1darts_1_1SO2Joint.html</anchorfile>
      <anchor>aaa436bd254beb9c3f0d3853508a08e77</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; a, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;near, double r) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::SO3Joint</name>
    <filename>classrobowflex_1_1darts_1_1SO3Joint.html</filename>
    <base>robowflex::darts::Joint</base>
    <member kind="function">
      <type></type>
      <name>SO3Joint</name>
      <anchorfile>classrobowflex_1_1darts_1_1SO3Joint.html</anchorfile>
      <anchor>a1a1b34359a39d8eab4acc1c1a845835e</anchor>
      <arglist>(StateSpace *space, dart::dynamics::Joint *joint)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Quaterniond</type>
      <name>toQuat</name>
      <anchorfile>classrobowflex_1_1darts_1_1SO3Joint.html</anchorfile>
      <anchor>ab06a63e51d762ef38936b4490b819a1f</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuat</name>
      <anchorfile>classrobowflex_1_1darts_1_1SO3Joint.html</anchorfile>
      <anchor>a303adbe64f3bce5ea6c92a4ecedb612c</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; a, const Eigen::Quaterniond &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classrobowflex_1_1darts_1_1SO3Joint.html</anchorfile>
      <anchor>a5c7583b4d678338bcf020861f8129742</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;b) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classrobowflex_1_1darts_1_1SO3Joint.html</anchorfile>
      <anchor>a465e25c18b10ce39df16910a356af763</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classrobowflex_1_1darts_1_1SO3Joint.html</anchorfile>
      <anchor>a18943a0a6d36205a910e4ed11cd729aa</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;b, double t, Eigen::Ref&lt; Eigen::VectorXd &gt; c) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classrobowflex_1_1darts_1_1SO3Joint.html</anchorfile>
      <anchor>a39bf919fe685b0b26fbfc442caf3d82d</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; a) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classrobowflex_1_1darts_1_1SO3Joint.html</anchorfile>
      <anchor>aeb421cc85d09aacd2905d3dcc6231f08</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classrobowflex_1_1darts_1_1SO3Joint.html</anchorfile>
      <anchor>a6d3d73ae385809b0d17779c3c7761dd1</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; a) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleNear</name>
      <anchorfile>classrobowflex_1_1darts_1_1SO3Joint.html</anchorfile>
      <anchor>ad31a7e98be045ac9e4c0ec233aaa7b03</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; a, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;near, double r) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointState</name>
      <anchorfile>classrobowflex_1_1darts_1_1SO3Joint.html</anchorfile>
      <anchor>a8e3aa9f685ee030024bc3303ee1aeddb</anchor>
      <arglist>(WorldPtr world, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;a) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJointState</name>
      <anchorfile>classrobowflex_1_1darts_1_1SO3Joint.html</anchorfile>
      <anchor>a95fdd571f225fee24148353966e707d1</anchor>
      <arglist>(WorldPtr world, Eigen::Ref&lt; Eigen::VectorXd &gt; a) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::StateSpace</name>
    <filename>classrobowflex_1_1darts_1_1StateSpace.html</filename>
    <class kind="class">robowflex::darts::StateSpace::StateSampler</class>
    <class kind="class">robowflex::darts::StateSpace::StateType</class>
    <member kind="function">
      <type>void</type>
      <name>setMetricSpace</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a725d110213b943cea3edac0e2223f59c</anchor>
      <arglist>(bool metric)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateSpace</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a507ff2bf0c141f7d030c1226a4d6f864</anchor>
      <arglist>(WorldPtr world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>aabce82d6e6b9b8c1b3e94dbb529e90ac</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;group, std::size_t cyclic=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGroupFromJoints</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>aab1c29c565353ba5d385129aed3847b7</anchor>
      <arglist>(const std::string &amp;group_name, const std::vector&lt; dart::dynamics::Joint * &gt; &amp;joints, std::size_t cyclic=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a078da452e6649c03ad969ae249d00a26</anchor>
      <arglist>(WorldPtr world, const ompl::base::State *state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a5c610e6bfa529f9d4b84412bbac59c87</anchor>
      <arglist>(WorldPtr world, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a4467d58f2c6329bdd04be0aecd8e03a2</anchor>
      <arglist>(WorldPtr world, ompl::base::State *state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>aaa4e020d641d5ae27541be682063d784</anchor>
      <arglist>(WorldPtr world, Eigen::Ref&lt; Eigen::VectorXd &gt; x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorldGroupState</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>ae9a88e244b386e49629f7b2f60a529a5</anchor>
      <arglist>(WorldPtr world, const std::string &amp;group_name, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getWorldGroupState</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>ad7d559a64216d86552dfdb5144b01eeb</anchor>
      <arglist>(WorldPtr world, const std::string &amp;group_name, Eigen::Ref&lt; Eigen::VectorXd &gt; x) const</arglist>
    </member>
    <member kind="function">
      <type>WorldPtr</type>
      <name>getWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>acaeb122e77cb76b765c29ae4140ab25c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldPtr &amp;</type>
      <name>getWorldConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a2b8ebd79e32ae3f0543d1b7a6f4013be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; std::size_t, std::size_t &gt; &gt;</type>
      <name>getIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a200e68e644d5d991c63b7a171706b50d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>getLowerBound</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a2739acd608ce7480d07883ad4d82914d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>getUpperBound</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a55ac955de00216d5ce51b7b14414be05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JointPtr</type>
      <name>getJoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>ae8c4b47db4984d6b350bf210cf71526a</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>JointPtr</type>
      <name>getJoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a41a5f22f60a5f8f186190b46fe3f289a</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; JointPtr &gt; &amp;</type>
      <name>getJoints</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a4536a971ff7235a0a21e9f91cf87d343</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGroupState</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a22feed6268ee3fee0c9586cc5c98a4e0</anchor>
      <arglist>(const std::string &amp;group, const ompl::base::State *state, Eigen::Ref&lt; Eigen::VectorXd &gt; v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGroupState</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>ad8966516d52a6138bd0cf354b5f07a41</anchor>
      <arglist>(const std::string &amp;group, ompl::base::State *state, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getGroupDimension</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>ae7ac41b2b36a0f3460cac3a7c19da57e</anchor>
      <arglist>(const std::string &amp;group) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getGroups</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>aefa6a97d97732326246f3419f81154a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getGroupDofNames</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a9d7732beb7b7fdea6a9ac76c62532718</anchor>
      <arglist>(const std::string &amp;group_name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMetricSpace</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a4761e696a4cbcd47e5f73caedb2f5863</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a5babd1d226aa5acf149f0201bb8a3499</anchor>
      <arglist>(ompl::base::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a47dac67411ce81639a587862d76ad067</anchor>
      <arglist>(const ompl::base::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a6e09abd2bef65b05128139d1f9c699b5</anchor>
      <arglist>(const ompl::base::State *state1, const ompl::base::State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a96f68e2942cda5c8f1700b27c0cd53dd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalStates</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>ac89be46c63320016cdc77d62bc3a313a</anchor>
      <arglist>(const ompl::base::State *state1, const ompl::base::State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a1a82f3b63e26d6a630e3ed3cbaa6585d</anchor>
      <arglist>(const ompl::base::State *from, const ompl::base::State *to, double t, ompl::base::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a969fd586efa78a76dc6836ec59687849</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::State *</type>
      <name>allocState</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a2c901832d78134a904474138f9e114d0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>aa609c2a894137d9c0348779ff545d491</anchor>
      <arglist>(ompl::base::State *state) const override</arglist>
    </member>
    <member kind="variable">
      <type>friend</type>
      <name>Joint</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a519e4ba864d9b39f0f58710ceceaecda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>friend</type>
      <name>RnJoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>aec09992b5aa772b051d54ccacda58d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>friend</type>
      <name>StateSampler</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>acd6d33a23264a0a436c86379930201f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addJoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a7dd70011e6390de7554348608a7694f8</anchor>
      <arglist>(const std::string &amp;group_name, const JointPtr &amp;joint)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addJointToGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a03ba650790078d2bd38f3561b83ec810</anchor>
      <arglist>(const std::string &amp;group_name, const JointPtr &amp;joint)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>WorldPtr</type>
      <name>world_</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a6334535d9c471697e24411a86cdb6d4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; dart::dynamics::Joint * &gt;</type>
      <name>jointset_</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a86868146a8b16c27851a98a67f29586a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>indices_</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a12c98cf751961397dc67fc62c93824ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>metric_</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a0f369f6a508d38b85d0972fcc1520452</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; JointPtr &gt;</type>
      <name>joints_</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a69377ea746a53d52c418cd320c219303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::RNG</type>
      <name>rng_</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>ae2da02e61c39faee42d4099a959a7bb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, std::vector&lt; JointPtr &gt; &gt;</type>
      <name>group_joints_</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>ab43489fec34d181aa4cec6c9befab051</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, std::size_t &gt;</type>
      <name>group_dimension_</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>ac569a8a8a30a9d584366752d882e1ca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateSpace</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a507ff2bf0c141f7d030c1226a4d6f864</anchor>
      <arglist>(WorldPtr world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>aabce82d6e6b9b8c1b3e94dbb529e90ac</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;group, std::size_t cyclic=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGroupFromJoints</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>aab1c29c565353ba5d385129aed3847b7</anchor>
      <arglist>(const std::string &amp;group_name, const std::vector&lt; dart::dynamics::Joint * &gt; &amp;joints, std::size_t cyclic=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a078da452e6649c03ad969ae249d00a26</anchor>
      <arglist>(WorldPtr world, const ompl::base::State *state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a5c610e6bfa529f9d4b84412bbac59c87</anchor>
      <arglist>(WorldPtr world, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a4467d58f2c6329bdd04be0aecd8e03a2</anchor>
      <arglist>(WorldPtr world, ompl::base::State *state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>aaa4e020d641d5ae27541be682063d784</anchor>
      <arglist>(WorldPtr world, Eigen::Ref&lt; Eigen::VectorXd &gt; x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorldGroupState</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>ae9a88e244b386e49629f7b2f60a529a5</anchor>
      <arglist>(WorldPtr world, const std::string &amp;group_name, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getWorldGroupState</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>ad7d559a64216d86552dfdb5144b01eeb</anchor>
      <arglist>(WorldPtr world, const std::string &amp;group_name, Eigen::Ref&lt; Eigen::VectorXd &gt; x) const</arglist>
    </member>
    <member kind="function">
      <type>WorldPtr</type>
      <name>getWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>acaeb122e77cb76b765c29ae4140ab25c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldPtr &amp;</type>
      <name>getWorldConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a2b8ebd79e32ae3f0543d1b7a6f4013be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; std::size_t, std::size_t &gt; &gt;</type>
      <name>getIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a200e68e644d5d991c63b7a171706b50d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>getLowerBound</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a2739acd608ce7480d07883ad4d82914d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>getUpperBound</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a55ac955de00216d5ce51b7b14414be05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JointPtr</type>
      <name>getJoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>ae8c4b47db4984d6b350bf210cf71526a</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>JointPtr</type>
      <name>getJoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a41a5f22f60a5f8f186190b46fe3f289a</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; JointPtr &gt; &amp;</type>
      <name>getJoints</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a4536a971ff7235a0a21e9f91cf87d343</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGroupState</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a22feed6268ee3fee0c9586cc5c98a4e0</anchor>
      <arglist>(const std::string &amp;group, const ompl::base::State *state, Eigen::Ref&lt; Eigen::VectorXd &gt; v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGroupState</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>ad8966516d52a6138bd0cf354b5f07a41</anchor>
      <arglist>(const std::string &amp;group, ompl::base::State *state, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getGroupDimension</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>ae7ac41b2b36a0f3460cac3a7c19da57e</anchor>
      <arglist>(const std::string &amp;group) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getGroups</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>aefa6a97d97732326246f3419f81154a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getGroupDofNames</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a9d7732beb7b7fdea6a9ac76c62532718</anchor>
      <arglist>(const std::string &amp;group_name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMetricSpace</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a4761e696a4cbcd47e5f73caedb2f5863</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a5babd1d226aa5acf149f0201bb8a3499</anchor>
      <arglist>(ompl::base::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a47dac67411ce81639a587862d76ad067</anchor>
      <arglist>(const ompl::base::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a6e09abd2bef65b05128139d1f9c699b5</anchor>
      <arglist>(const ompl::base::State *state1, const ompl::base::State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a96f68e2942cda5c8f1700b27c0cd53dd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalStates</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>ac89be46c63320016cdc77d62bc3a313a</anchor>
      <arglist>(const ompl::base::State *state1, const ompl::base::State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a1a82f3b63e26d6a630e3ed3cbaa6585d</anchor>
      <arglist>(const ompl::base::State *from, const ompl::base::State *to, double t, ompl::base::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a969fd586efa78a76dc6836ec59687849</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::State *</type>
      <name>allocState</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>a2c901832d78134a904474138f9e114d0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace.html</anchorfile>
      <anchor>aa609c2a894137d9c0348779ff545d491</anchor>
      <arglist>(ompl::base::State *state) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::StateSpace::StateSampler</name>
    <filename>classrobowflex_1_1darts_1_1StateSpace_1_1StateSampler.html</filename>
    <member kind="function">
      <type></type>
      <name>StateSampler</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace_1_1StateSampler.html</anchorfile>
      <anchor>ac151ccb8322dae98fc81f788a16129f8</anchor>
      <arglist>(const StateSpace *space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniform</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace_1_1StateSampler.html</anchorfile>
      <anchor>a04b56cbb222398e90db643d544e07bfd</anchor>
      <arglist>(ompl::base::State *state) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace_1_1StateSampler.html</anchorfile>
      <anchor>a8f5e83e1e974da82a85ff132a4e18d4f</anchor>
      <arglist>(ompl::base::State *state, const ompl::base::State *near, double distance) override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::vector&lt; JointPtr &gt; &amp;</type>
      <name>joints_</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace_1_1StateSampler.html</anchorfile>
      <anchor>a278954086ad77594123da272b4a6707f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniform</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace_1_1StateSampler.html</anchorfile>
      <anchor>a04b56cbb222398e90db643d544e07bfd</anchor>
      <arglist>(ompl::base::State *state) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace_1_1StateSampler.html</anchorfile>
      <anchor>a8f5e83e1e974da82a85ff132a4e18d4f</anchor>
      <arglist>(ompl::base::State *state, const ompl::base::State *near, double distance) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::StateSpace::StateSamplerConstPtr</name>
    <filename>classrobowflex_1_1darts_1_1StateSpace_1_1StateSamplerConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::StateSpace::StateSamplerPtr</name>
    <filename>classrobowflex_1_1darts_1_1StateSpace_1_1StateSamplerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::StateSpace::StateType</name>
    <filename>classrobowflex_1_1darts_1_1StateSpace_1_1StateType.html</filename>
    <member kind="function">
      <type></type>
      <name>StateType</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace_1_1StateType.html</anchorfile>
      <anchor>a89a8be2c279ec03f683c002c3ab39fc7</anchor>
      <arglist>(std::size_t n)</arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>data</name>
      <anchorfile>classrobowflex_1_1darts_1_1StateSpace_1_1StateType.html</anchorfile>
      <anchor>a84e42119561139d15ebd4bb3c8318ebd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::StateSpaceConstPtr</name>
    <filename>classrobowflex_1_1darts_1_1StateSpaceConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::StateSpacePtr</name>
    <filename>classrobowflex_1_1darts_1_1StateSpacePtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::Structure</name>
    <filename>classrobowflex_1_1darts_1_1Structure.html</filename>
    <member kind="function">
      <type></type>
      <name>Structure</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a4525b6aa309ca16d3ee1f1f47cc2220d</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Structure</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a0b51f8d38d7e516b5d5ce69d90b8204d</anchor>
      <arglist>(const std::string &amp;name, const SceneConstPtr &amp;scene)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Structure</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>acffee943fae2916159bb6068ec34df8c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>StructurePtr</type>
      <name>cloneStructure</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a1af59f2df1ee2ab3ccc89a28a880cae5</anchor>
      <arglist>(const std::string &amp;newName) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a7729a5db78074800db8e5d2ca2c99752</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ACMPtr</type>
      <name>getACM</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a48e3f554b396bdfbd8e3ee3aaab2d907</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ACMPtr &amp;</type>
      <name>getACMConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>af8bc6c72576c6b1255f13c193dda106f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSkeleton</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>aa8185054a5190587c8e0ffdce5c0f7d2</anchor>
      <arglist>(const dart::dynamics::SkeletonPtr &amp;skeleton)</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::SkeletonPtr &amp;</type>
      <name>getSkeleton</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>ab4929be3dd85a1ec355177427497486c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const dart::dynamics::SkeletonPtr &amp;</type>
      <name>getSkeletonConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a978b9f474bfdb493979758cf43ade4a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpGraphViz</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a1a22707db1aaa21834be3d5ce25247bb</anchor>
      <arglist>(std::ostream &amp;out, bool standalone=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a2739487bbea91a0c90559b91142fc26e</anchor>
      <arglist>(const std::string &amp;name, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a399aa77cf250a32ae874ea20d05884f1</anchor>
      <arglist>(const std::string &amp;name, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveIK</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a35d07ea797a7393ad31cb6296d795795</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDof</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>ad094564babb17ac9eb556aa4b4fe2995</anchor>
      <arglist>(unsigned int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getJointNames</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a790cf1d7cc2c0057d927ded0552cb49d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::Joint *</type>
      <name>getJoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>afffb713db05526ae4cbd15d41aaf65a9</anchor>
      <arglist>(const std::string &amp;joint_name) const</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::BodyNode *</type>
      <name>getFrame</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>aeace56f37dd09956bc89a8156e906e05</anchor>
      <arglist>(const std::string &amp;name=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::BodyNode *</type>
      <name>getRootFrame</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>ae9b6357675b79f2a3e9272d0734bfcd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reparentFreeFrame</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a91805b2217689cab4bf6d3e267523faf</anchor>
      <arglist>(dart::dynamics::BodyNode *child, const std::string &amp;parent=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointParentTransform</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a2d4fb358adf7d41bdbdcbc0d41b510a4</anchor>
      <arglist>(const std::string &amp;name, const RobotPose &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateCollisionObject</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a4daf3a885aaaff7966fdc11ce1c17922</anchor>
      <arglist>(const std::string &amp;name, const GeometryPtr &amp;geometry, const robowflex::RobotPose &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; dart::dynamics::RevoluteJoint *, dart::dynamics::BodyNode * &gt;</type>
      <name>addRevoluteFrame</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>abb2c3009396c328d88368d95d291972f</anchor>
      <arglist>(const dart::dynamics::RevoluteJoint::Properties &amp;properties, const dart::dynamics::ShapePtr &amp;shape, dart::dynamics::BodyNode *parent=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; dart::dynamics::PrismaticJoint *, dart::dynamics::BodyNode * &gt;</type>
      <name>addPrismaticFrame</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a53a67ee1a1ac9990a1f5836a8c6ae359</anchor>
      <arglist>(const dart::dynamics::PrismaticJoint::Properties &amp;properties, const dart::dynamics::ShapePtr &amp;shape, dart::dynamics::BodyNode *parent=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; dart::dynamics::FreeJoint *, dart::dynamics::BodyNode * &gt;</type>
      <name>addFreeFrame</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a8871bfd5f50aade761dd8bd12a8a04b8</anchor>
      <arglist>(const dart::dynamics::FreeJoint::Properties &amp;properties, const dart::dynamics::ShapePtr &amp;shape, dart::dynamics::BodyNode *parent=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; dart::dynamics::WeldJoint *, dart::dynamics::BodyNode * &gt;</type>
      <name>addWeldedFrame</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a96e6064fd19ece3b7db2a9f7805ae39b</anchor>
      <arglist>(const dart::dynamics::WeldJoint::Properties &amp;properties, const dart::dynamics::ShapePtr &amp;shape, dart::dynamics::BodyNode *parent=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGround</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>aad81e36a0cbd5cdf743bbebe1cba6393</anchor>
      <arglist>(double z=0., double radius=10.)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createShapeNode</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a7d21809fb1a27c6d4905765ed65ce7e6</anchor>
      <arglist>(dart::dynamics::BodyNode *body, const dart::dynamics::ShapePtr &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::string</type>
      <name>name_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>aa9bb6c04aa942b82a880b4bf0eac67a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>skeleton_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>aa8b0e23ed78db5531e232f4345cd48e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACMPtr</type>
      <name>acm_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a8a24bcf8177523cec0159529f6ccc745</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Structure</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a4525b6aa309ca16d3ee1f1f47cc2220d</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Structure</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a0b51f8d38d7e516b5d5ce69d90b8204d</anchor>
      <arglist>(const std::string &amp;name, const SceneConstPtr &amp;scene)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Structure</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>acffee943fae2916159bb6068ec34df8c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>StructurePtr</type>
      <name>cloneStructure</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a1af59f2df1ee2ab3ccc89a28a880cae5</anchor>
      <arglist>(const std::string &amp;newName) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a7729a5db78074800db8e5d2ca2c99752</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ACMPtr</type>
      <name>getACM</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a48e3f554b396bdfbd8e3ee3aaab2d907</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ACMPtr &amp;</type>
      <name>getACMConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>af8bc6c72576c6b1255f13c193dda106f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSkeleton</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>aa8185054a5190587c8e0ffdce5c0f7d2</anchor>
      <arglist>(const dart::dynamics::SkeletonPtr &amp;skeleton)</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::SkeletonPtr &amp;</type>
      <name>getSkeleton</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>ab4929be3dd85a1ec355177427497486c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const dart::dynamics::SkeletonPtr &amp;</type>
      <name>getSkeletonConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a978b9f474bfdb493979758cf43ade4a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpGraphViz</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a1a22707db1aaa21834be3d5ce25247bb</anchor>
      <arglist>(std::ostream &amp;out, bool standalone=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a2739487bbea91a0c90559b91142fc26e</anchor>
      <arglist>(const std::string &amp;name, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a399aa77cf250a32ae874ea20d05884f1</anchor>
      <arglist>(const std::string &amp;name, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveIK</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a35d07ea797a7393ad31cb6296d795795</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDof</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>ad094564babb17ac9eb556aa4b4fe2995</anchor>
      <arglist>(unsigned int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getJointNames</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a790cf1d7cc2c0057d927ded0552cb49d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::Joint *</type>
      <name>getJoint</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>afffb713db05526ae4cbd15d41aaf65a9</anchor>
      <arglist>(const std::string &amp;joint_name) const</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::BodyNode *</type>
      <name>getFrame</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>aeace56f37dd09956bc89a8156e906e05</anchor>
      <arglist>(const std::string &amp;name=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::BodyNode *</type>
      <name>getRootFrame</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>ae9b6357675b79f2a3e9272d0734bfcd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reparentFreeFrame</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a91805b2217689cab4bf6d3e267523faf</anchor>
      <arglist>(dart::dynamics::BodyNode *child, const std::string &amp;parent=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointParentTransform</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a2d4fb358adf7d41bdbdcbc0d41b510a4</anchor>
      <arglist>(const std::string &amp;name, const RobotPose &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateCollisionObject</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a4daf3a885aaaff7966fdc11ce1c17922</anchor>
      <arglist>(const std::string &amp;name, const GeometryPtr &amp;geometry, const robowflex::RobotPose &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; dart::dynamics::RevoluteJoint *, dart::dynamics::BodyNode * &gt;</type>
      <name>addRevoluteFrame</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>abb2c3009396c328d88368d95d291972f</anchor>
      <arglist>(const dart::dynamics::RevoluteJoint::Properties &amp;properties, const dart::dynamics::ShapePtr &amp;shape, dart::dynamics::BodyNode *parent=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; dart::dynamics::PrismaticJoint *, dart::dynamics::BodyNode * &gt;</type>
      <name>addPrismaticFrame</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a53a67ee1a1ac9990a1f5836a8c6ae359</anchor>
      <arglist>(const dart::dynamics::PrismaticJoint::Properties &amp;properties, const dart::dynamics::ShapePtr &amp;shape, dart::dynamics::BodyNode *parent=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; dart::dynamics::FreeJoint *, dart::dynamics::BodyNode * &gt;</type>
      <name>addFreeFrame</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a8871bfd5f50aade761dd8bd12a8a04b8</anchor>
      <arglist>(const dart::dynamics::FreeJoint::Properties &amp;properties, const dart::dynamics::ShapePtr &amp;shape, dart::dynamics::BodyNode *parent=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; dart::dynamics::WeldJoint *, dart::dynamics::BodyNode * &gt;</type>
      <name>addWeldedFrame</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>a96e6064fd19ece3b7db2a9f7805ae39b</anchor>
      <arglist>(const dart::dynamics::WeldJoint::Properties &amp;properties, const dart::dynamics::ShapePtr &amp;shape, dart::dynamics::BodyNode *parent=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGround</name>
      <anchorfile>classrobowflex_1_1darts_1_1Structure.html</anchorfile>
      <anchor>aad81e36a0cbd5cdf743bbebe1cba6393</anchor>
      <arglist>(double z=0., double radius=10.)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::StructureConstPtr</name>
    <filename>classrobowflex_1_1darts_1_1StructureConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::StructurePtr</name>
    <filename>classrobowflex_1_1darts_1_1StructurePtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::TextElement</name>
    <filename>classrobowflex_1_1darts_1_1TextElement.html</filename>
    <base>robowflex::darts::ImGuiElement</base>
    <member kind="function">
      <type></type>
      <name>TextElement</name>
      <anchorfile>classrobowflex_1_1darts_1_1TextElement.html</anchorfile>
      <anchor>a2113ab3034cc7ed0de0ae72108483a7d</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classrobowflex_1_1darts_1_1TextElement.html</anchorfile>
      <anchor>a331fef8512a8de8b7cfbc85bb938afc1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>text</name>
      <anchorfile>classrobowflex_1_1darts_1_1TextElement.html</anchorfile>
      <anchor>aa7a6b56568f7290d7b58fbdd58cbaf9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::TSR</name>
    <filename>classrobowflex_1_1darts_1_1TSR.html</filename>
    <class kind="class">robowflex::darts::TSR::Specification</class>
    <member kind="function">
      <type></type>
      <name>TSR</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a9c42a786fe4731ed8dac0bab80629f9a</anchor>
      <arglist>(const WorldPtr &amp;world, const Specification &amp;spec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TSR</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a923adb1fd44fcbb8d822742aa0f1a925</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>ab3a399e9eb2fa69bc6ee14246b516cdd</anchor>
      <arglist>(const WorldPtr &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a6294d8ff7b3ca22c60ae7b19b49e94eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a59cb584167b7a7778fa4b23def526633</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>ac6de2deda4c8aafa56f871ff2e1249fb</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a95b58e5b0c21d1b9c7c70ca7bd53af29</anchor>
      <arglist>(const std::vector&lt; std::size_t &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>robowflex::RobotPose</type>
      <name>getTransformToFrame</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a70027e5456b3aae29a782c9fb377b339</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useWorldIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a2b96c5d74963a22d9b7a6eb5e1fac856</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; std::size_t, std::size_t &gt;&gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorldIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a5efc5f820ba3af5fe5d714f3eb6b2655</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; std::size_t, std::size_t &gt;&gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; std::size_t, std::size_t &gt; &gt;</type>
      <name>computeWorldIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a43492eb4eb86924b63e15d0ed789179c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getSkeletonIndex</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>af7e1f47ad950871a836064f54a7242ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::size_t &gt; &amp;</type>
      <name>getIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>af8520eb8501f101565cb01ed41afb842</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; std::size_t, std::size_t &gt; &gt; &amp;</type>
      <name>getWorldIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a2ac69292c531ef2cc5f226206ab1babe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toBijection</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a537ecc5f9981505a6f3bd2442afd4f9f</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; world, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromBijection</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a2acf56933e8ebfda564badac6576426b</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; state, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;world) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDimension</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a8ecea5abd6df63864f8f14a3a4d6e9d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumDofs</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a05b101dad7ebed741b11c6e92d350085</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumWorldDofs</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>afe337a0344ceef8addb5a4d0902339ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Specification &amp;</type>
      <name>getSpecification</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a7d590745cd10c3bbf25d146144145729</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatePose</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a99895971b408a06327a3c3800e3a2512</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBounds</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a3248cac19779033db985a2d46068e232</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateSolver</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a46470cda2fa2c040c5670f3d988d2244</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getErrorWorldRaw</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a06cc12c848f194e4d3adcdef1907f146</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; error) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getErrorWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a545c078966548200059a3ec22d97cb38</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; error) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getErrorWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>ade6d189ae33030212ead5665f2ce6330</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;world, Eigen::Ref&lt; Eigen::VectorXd &gt; error) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getError</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a9edf7cab74ddcf56529e1337c5751bb7</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;state, Eigen::Ref&lt; Eigen::VectorXd &gt; error) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobianWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a815195654aa7515751b63008fa4b2898</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::MatrixXd &gt; jacobian) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobianWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a35695a486796bfcb5edd5be975f2d937</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;world, Eigen::Ref&lt; Eigen::MatrixXd &gt; jacobian) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobian</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a9c4cee75aafbde63ebff735952620199</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;state, Eigen::Ref&lt; Eigen::MatrixXd &gt; jacobian) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a5d16f60da9a911aa6c1740bd0ff78eda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a3864cbf55e9ffc664d760fc39c035aea</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;world) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a9ddbe07a60730ccdf8a1a0f20c6ff4a9</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>aba148d4c8cc3c5104d452a409582faa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a97727887650933d3a6494745a46c1281</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; world)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solve</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a8ba323526a0795dd4304a40ea7b78ed6</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveGradientWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a20ced4b4166b6539eb01f54bdac0421a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveGradientWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>abfbaab44773a3508a1cd5ab0f9d88f76</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; world)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveGradient</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>acfac27da4fe8e8379ea2d7739dde8f10</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPositionsWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>aa7e68154e558d312c49643c9de7485cb</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;world) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPositions</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a93e986f5bb5de2b827d9d98e6b5d3ee0</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPositionsWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a535212659cfe52fc391a9847b7646c1d</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; world) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPositions</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>aa841b2a933a6766a956feb4ba525b191</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; state) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeBijection</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a8d6cb38d4f62209f2f76d3448aaf2f52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldPtr</type>
      <name>world_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a2c59d3e807ec987e47ec09871ae4a56f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Specification</type>
      <name>spec_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>ac8a2678625225b9a69864420f72c6ba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>skel_index_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>aa539f426f692d0e885a405eaac9d2436</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>indices_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a06c176538c3300fd896dc9c500bbafda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::pair&lt; std::size_t, std::size_t &gt; &gt;</type>
      <name>world_indices_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a25d88984a62d423c648464229cd92737</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>bijection_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a2b3c17075d0d1ac3f02263866d1d7b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; dart::dynamics::SimpleFrame &gt;</type>
      <name>frame_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a3ea8c021b60c9e1df7587976cdde00d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::BodyNode *</type>
      <name>tnd_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a537499d29f65e8b006cba0fc13974c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; dart::dynamics::InverseKinematics &gt;</type>
      <name>ik_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a7104beafcf1a942826332e68ae5b9387</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::InverseKinematics::TaskSpaceRegion *</type>
      <name>tsr_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a0564d3067d8ef5620da9efc25eef23dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSR</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a9c42a786fe4731ed8dac0bab80629f9a</anchor>
      <arglist>(const WorldPtr &amp;world, const Specification &amp;spec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TSR</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a923adb1fd44fcbb8d822742aa0f1a925</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>ab3a399e9eb2fa69bc6ee14246b516cdd</anchor>
      <arglist>(const WorldPtr &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a6294d8ff7b3ca22c60ae7b19b49e94eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a59cb584167b7a7778fa4b23def526633</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>ac6de2deda4c8aafa56f871ff2e1249fb</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a95b58e5b0c21d1b9c7c70ca7bd53af29</anchor>
      <arglist>(const std::vector&lt; std::size_t &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>robowflex::RobotPose</type>
      <name>getTransformToFrame</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a70027e5456b3aae29a782c9fb377b339</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useWorldIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a2b96c5d74963a22d9b7a6eb5e1fac856</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; std::size_t, std::size_t &gt;&gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorldIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a5efc5f820ba3af5fe5d714f3eb6b2655</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; std::size_t, std::size_t &gt;&gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; std::size_t, std::size_t &gt; &gt;</type>
      <name>computeWorldIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a43492eb4eb86924b63e15d0ed789179c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getSkeletonIndex</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>af7e1f47ad950871a836064f54a7242ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::size_t &gt; &amp;</type>
      <name>getIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>af8520eb8501f101565cb01ed41afb842</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; std::size_t, std::size_t &gt; &gt; &amp;</type>
      <name>getWorldIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a2ac69292c531ef2cc5f226206ab1babe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toBijection</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a537ecc5f9981505a6f3bd2442afd4f9f</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; world, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromBijection</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a2acf56933e8ebfda564badac6576426b</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; state, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;world) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDimension</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a8ecea5abd6df63864f8f14a3a4d6e9d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumDofs</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a05b101dad7ebed741b11c6e92d350085</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumWorldDofs</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>afe337a0344ceef8addb5a4d0902339ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Specification &amp;</type>
      <name>getSpecification</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a7d590745cd10c3bbf25d146144145729</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatePose</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a99895971b408a06327a3c3800e3a2512</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBounds</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a3248cac19779033db985a2d46068e232</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateSolver</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a46470cda2fa2c040c5670f3d988d2244</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getErrorWorldRaw</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a06cc12c848f194e4d3adcdef1907f146</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; error) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getErrorWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a545c078966548200059a3ec22d97cb38</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; error) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getErrorWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>ade6d189ae33030212ead5665f2ce6330</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;world, Eigen::Ref&lt; Eigen::VectorXd &gt; error) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getError</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a9edf7cab74ddcf56529e1337c5751bb7</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;state, Eigen::Ref&lt; Eigen::VectorXd &gt; error) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobianWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a815195654aa7515751b63008fa4b2898</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::MatrixXd &gt; jacobian) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobianWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a35695a486796bfcb5edd5be975f2d937</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;world, Eigen::Ref&lt; Eigen::MatrixXd &gt; jacobian) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobian</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a9c4cee75aafbde63ebff735952620199</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;state, Eigen::Ref&lt; Eigen::MatrixXd &gt; jacobian) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a5d16f60da9a911aa6c1740bd0ff78eda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a3864cbf55e9ffc664d760fc39c035aea</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;world) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a9ddbe07a60730ccdf8a1a0f20c6ff4a9</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>aba148d4c8cc3c5104d452a409582faa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a97727887650933d3a6494745a46c1281</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; world)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solve</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a8ba323526a0795dd4304a40ea7b78ed6</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveGradientWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a20ced4b4166b6539eb01f54bdac0421a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveGradientWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>abfbaab44773a3508a1cd5ab0f9d88f76</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; world)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveGradient</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>acfac27da4fe8e8379ea2d7739dde8f10</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPositionsWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>aa7e68154e558d312c49643c9de7485cb</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;world) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPositions</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a93e986f5bb5de2b827d9d98e6b5d3ee0</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPositionsWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>a535212659cfe52fc391a9847b7646c1d</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; world) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPositions</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR.html</anchorfile>
      <anchor>aa841b2a933a6766a956feb4ba525b191</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; state) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::TSR::Specification</name>
    <filename>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</filename>
    <member kind="function">
      <type></type>
      <name>Specification</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>afbdcb9d43b527c6970c95a4bfb39acee</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Specification</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a9b291da4bbaf397eebafd3954503cb59</anchor>
      <arglist>(const std::string &amp;structure, const std::string &amp;target_frame, const Eigen::Ref&lt; const Eigen::Vector3d &gt; &amp;position, const Eigen::Quaterniond &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTarget</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a203e124baaa92ebc1b9e1419d84f38b1</anchor>
      <arglist>(const std::string &amp;structure, const std::string &amp;frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBase</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a23e7749d0024abefb8e159b857ce5c4a</anchor>
      <arglist>(const std::string &amp;structure, const std::string &amp;frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrame</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a373c6ebe783e4bea5614dcfe05767b56</anchor>
      <arglist>(const std::string &amp;structure, const std::string &amp;target, const std::string &amp;base=magic::ROOT_FRAME)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSuffix</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a238135c8a803fab532161809a1133f0e</anchor>
      <arglist>(const std::string &amp;suffix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ae11625ee74045a934cf4bc747cfd01e6</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::Vector3d &gt; &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ae80849b7e2a48406ee8b420ff1646ccd</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a2e1cee5bf259d0231e12b87bee016571</anchor>
      <arglist>(const Eigen::Quaterniond &amp;orientation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>aae34a4514a2b449126500f65e334e4ba</anchor>
      <arglist>(double w, double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ab8200292d54904b3a6fe85162211d664</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPose</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a2feb9cf65a52207a7b41836d8b945a23</anchor>
      <arglist>(const RobotPose &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPose</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a06d7907ed115b0966bca6a2d18a5a081</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::Vector3d &gt; &amp;position, const Eigen::Quaterniond &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPose</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a68e0a70d41b9fbb18e8cc028582c019f</anchor>
      <arglist>(double xp, double yp, double zp, double wr, double xr, double yr, double zr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoseFromWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ad1c552ce3f15b4848223f5479dde226a</anchor>
      <arglist>(const WorldPtr &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXPosTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ab5449e78c103c66ff30c67f551c8a5c7</anchor>
      <arglist>(double bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYPosTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a421d6b62f92289b25399a659764d4a71</anchor>
      <arglist>(double bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZPosTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>abdad16913c7c199e7ee82ec7e4610345</anchor>
      <arglist>(double bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXPosTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a71a786f483db70e7c24220e2fc045fb3</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYPosTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a7faed90efa3d212043b65ea35fb1b3cc</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZPosTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a0f52693498a4db28fab911ce0b393d6d</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoXPosTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a7ec1fb8ef7d572caa75bb4040c765ff2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoYPosTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a940be7e2d987df38f1599407375588eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoZPosTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a0efd666552a9cf209fcc1fbd9e4ae691</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoPosTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a702fa3cf9ea9f3b856ea7b555a4817a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXRotTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>acf7a42f64b77cb4c66f8e9b6084fb5db</anchor>
      <arglist>(double bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYRotTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a962ced0ed7b295813738ea0f90bca5b1</anchor>
      <arglist>(double bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZRotTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a2cc8633e0712c2f69ceb01753516469e</anchor>
      <arglist>(double bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXRotTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ae0a2f8271c00e4d46449c7b8762a14c8</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYRotTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ad8ca476666b5b3394408a5421b0802e2</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZRotTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>add661d5d906906fbb33d782f55cc5773</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoXRotTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a93b60b2ba96c5cd9f4596257356f9df1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoYRotTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ad1c99ad4a5aec3809524ee9647d8a2db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoZRotTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>aa38636f9d2a84aedfc32b22c9c665d1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoRotTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>aef90ebcf09c1f8b519d162056d3007dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>getPosition</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ae0e09dd697026638014045d5bdf70dee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Quaterniond</type>
      <name>getRotation</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a4f0cf2f60c652555ae923c9dfd741a4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>getEulerRotation</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a9b8f71f426ddc10b7504e41a0e43f885</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPositionConstrained</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>aa9e385c46b92e1122226acb3bb14b642</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRotationConstrained</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a7197da0964aa8b1139b7d320feb335d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRelative</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ae1fb0d27480b58416c296415801950c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a8f5cf839324b89f45f4202e01ada2d7a</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersect</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>aeac9942dc3a027cf18dad375ef722769</anchor>
      <arglist>(const Specification &amp;other)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>structure</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a1e76ab556c009d133b510fbbe8f5b599</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>frame</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a3d1b0e7f0257ce8d9245b8b4cac90646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ROBOWFLEX_EIGEN struct robowflex::darts::TSR::Specification::@3</type>
      <name>target</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ab84461814b588db279627d2c921c9c3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct robowflex::darts::TSR::Specification::@4</type>
      <name>base</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ae1406e3725da3ed469371339a7b56916</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RobotPose</type>
      <name>pose</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a849770890c3ff633f6f6d27a3ac4f0f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ROBOWFLEX_EIGEN Eigen::Vector3d</type>
      <name>upper</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ab4b78a0eab7ceaf5062309c762dd0fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>lower</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a15a35c810bdc6250c9a37bf88ee7d8bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct robowflex::darts::TSR::Specification::@5</type>
      <name>position</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>aa63d015a8a8aae78a1d3b1cf22865838</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct robowflex::darts::TSR::Specification::@6</type>
      <name>orientation</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>aaad901689b4b348e6404e6ba62fb6fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>dimension</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a8f8d9691ba8becaf33e291343a50de36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; bool &gt;</type>
      <name>indices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>af862531ec1b83d28001a8c4ed96c246f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>maxIter</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a715bf21f6d6f32ac0b119101a6799620</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>tolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>aa3df5a7ec61e618c5beee25da2e3d3a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>fixBounds</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>af372ea76f78ec26b581b470a9191cf31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::size_t</type>
      <name>getDimension</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a828da9dafabf7db51b719cbaa306f6e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>isPosConstrained</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a1cb0a0ccc9dc94d3e512cecdaadc30dd</anchor>
      <arglist>(double lower, double upper) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>isRotConstrained</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a200cd39663192ad6b8a9333de37db309</anchor>
      <arglist>(double lower, double upper) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Specification</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>afbdcb9d43b527c6970c95a4bfb39acee</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Specification</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a9b291da4bbaf397eebafd3954503cb59</anchor>
      <arglist>(const std::string &amp;structure, const std::string &amp;target_frame, const Eigen::Ref&lt; const Eigen::Vector3d &gt; &amp;position, const Eigen::Quaterniond &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTarget</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a203e124baaa92ebc1b9e1419d84f38b1</anchor>
      <arglist>(const std::string &amp;structure, const std::string &amp;frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBase</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a23e7749d0024abefb8e159b857ce5c4a</anchor>
      <arglist>(const std::string &amp;structure, const std::string &amp;frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrame</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a373c6ebe783e4bea5614dcfe05767b56</anchor>
      <arglist>(const std::string &amp;structure, const std::string &amp;target, const std::string &amp;base=magic::ROOT_FRAME)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSuffix</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a238135c8a803fab532161809a1133f0e</anchor>
      <arglist>(const std::string &amp;suffix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ae11625ee74045a934cf4bc747cfd01e6</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::Vector3d &gt; &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ae80849b7e2a48406ee8b420ff1646ccd</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a2e1cee5bf259d0231e12b87bee016571</anchor>
      <arglist>(const Eigen::Quaterniond &amp;orientation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>aae34a4514a2b449126500f65e334e4ba</anchor>
      <arglist>(double w, double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ab8200292d54904b3a6fe85162211d664</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPose</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a2feb9cf65a52207a7b41836d8b945a23</anchor>
      <arglist>(const RobotPose &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPose</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a06d7907ed115b0966bca6a2d18a5a081</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::Vector3d &gt; &amp;position, const Eigen::Quaterniond &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPose</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a68e0a70d41b9fbb18e8cc028582c019f</anchor>
      <arglist>(double xp, double yp, double zp, double wr, double xr, double yr, double zr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoseFromWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ad1c552ce3f15b4848223f5479dde226a</anchor>
      <arglist>(const WorldPtr &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXPosTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ab5449e78c103c66ff30c67f551c8a5c7</anchor>
      <arglist>(double bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYPosTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a421d6b62f92289b25399a659764d4a71</anchor>
      <arglist>(double bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZPosTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>abdad16913c7c199e7ee82ec7e4610345</anchor>
      <arglist>(double bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXPosTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a71a786f483db70e7c24220e2fc045fb3</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYPosTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a7faed90efa3d212043b65ea35fb1b3cc</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZPosTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a0f52693498a4db28fab911ce0b393d6d</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoXPosTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a7ec1fb8ef7d572caa75bb4040c765ff2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoYPosTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a940be7e2d987df38f1599407375588eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoZPosTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a0efd666552a9cf209fcc1fbd9e4ae691</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoPosTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a702fa3cf9ea9f3b856ea7b555a4817a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXRotTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>acf7a42f64b77cb4c66f8e9b6084fb5db</anchor>
      <arglist>(double bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYRotTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a962ced0ed7b295813738ea0f90bca5b1</anchor>
      <arglist>(double bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZRotTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a2cc8633e0712c2f69ceb01753516469e</anchor>
      <arglist>(double bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXRotTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ae0a2f8271c00e4d46449c7b8762a14c8</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYRotTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ad8ca476666b5b3394408a5421b0802e2</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZRotTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>add661d5d906906fbb33d782f55cc5773</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoXRotTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a93b60b2ba96c5cd9f4596257356f9df1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoYRotTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ad1c99ad4a5aec3809524ee9647d8a2db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoZRotTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>aa38636f9d2a84aedfc32b22c9c665d1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoRotTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>aef90ebcf09c1f8b519d162056d3007dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>getPosition</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ae0e09dd697026638014045d5bdf70dee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Quaterniond</type>
      <name>getRotation</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a4f0cf2f60c652555ae923c9dfd741a4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>getEulerRotation</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a9b8f71f426ddc10b7504e41a0e43f885</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPositionConstrained</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>aa9e385c46b92e1122226acb3bb14b642</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRotationConstrained</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a7197da0964aa8b1139b7d320feb335d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRelative</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>ae1fb0d27480b58416c296415801950c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>a8f5cf839324b89f45f4202e01ada2d7a</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersect</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSR_1_1Specification.html</anchorfile>
      <anchor>aeac9942dc3a027cf18dad375ef722769</anchor>
      <arglist>(const Specification &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::TSRConstPtr</name>
    <filename>classrobowflex_1_1darts_1_1TSRConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::TSRConstraint</name>
    <filename>classrobowflex_1_1darts_1_1TSRConstraint.html</filename>
    <member kind="function">
      <type></type>
      <name>TSRConstraint</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRConstraint.html</anchorfile>
      <anchor>a97ae6bc54965d5998e4ef601062d4cfa</anchor>
      <arglist>(const StateSpacePtr &amp;space, const TSRPtr &amp;tsr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSRConstraint</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRConstraint.html</anchorfile>
      <anchor>afb40adde202fcfe69d7ba9ee754f1bdf</anchor>
      <arglist>(const StateSpacePtr &amp;space, const std::vector&lt; TSRPtr &gt; &amp;tsrs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSRConstraint</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRConstraint.html</anchorfile>
      <anchor>a2fa5b914f4245fb60a3d9c36ce5ffcbd</anchor>
      <arglist>(const StateSpacePtr &amp;space, const TSRSetPtr &amp;tsr)</arglist>
    </member>
    <member kind="function">
      <type>TSRSetPtr</type>
      <name>getSet</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRConstraint.html</anchorfile>
      <anchor>a70126ac9b37aa7670100f74c2dfe74f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>function</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRConstraint.html</anchorfile>
      <anchor>abfe81665e57601cd12b8fc8eb87ee9d1</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;x, Eigen::Ref&lt; Eigen::VectorXd &gt; out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jacobian</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRConstraint.html</anchorfile>
      <anchor>a745728f8d2b453588b0cf02c62da4755</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;x, Eigen::Ref&lt; Eigen::MatrixXd &gt; out) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>project</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRConstraint.html</anchorfile>
      <anchor>a0a6d7ca4841639647b03462fd329fd61</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; x) const override</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_gradient</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRConstraint.html</anchorfile>
      <anchor>adecc5742d4f5ee1c4079feabcfbca12a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct robowflex::darts::TSRConstraint::@7</type>
      <name>options</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRConstraint.html</anchorfile>
      <anchor>a750d7b287a9929e019675a9bc00ff6f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSpacePtr</type>
      <name>space_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRConstraint.html</anchorfile>
      <anchor>a78be43c5ee7ec138da2f6ca22a489d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TSRSetPtr</type>
      <name>tsr_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRConstraint.html</anchorfile>
      <anchor>a30f47c279adb1cb97dbc62e595ad49ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::TSRConstraintConstPtr</name>
    <filename>classrobowflex_1_1darts_1_1TSRConstraintConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::TSRConstraintPtr</name>
    <filename>classrobowflex_1_1darts_1_1TSRConstraintPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::TSREditWidget</name>
    <filename>classrobowflex_1_1darts_1_1TSREditWidget.html</filename>
    <base>robowflex::darts::Widget</base>
    <member kind="function">
      <type></type>
      <name>TSREditWidget</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a1809c3f49edebb1d22e8ba476edfb364</anchor>
      <arglist>(const std::string &amp;name=&quot;TSR&quot;, const TSR::Specification &amp;spec={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a4bd5084d6315a0be664099eff681fd19</anchor>
      <arglist>(Window *window) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prerefresh</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a74daed25a86c1ab50a36e5c032f4fa24</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>aa41a9d8f9963a224b20f241006f78ff2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const TSR::Specification &amp;</type>
      <name>getSpecification</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a64d36e98fc3ac0fb24ba65fa3cad85ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TSRPtr &amp;</type>
      <name>getTSR</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>ac34503e690f66e9184775aeb006258e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>name_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>ac3a4a79096f9ef097a236093eccffe29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const TSR::Specification</type>
      <name>original_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a4420e01ea3c9878c4fcc43a2b8bd06ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TSR::Specification</type>
      <name>spec_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a530ad9b253aa25df2821634c8f95170d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TSR::Specification</type>
      <name>prev_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a4e3e50014dc5371ddb9a7f7a7a9e1485</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TSRPtr</type>
      <name>tsr_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a859fe26da7310bbdec529255ecad5387</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mutex_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>ae342416134a6f17231259d85599cc12f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>sync_bounds_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>abc5aa69b054d0328dd91ef90441b099d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>show_volume_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>ac5737fec1c2ad917c73f3874b3adaf09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>show_bounds_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a54959e7e02a0a78d94d9f5f8ca59a687</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const double</type>
      <name>volume_alpha_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a4ffb2fe4e227d27c5803e0bf47c84dcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const double</type>
      <name>rotation_alpha_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>aaec806ad41d29e09450a8c76fa56866d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const double</type>
      <name>rotation_width_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>af4a77f8e1875d9d2e41eccb58f4f5946</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const float</type>
      <name>max_position_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>ad6dc2eab9163bee323eb74f0d9c20c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const float</type>
      <name>drag_step_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a3747ce2ed984784817a348616709ef49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>position_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>aab5d0759e92a920965ead6a0abe23d4f</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>rotation_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>ab21e1db58af638711d30023b0f51f4bc</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>xp_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a76985608f4aa85f4cc326528b8394219</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>yp_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a3973e096b64ac357e933d20e491beec3</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>zp_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a69c70e0d6295c83e68eeadff4cf7a4ec</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>xr_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a123ce6dc290831e718959b67821304f8</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>yr_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a356ba01bca4f3cb063305fc4bf614230</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>zr_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a478f13d9b1b7fe6338299d8b4cc14ce2</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>inner_radius</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a690b7b10814266852c10745bb3cf4457</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>gui_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a60b6d0a894239bd32e58d75683c5fb44</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateFrameCB</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a8ae15270eae277d0f331899ca163b481</anchor>
      <arglist>(const dart::gui::osg::InteractiveFrame *frame)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateLLCB</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>abfdbb561b6c591506f12297c7dd22813</anchor>
      <arglist>(const dart::gui::osg::InteractiveFrame *frame)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateUUCB</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a60815221150e07eaee503eb5f990e7c8</anchor>
      <arglist>(const dart::gui::osg::InteractiveFrame *frame)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateMirror</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a44959a238029b1f1eab00fc5ca69d384</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>syncTSR</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a1baa6e6cadab8038c7f1175a43163bef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>syncSpec</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a219d44827b709dc0077e42dbe2dfe573</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>syncGUI</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a21af66efb89f1e5572fa4c37ed8b35af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>syncFrame</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a19602b6d4dc927cb97ce2e7b3776eb68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::SimpleFramePtr</type>
      <name>offset_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>ad72c805835910e2c7ebf444b3dd36481</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::SimpleFramePtr</type>
      <name>shape_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a934f71ee99bd636b52f8f6bda397e012</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::SimpleFramePtr</type>
      <name>rbounds_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a3eeb5927f56f475afd6cfe00b6c13311</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Window::InteractiveReturn</type>
      <name>frame_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a827bc7c5ff25c5d41de086a5ead0234d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Window::InteractiveReturn</type>
      <name>ll_frame_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a7409a82e7e648f813e621efd813ff426</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Window::InteractiveReturn</type>
      <name>uu_frame_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>af6914ec6a51d50fe517c2bb498ab86c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Eigen::Vector3d</type>
      <name>getVolume</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a3cece64fa6e0b2f1fae6ba4bf31ba0fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateShape</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>abb557421b2df817bb8bc1a2d9739aa37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>name_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>ac3a4a79096f9ef097a236093eccffe29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const TSR::Specification</type>
      <name>original_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a4420e01ea3c9878c4fcc43a2b8bd06ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TSR::Specification</type>
      <name>spec_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a530ad9b253aa25df2821634c8f95170d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TSR::Specification</type>
      <name>prev_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a4e3e50014dc5371ddb9a7f7a7a9e1485</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TSRPtr</type>
      <name>tsr_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a859fe26da7310bbdec529255ecad5387</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mutex_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>ae342416134a6f17231259d85599cc12f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>sync_bounds_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>abc5aa69b054d0328dd91ef90441b099d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>show_volume_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>ac5737fec1c2ad917c73f3874b3adaf09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>show_bounds_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a54959e7e02a0a78d94d9f5f8ca59a687</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const double</type>
      <name>volume_alpha_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a4ffb2fe4e227d27c5803e0bf47c84dcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const double</type>
      <name>rotation_alpha_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>aaec806ad41d29e09450a8c76fa56866d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const double</type>
      <name>rotation_width_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>af4a77f8e1875d9d2e41eccb58f4f5946</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const float</type>
      <name>max_position_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>ad6dc2eab9163bee323eb74f0d9c20c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const float</type>
      <name>drag_step_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a3747ce2ed984784817a348616709ef49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>position_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>aab5d0759e92a920965ead6a0abe23d4f</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>rotation_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>ab21e1db58af638711d30023b0f51f4bc</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>xp_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a76985608f4aa85f4cc326528b8394219</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>yp_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a3973e096b64ac357e933d20e491beec3</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>zp_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a69c70e0d6295c83e68eeadff4cf7a4ec</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>xr_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a123ce6dc290831e718959b67821304f8</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>yr_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a356ba01bca4f3cb063305fc4bf614230</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>zr_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a478f13d9b1b7fe6338299d8b4cc14ce2</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>inner_radius</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSREditWidget.html</anchorfile>
      <anchor>a690b7b10814266852c10745bb3cf4457</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::TSRGoal</name>
    <filename>classrobowflex_1_1darts_1_1TSRGoal.html</filename>
    <base>robowflex::darts::ConstraintExtractor</base>
    <member kind="function">
      <type>bool</type>
      <name>sample</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRGoal.html</anchorfile>
      <anchor>ad50a352135c6aa593bb81d55facfa53b</anchor>
      <arglist>(const ompl::base::GoalLazySamples *gls, ompl::base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceGoal</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRGoal.html</anchorfile>
      <anchor>a7f002dadfb0ec622f61ee7259a151837</anchor>
      <arglist>(const ompl::base::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>TSRSetPtr</type>
      <name>getTSRSet</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRGoal.html</anchorfile>
      <anchor>ad2994602fa886f90955cd64ec7cfaf52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSRGoal</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRGoal.html</anchorfile>
      <anchor>ae4458a9b2dd8427c41a04e2b36b823e7</anchor>
      <arglist>(const ompl::base::SpaceInformationPtr &amp;si, const WorldPtr &amp;world, const std::vector&lt; TSRPtr &gt; &amp;tsrs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSRGoal</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRGoal.html</anchorfile>
      <anchor>aa3c67a30469bd2e5ea22db52ef8cafac</anchor>
      <arglist>(const ompl::base::SpaceInformationPtr &amp;si, const WorldPtr &amp;world, const TSRPtr tsr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSRGoal</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRGoal.html</anchorfile>
      <anchor>af23bdc650f647d5925b5af56e9333a54</anchor>
      <arglist>(const PlanBuilder &amp;builder, TSRPtr tsr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSRGoal</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRGoal.html</anchorfile>
      <anchor>a1a928df941db4bc6ac4905fd22202864</anchor>
      <arglist>(const PlanBuilder &amp;builder, const std::vector&lt; TSRPtr &gt; &amp;tsrs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TSRGoal</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRGoal.html</anchorfile>
      <anchor>ac2fd8f7bf300a8eb30ffd9aec7c5e7ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_gradient</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRGoal.html</anchorfile>
      <anchor>a5e3a85dc8ac5c8a247479fc394bedc2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>max_samples</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRGoal.html</anchorfile>
      <anchor>a4444347fe484946594d6d31015a50630</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct robowflex::darts::TSRGoal::@0</type>
      <name>options</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRGoal.html</anchorfile>
      <anchor>a6a3da0a6d0c44f9b077d3ed7f1afc8ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldPtr</type>
      <name>world_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRGoal.html</anchorfile>
      <anchor>af39c53a312290eb532dbb0a878666623</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TSRSetPtr</type>
      <name>tsr_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRGoal.html</anchorfile>
      <anchor>af5a97482a8bf6ff20216bf5d794248c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ompl::base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRGoal.html</anchorfile>
      <anchor>a72db6af97da068cb030cb973456f6cd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSRGoal</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRGoal.html</anchorfile>
      <anchor>ae4458a9b2dd8427c41a04e2b36b823e7</anchor>
      <arglist>(const ompl::base::SpaceInformationPtr &amp;si, const WorldPtr &amp;world, const std::vector&lt; TSRPtr &gt; &amp;tsrs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSRGoal</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRGoal.html</anchorfile>
      <anchor>aa3c67a30469bd2e5ea22db52ef8cafac</anchor>
      <arglist>(const ompl::base::SpaceInformationPtr &amp;si, const WorldPtr &amp;world, const TSRPtr tsr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSRGoal</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRGoal.html</anchorfile>
      <anchor>af23bdc650f647d5925b5af56e9333a54</anchor>
      <arglist>(const PlanBuilder &amp;builder, TSRPtr tsr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSRGoal</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRGoal.html</anchorfile>
      <anchor>a1a928df941db4bc6ac4905fd22202864</anchor>
      <arglist>(const PlanBuilder &amp;builder, const std::vector&lt; TSRPtr &gt; &amp;tsrs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TSRGoal</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRGoal.html</anchorfile>
      <anchor>ac2fd8f7bf300a8eb30ffd9aec7c5e7ca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::TSRGoalConstPtr</name>
    <filename>classrobowflex_1_1darts_1_1TSRGoalConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::TSRGoalPtr</name>
    <filename>classrobowflex_1_1darts_1_1TSRGoalPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::TSRPtr</name>
    <filename>classrobowflex_1_1darts_1_1TSRPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::TSRSet</name>
    <filename>classrobowflex_1_1darts_1_1TSRSet.html</filename>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a7378ba97cbac3f5fc2371f185a10b6cb</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSRSet</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>ab21ae359339d6c901cb7fc67623357e0</anchor>
      <arglist>(const WorldPtr &amp;world, const TSRPtr &amp;tsr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSRSet</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>abca26c08b76cbde8b3b9e3486543287a</anchor>
      <arglist>(const WorldPtr &amp;world, const std::vector&lt; TSRPtr &gt; &amp;tsrs, bool intersect=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a533564d3e809d3027ab1bbe57129c42d</anchor>
      <arglist>(const WorldPtr &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTSR</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a59f682ce0c019fa8be9209f3e613bd66</anchor>
      <arglist>(const TSRPtr &amp;tsr, bool intersect=true, double weight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a6ea60d37bf5376ab7aa2c0b22ad93695</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateSolver</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>afb6c32cc4c23a3935f21b60a07fb4d3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>ad80930c9fa1a617cd64b28f73a61347d</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a2ed4aaaa5ec72e13bb5688214c593efd</anchor>
      <arglist>(const std::vector&lt; std::size_t &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useWorldIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a192af8dfb41d39c7e68c48b2b0c5d630</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; std::size_t, std::size_t &gt;&gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorldIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>afeb7fe8e72c7546b1d068fe685e8b52f</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; std::size_t, std::size_t &gt;&gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; std::size_t, std::size_t &gt; &gt; &amp;</type>
      <name>getWorldIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>acf997d5dd6dd1a1181ba6d54d7ff02c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorldUpperLimits</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a53c45e25b5b24356a5904b83f807916d</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorldLowerLimits</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a2b90ae50f289c04128a968a4fee24627</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;lower)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLimits</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>ae1de3a6c9d65c9ceb2bb824a11a2c133</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPositionsWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a72cc8e6d663da7a0f235dfb36e2344b6</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; world) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDimension</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a023b06921778ad90e20b6845b5462a3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numTSRs</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a8e4aa468b105f99112a40fb3da3d3987</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; TSRPtr &gt; &amp;</type>
      <name>getTSRs</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>ab76cd4e5997a016af1e9da0eb68c59b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>aa7e2265757224af8038c919e2ca1c95b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a93f032cfeddd1c3afa7a2a1806d1708e</anchor>
      <arglist>(double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getMaxIterations</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a117dda599935cff354f7f989d8dd27ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxIterations</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>afad162682c1e2dc92c558f1d7710a452</anchor>
      <arglist>(std::size_t iterations)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSuffix</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a2cc2416cf3d329d6ce780990f9ddbcb1</anchor>
      <arglist>(const std::string &amp;suffix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStep</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a06b41010a33774d53c5670323338ae88</anchor>
      <arglist>(double step)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStep</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>af3fe93d2e7b730ce8d48cc4f9dd05522</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLimit</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>add1f9484a66669f2215a058cf09620f6</anchor>
      <arglist>(double limit)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLimit</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a482f7b7714afef3c0413def5bcf7eb21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDamping</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>addad5b2fc1bc6341d41add24836afe0b</anchor>
      <arglist>(double damping)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDamping</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a93d5b1020053137d89665eeadc941e36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useDamping</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a3e0b5e4ee777943f5e2b9a5bfd6ec249</anchor>
      <arglist>(bool damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useSVD</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>ad0921f8b40a0834fe6094d7d103b79c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useQR</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a5c8f62b95f0f8790dc5f511fc1c89fa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getErrorWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a44101a1c8e4365caf66391f2bc399b08</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; error) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getErrorWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>af7214861e7cc2c9e3644874719f139cb</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;world, Eigen::Ref&lt; Eigen::VectorXd &gt; error) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobianWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a12bbcb512193d6f2efaadb61cac183d9</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;world, Eigen::Ref&lt; Eigen::MatrixXd &gt; jacobian) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>aa7c8dc8efc3078dc10aa57f66589cfbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a33555fe9cde48c55156826a9703c1ff7</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;world) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>ad2acbb821dee49cc95711217444bcdb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a70380fb61b878e65dba889adbc192d8a</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; world)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveGradientWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>ac2a7f6ccc8c21124c1f37be50bf1504d</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; world)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>enforceBoundsWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a431892596378645ae54cc3f66324b9cc</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; world) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldPtr</type>
      <name>world_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a470c437966d580119bed67d14dd1c23e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::set&lt; std::size_t &gt;</type>
      <name>skel_indices_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a7a3f2d1354e69ce7043342e5bffc624a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>qr_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>ab0197da3f130427baae3cbad26b9d4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>damped_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a3cdabb47758fb0100343996b627aca18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>step_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>ab421b070f32fdb06ed374b927f681706</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>limit_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a77a9c8748516ee0700c7a92a971d40c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>damping_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>af848bc4b956d544d6e84d9445b818e0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>tolerance_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a0dbb5243d6db69ec862876bd4278a950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>maxIter_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a47b285d9220ffc2b15e0552d1481bfb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; TSRPtr &gt;</type>
      <name>tsrs_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a7de4bc29edd8cf4b9bbd32a582b125b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>weights_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a5744abe0964f431d7277428d8e0b50d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>dimension_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a6220a19498062b606639dcf0f88fbce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::VectorXd</type>
      <name>upper_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a2cf02cf20c37bf057657f8c9e8a71ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::VectorXd</type>
      <name>lower_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a3620940c35bef75c105cd086591bc03e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSRSet</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>ab21ae359339d6c901cb7fc67623357e0</anchor>
      <arglist>(const WorldPtr &amp;world, const TSRPtr &amp;tsr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSRSet</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>abca26c08b76cbde8b3b9e3486543287a</anchor>
      <arglist>(const WorldPtr &amp;world, const std::vector&lt; TSRPtr &gt; &amp;tsrs, bool intersect=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a533564d3e809d3027ab1bbe57129c42d</anchor>
      <arglist>(const WorldPtr &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTSR</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a59f682ce0c019fa8be9209f3e613bd66</anchor>
      <arglist>(const TSRPtr &amp;tsr, bool intersect=true, double weight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a6ea60d37bf5376ab7aa2c0b22ad93695</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateSolver</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>afb6c32cc4c23a3935f21b60a07fb4d3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>ad80930c9fa1a617cd64b28f73a61347d</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a2ed4aaaa5ec72e13bb5688214c593efd</anchor>
      <arglist>(const std::vector&lt; std::size_t &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useWorldIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a192af8dfb41d39c7e68c48b2b0c5d630</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; std::size_t, std::size_t &gt;&gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorldIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>afeb7fe8e72c7546b1d068fe685e8b52f</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; std::size_t, std::size_t &gt;&gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; std::size_t, std::size_t &gt; &gt; &amp;</type>
      <name>getWorldIndices</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>acf997d5dd6dd1a1181ba6d54d7ff02c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorldUpperLimits</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a53c45e25b5b24356a5904b83f807916d</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorldLowerLimits</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a2b90ae50f289c04128a968a4fee24627</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;lower)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLimits</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>ae1de3a6c9d65c9ceb2bb824a11a2c133</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPositionsWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a72cc8e6d663da7a0f235dfb36e2344b6</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; world) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDimension</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a023b06921778ad90e20b6845b5462a3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numTSRs</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a8e4aa468b105f99112a40fb3da3d3987</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; TSRPtr &gt; &amp;</type>
      <name>getTSRs</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>ab76cd4e5997a016af1e9da0eb68c59b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>aa7e2265757224af8038c919e2ca1c95b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTolerance</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a93f032cfeddd1c3afa7a2a1806d1708e</anchor>
      <arglist>(double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getMaxIterations</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a117dda599935cff354f7f989d8dd27ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxIterations</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>afad162682c1e2dc92c558f1d7710a452</anchor>
      <arglist>(std::size_t iterations)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSuffix</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a2cc2416cf3d329d6ce780990f9ddbcb1</anchor>
      <arglist>(const std::string &amp;suffix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStep</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a06b41010a33774d53c5670323338ae88</anchor>
      <arglist>(double step)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStep</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>af3fe93d2e7b730ce8d48cc4f9dd05522</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLimit</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>add1f9484a66669f2215a058cf09620f6</anchor>
      <arglist>(double limit)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLimit</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a482f7b7714afef3c0413def5bcf7eb21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDamping</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>addad5b2fc1bc6341d41add24836afe0b</anchor>
      <arglist>(double damping)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDamping</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a93d5b1020053137d89665eeadc941e36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useDamping</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a3e0b5e4ee777943f5e2b9a5bfd6ec249</anchor>
      <arglist>(bool damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useSVD</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>ad0921f8b40a0834fe6094d7d103b79c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useQR</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a5c8f62b95f0f8790dc5f511fc1c89fa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getErrorWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a44101a1c8e4365caf66391f2bc399b08</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; error) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getErrorWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>af7214861e7cc2c9e3644874719f139cb</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;world, Eigen::Ref&lt; Eigen::VectorXd &gt; error) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobianWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a12bbcb512193d6f2efaadb61cac183d9</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;world, Eigen::Ref&lt; Eigen::MatrixXd &gt; jacobian) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>aa7c8dc8efc3078dc10aa57f66589cfbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a33555fe9cde48c55156826a9703c1ff7</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;world) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>ad2acbb821dee49cc95711217444bcdb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>a70380fb61b878e65dba889adbc192d8a</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; world)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveGradientWorldState</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSet.html</anchorfile>
      <anchor>ac2a7f6ccc8c21124c1f37be50bf1504d</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; world)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::TSRSetConstPtr</name>
    <filename>classrobowflex_1_1darts_1_1TSRSetConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::TSRSetPtr</name>
    <filename>classrobowflex_1_1darts_1_1TSRSetPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::TSRSolveWidget</name>
    <filename>classrobowflex_1_1darts_1_1TSRSolveWidget.html</filename>
    <base>robowflex::darts::Widget</base>
    <class kind="struct">robowflex::darts::TSRSolveWidget::ErrorLines</class>
    <member kind="function">
      <type></type>
      <name>TSRSolveWidget</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>ad1ace2ce9f45d65b85cc0cd98002163d</anchor>
      <arglist>(const WorldPtr &amp;world, const std::vector&lt; TSRPtr &gt; &amp;tsrs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSRSolveWidget</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>a7cbec6f4a779477c777ed2179b24c171</anchor>
      <arglist>(const TSRSetPtr &amp;tsrs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>a9fa57250d3e504fb2e2f98440315e8d7</anchor>
      <arglist>(Window *window) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prerefresh</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>a9317f14ae9bc6797e9680e2008fbc7e2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>af779693ca25a8391fcf0824172f9dbe5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>a19480aaeb7254ba82a12354e30e9618d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TSRSetPtr</type>
      <name>tsrs_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>a23f5dd06871af9dfec1601e4f271af97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const float</type>
      <name>max_tolerance_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>a53e0daf18a4edaae6685eca8e4c52e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int</type>
      <name>max_iteration_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>accd6030d8c1df0aca6f8ce2789f301b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const float</type>
      <name>drag_tolerance_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>adb17c8ac16dc5f29084f62aa5a6df4b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>track_tsr_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>a33677a1509f6508ab69cd3a1fcbf43dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>use_gradient_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>a35fa328543f4506071d12a7d35a9df96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>need_solve_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>a0417ee58ed2ccc6f5c4c5bb5f52633a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>step_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>a631617315c1773664e39a84333c4c31e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>limit_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>ab50496d6427a94217512ac9013048a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>damping_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>a8c627d886db7eeec500153c744730628</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>tolerance_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>ab8be6ee2ada44cb6d4af50c535bb196d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxIter_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>aada597830cfa3756e8cc97ba94203312</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>item_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>aa4d90ccdd1789040fe98bfb65028f3c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>last_solve_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>ad74c9785f5e565ea79b9fde53f30e921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LinePlotElement</type>
      <name>solve_time_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>aa59852cd5b7dc2ace4910ff7c1559c61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ErrorLines &gt;</type>
      <name>errors_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>ab65da4bc3a973bcb150dc86e2be77ab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const float</type>
      <name>max_tolerance_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>a53e0daf18a4edaae6685eca8e4c52e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int</type>
      <name>max_iteration_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>accd6030d8c1df0aca6f8ce2789f301b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const float</type>
      <name>drag_tolerance_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>adb17c8ac16dc5f29084f62aa5a6df4b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>track_tsr_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>a33677a1509f6508ab69cd3a1fcbf43dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>use_gradient_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>a35fa328543f4506071d12a7d35a9df96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>need_solve_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>a0417ee58ed2ccc6f5c4c5bb5f52633a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>step_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>a631617315c1773664e39a84333c4c31e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>limit_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>ab50496d6427a94217512ac9013048a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>damping_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>a8c627d886db7eeec500153c744730628</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>tolerance_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>ab8be6ee2ada44cb6d4af50c535bb196d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxIter_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>aada597830cfa3756e8cc97ba94203312</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>item_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>aa4d90ccdd1789040fe98bfb65028f3c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>last_solve_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>ad74c9785f5e565ea79b9fde53f30e921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LinePlotElement</type>
      <name>solve_time_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>aa59852cd5b7dc2ace4910ff7c1559c61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ErrorLines &gt;</type>
      <name>errors_</name>
      <anchorfile>classrobowflex_1_1darts_1_1TSRSolveWidget.html</anchorfile>
      <anchor>ab65da4bc3a973bcb150dc86e2be77ab8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>robowflex::darts::TSRSolveWidget::ErrorLines</name>
    <filename>structrobowflex_1_1darts_1_1TSRSolveWidget_1_1ErrorLines.html</filename>
    <member kind="variable">
      <type>LinePlotElement</type>
      <name>xpd</name>
      <anchorfile>structrobowflex_1_1darts_1_1TSRSolveWidget_1_1ErrorLines.html</anchorfile>
      <anchor>a0edf332edc7f439b545db89153abddd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinePlotElement</type>
      <name>ypd</name>
      <anchorfile>structrobowflex_1_1darts_1_1TSRSolveWidget_1_1ErrorLines.html</anchorfile>
      <anchor>aef1823ca3ae60008a11649e5f33fba55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinePlotElement</type>
      <name>zpd</name>
      <anchorfile>structrobowflex_1_1darts_1_1TSRSolveWidget_1_1ErrorLines.html</anchorfile>
      <anchor>a2bef7f496ad0de1262513d79b6444d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinePlotElement</type>
      <name>xrd</name>
      <anchorfile>structrobowflex_1_1darts_1_1TSRSolveWidget_1_1ErrorLines.html</anchorfile>
      <anchor>ab453d740046a529fa93ef1b8d0096c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinePlotElement</type>
      <name>yrd</name>
      <anchorfile>structrobowflex_1_1darts_1_1TSRSolveWidget_1_1ErrorLines.html</anchorfile>
      <anchor>a447df1add15256a4dd86f03a165c547d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinePlotElement</type>
      <name>zrd</name>
      <anchorfile>structrobowflex_1_1darts_1_1TSRSolveWidget_1_1ErrorLines.html</anchorfile>
      <anchor>a7ca25ab49bf67882c59aec71c599ce83</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::Viewer</name>
    <filename>classrobowflex_1_1darts_1_1Viewer.html</filename>
    <member kind="function">
      <type></type>
      <name>Viewer</name>
      <anchorfile>classrobowflex_1_1darts_1_1Viewer.html</anchorfile>
      <anchor>a106fffd20c207f399ef23f33c463d9b7</anchor>
      <arglist>(const WorldPtr &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTraversal</name>
      <anchorfile>classrobowflex_1_1darts_1_1Viewer.html</anchorfile>
      <anchor>a589bcb6e38c33a83aaff33903490bafc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldPtr</type>
      <name>world_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Viewer.html</anchorfile>
      <anchor>afa5f47c9fb1514037027d40b0394fa02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::Widget</name>
    <filename>classrobowflex_1_1darts_1_1Widget.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1darts_1_1Widget.html</anchorfile>
      <anchor>a0db2bcc0f55ff187f52220c45a303810</anchor>
      <arglist>(Window *window)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>prerefresh</name>
      <anchorfile>classrobowflex_1_1darts_1_1Widget.html</anchorfile>
      <anchor>a39419d3afa2c15a620b3346f4bbc6c37</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::Window</name>
    <filename>classrobowflex_1_1darts_1_1Window.html</filename>
    <class kind="struct">robowflex::darts::Window::DnDReturn</class>
    <class kind="struct">robowflex::darts::Window::InteractiveOptions</class>
    <class kind="struct">robowflex::darts::Window::InteractiveReturn</class>
    <member kind="function">
      <type></type>
      <name>Window</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>a34f3a134ad7bdacefa9fb072c47af2d6</anchor>
      <arglist>(const WorldPtr &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>customPreRefresh</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>ae20cd68622b852405581a4616d10f3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>customPostRefresh</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>aec7e48f6fc6821a210df260d831f8a7f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>a4099fce125fbcda0d652b06b28223931</anchor>
      <arglist>(std::function&lt; void()&gt; thread={})</arglist>
    </member>
    <member kind="function">
      <type>WindowWidgetPtr</type>
      <name>getWidget</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>a28762fccd986ee8fe1b7e3fde4dfa461</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addWidget</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>aaa0deb470715da89e2ee91aab7d763f3</anchor>
      <arglist>(const WidgetPtr &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>WorldPtr</type>
      <name>getWorld</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>a153ca8f7903ca265e9bcfa6ff75fdd51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldPtr &amp;</type>
      <name>getWorldConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>ae5d55ae3089ef683b87d28bdb5257a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>animatePath</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>a44606ed1b40116945a5a0876c351b318</anchor>
      <arglist>(const StateSpacePtr &amp;space, const ompl::geometric::PathGeometric &amp;path, std::size_t times=1, double fps=60, bool block=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>animatePath</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>a216313e52958256f2e7da41b6a878009</anchor>
      <arglist>(const PlanBuilder &amp;builder, const ompl::geometric::PathGeometric &amp;path, std::size_t times=1, double fps=60, bool block=true)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>friend</type>
      <name>TSREditWidget</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>a9d680b9fb766147b85a3f0bddd9a362e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldPtr</type>
      <name>world_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>abf5bc5d4f9a6d004d080bf4121831c10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WindowWidgetPtr</type>
      <name>widget_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>a10ff5e1fff7914da6f30138a64829eae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; WidgetPtr &gt;</type>
      <name>widgets_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>a9475a3b40ade2f9bdef6d222d3d1e876</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; std::thread &gt;</type>
      <name>animation_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>a9097887435559b3031603b4a067e2edc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::osg::ref_ptr&lt; Window &gt;</type>
      <name>node_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>a95da5953c548253a25ee5ab77fc2df69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Viewer</type>
      <name>viewer_</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>a04c70efaf375d12379341c5db15aa860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const dart::gui::osg::InteractiveFrame *)&gt;</type>
      <name>InteractiveCallback</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>a7d54c55814204ce47da7c44180e2f093</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const dart::dynamics::BodyNode *)&gt;</type>
      <name>DnDCallback</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>a457477b9e1b87fa6f7971efd3d4510a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>InteractiveReturn</type>
      <name>createInteractiveMarker</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>acfbf65d4c068e36141e13193da5c44ef</anchor>
      <arglist>(const InteractiveOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>DnDReturn</type>
      <name>enableNodeDragNDrop</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>af0652799de01b6c89d85fb27fcd3da5a</anchor>
      <arglist>(dart::dynamics::BodyNode *node, const DnDCallback &amp;callback={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>animatePath</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>a44606ed1b40116945a5a0876c351b318</anchor>
      <arglist>(const StateSpacePtr &amp;space, const ompl::geometric::PathGeometric &amp;path, std::size_t times=1, double fps=60, bool block=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>animatePath</name>
      <anchorfile>classrobowflex_1_1darts_1_1Window.html</anchorfile>
      <anchor>a216313e52958256f2e7da41b6a878009</anchor>
      <arglist>(const PlanBuilder &amp;builder, const ompl::geometric::PathGeometric &amp;path, std::size_t times=1, double fps=60, bool block=true)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>robowflex::darts::Window::DnDReturn</name>
    <filename>structrobowflex_1_1darts_1_1Window_1_1DnDReturn.html</filename>
    <member kind="variable">
      <type>dart::gui::osg::BodyNodeDnD *</type>
      <name>dnd</name>
      <anchorfile>structrobowflex_1_1darts_1_1Window_1_1DnDReturn.html</anchorfile>
      <anchor>a02a324a9f3acfb471f302661c70b93aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dart::common::Connection</type>
      <name>signal</name>
      <anchorfile>structrobowflex_1_1darts_1_1Window_1_1DnDReturn.html</anchorfile>
      <anchor>a27f94481acd86fcdc3bc1d540cde41b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>robowflex::darts::Window::InteractiveOptions</name>
    <filename>structrobowflex_1_1darts_1_1Window_1_1InteractiveOptions.html</filename>
    <member kind="function">
      <type>void</type>
      <name>disableLinearControls</name>
      <anchorfile>structrobowflex_1_1darts_1_1Window_1_1InteractiveOptions.html</anchorfile>
      <anchor>a9871b88e9b3c39768d0b5cb6c005a253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableRotationControls</name>
      <anchorfile>structrobowflex_1_1darts_1_1Window_1_1InteractiveOptions.html</anchorfile>
      <anchor>a5d839cde1531cd100fa3652e2bdc9cc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disablePlanarControls</name>
      <anchorfile>structrobowflex_1_1darts_1_1Window_1_1InteractiveOptions.html</anchorfile>
      <anchor>aeae984e9fc7e4f74b8e15e38d68091ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableControls</name>
      <anchorfile>structrobowflex_1_1darts_1_1Window_1_1InteractiveOptions.html</anchorfile>
      <anchor>a38e682fd7696dcd016eff2fff5e25063</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structrobowflex_1_1darts_1_1Window_1_1InteractiveOptions.html</anchorfile>
      <anchor>a490967d3ada2b279e89142279f3ca5fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Isometry3d</type>
      <name>pose</name>
      <anchorfile>structrobowflex_1_1darts_1_1Window_1_1InteractiveOptions.html</anchorfile>
      <anchor>a9d9851292d7e3d452d221980c4ab116b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InteractiveCallback</type>
      <name>callback</name>
      <anchorfile>structrobowflex_1_1darts_1_1Window_1_1InteractiveOptions.html</anchorfile>
      <anchor>ab5b40d2add6fa8cebf82813877dfb1fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dart::dynamics::Frame *</type>
      <name>parent</name>
      <anchorfile>structrobowflex_1_1darts_1_1Window_1_1InteractiveOptions.html</anchorfile>
      <anchor>aec0352c060dcb5547f6f15cd36d76c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>size</name>
      <anchorfile>structrobowflex_1_1darts_1_1Window_1_1InteractiveOptions.html</anchorfile>
      <anchor>abe0e689bd46dcaceedf49e5c6992cd1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>thickness</name>
      <anchorfile>structrobowflex_1_1darts_1_1Window_1_1InteractiveOptions.html</anchorfile>
      <anchor>ac1e5cce1cdd7b1c8c7bf7e99b4899733</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>obstructable</name>
      <anchorfile>structrobowflex_1_1darts_1_1Window_1_1InteractiveOptions.html</anchorfile>
      <anchor>a877df9a563d33a6841672a1ce49dbffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>linear</name>
      <anchorfile>structrobowflex_1_1darts_1_1Window_1_1InteractiveOptions.html</anchorfile>
      <anchor>ad74d5763840a5fc9f77c7e2a7b447244</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>rotation</name>
      <anchorfile>structrobowflex_1_1darts_1_1Window_1_1InteractiveOptions.html</anchorfile>
      <anchor>a4c0d983a6efcc2760cdd35cd68e1aaa5</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>planar</name>
      <anchorfile>structrobowflex_1_1darts_1_1Window_1_1InteractiveOptions.html</anchorfile>
      <anchor>add10f8fe0f96f62f66f752f76f628ef6</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>robowflex::darts::Window::InteractiveReturn</name>
    <filename>structrobowflex_1_1darts_1_1Window_1_1InteractiveReturn.html</filename>
    <member kind="variable">
      <type>dart::gui::osg::InteractiveFramePtr</type>
      <name>target</name>
      <anchorfile>structrobowflex_1_1darts_1_1Window_1_1InteractiveReturn.html</anchorfile>
      <anchor>ab40e23f793929d799d862d269c3a4d1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dart::gui::osg::InteractiveFrameDnD *</type>
      <name>dnd</name>
      <anchorfile>structrobowflex_1_1darts_1_1Window_1_1InteractiveReturn.html</anchorfile>
      <anchor>a4bcd3283a55de5e95f27c308e4ca1f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dart::common::Connection</type>
      <name>signal</name>
      <anchorfile>structrobowflex_1_1darts_1_1Window_1_1InteractiveReturn.html</anchorfile>
      <anchor>aa466ff8a2ab6b728e5a7d9aa430ce7df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::WindowConstPtr</name>
    <filename>classrobowflex_1_1darts_1_1WindowConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::WindowPtr</name>
    <filename>classrobowflex_1_1darts_1_1WindowPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::WindowWidget</name>
    <filename>classrobowflex_1_1darts_1_1WindowWidget.html</filename>
    <base>robowflex::darts::Widget</base>
    <member kind="function">
      <type></type>
      <name>WindowWidget</name>
      <anchorfile>classrobowflex_1_1darts_1_1WindowWidget.html</anchorfile>
      <anchor>a8484f71e8fbe49e87b2f003a6fb7304a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classrobowflex_1_1darts_1_1WindowWidget.html</anchorfile>
      <anchor>a67b9edf58dcfc8c009deaf7d68f0e679</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addText</name>
      <anchorfile>classrobowflex_1_1darts_1_1WindowWidget.html</anchorfile>
      <anchor>aa0ab02cd40bb4495bdfaff369440dab2</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCheckbox</name>
      <anchorfile>classrobowflex_1_1darts_1_1WindowWidget.html</anchorfile>
      <anchor>a07af39ea16a58b62c8d8287f06c0e464</anchor>
      <arglist>(const std::string &amp;text, bool &amp;boolean)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addButton</name>
      <anchorfile>classrobowflex_1_1darts_1_1WindowWidget.html</anchorfile>
      <anchor>a384a1cd3964519dabe0ed96594edf3c1</anchor>
      <arglist>(const std::string &amp;text, const ButtonCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCallback</name>
      <anchorfile>classrobowflex_1_1darts_1_1WindowWidget.html</anchorfile>
      <anchor>ad58db258960b9cf20cca195e8f32f525</anchor>
      <arglist>(const RenderCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>classrobowflex_1_1darts_1_1WindowWidget.html</anchorfile>
      <anchor>a97c8d503244570fc50c29ff83e75f1b5</anchor>
      <arglist>(const ImGuiElementPtr &amp;element)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ImGuiElementPtr &gt;</type>
      <name>elements_</name>
      <anchorfile>classrobowflex_1_1darts_1_1WindowWidget.html</anchorfile>
      <anchor>a3ae7b70c0573855a756a06a2a952ff7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addText</name>
      <anchorfile>classrobowflex_1_1darts_1_1WindowWidget.html</anchorfile>
      <anchor>aa0ab02cd40bb4495bdfaff369440dab2</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCheckbox</name>
      <anchorfile>classrobowflex_1_1darts_1_1WindowWidget.html</anchorfile>
      <anchor>a07af39ea16a58b62c8d8287f06c0e464</anchor>
      <arglist>(const std::string &amp;text, bool &amp;boolean)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addButton</name>
      <anchorfile>classrobowflex_1_1darts_1_1WindowWidget.html</anchorfile>
      <anchor>a384a1cd3964519dabe0ed96594edf3c1</anchor>
      <arglist>(const std::string &amp;text, const ButtonCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCallback</name>
      <anchorfile>classrobowflex_1_1darts_1_1WindowWidget.html</anchorfile>
      <anchor>ad58db258960b9cf20cca195e8f32f525</anchor>
      <arglist>(const RenderCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>classrobowflex_1_1darts_1_1WindowWidget.html</anchorfile>
      <anchor>a97c8d503244570fc50c29ff83e75f1b5</anchor>
      <arglist>(const ImGuiElementPtr &amp;element)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::WindowWidgetConstPtr</name>
    <filename>classrobowflex_1_1darts_1_1WindowWidgetConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::WindowWidgetPtr</name>
    <filename>classrobowflex_1_1darts_1_1WindowWidgetPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::World</name>
    <filename>classrobowflex_1_1darts_1_1World.html</filename>
    <class kind="struct">robowflex::darts::World::CollisionInfo</class>
    <member kind="function">
      <type>void</type>
      <name>clearIKModules</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>ae09545f2f0667806870b10ac5fca3e69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>ac0bb0f532bffc9eae3d24c767be9122b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>af39944bacb8c564d08aaf843726cdb35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>openOSGViewer</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a638108c072353ee2207edce6b2bee536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>dart::collision::CollisionDetectorPtr</type>
      <name>getCollider</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a96d12686eae42c9219885e63d21c2e6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::collision::CollisionGroup &gt;</type>
      <name>getSelfCollisionGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a0024dd174e955412a88ef7032866476f</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::collision::CollisionGroup &gt;</type>
      <name>getOtherCollisionGroup</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a4254180f933c220477aca98a4532cc9c</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>CollisionInfo</type>
      <name>getCollisionInfo</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a6de2175e60144ac086a6f79a17bdd9c9</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::collision::CompositeCollisionFilter &gt; &amp;</type>
      <name>getWorldCollisionFilter</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a43675100eb2f685235413291c01baa2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>World</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a61a7b5c78b7bf993e2cffb970fe18079</anchor>
      <arglist>(const std::string &amp;name=&quot;world&quot;)</arglist>
    </member>
    <member kind="function">
      <type>WorldPtr</type>
      <name>clone</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a0be9c3721da1e35d7ea1b8f3f78f7bb4</anchor>
      <arglist>(const std::string &amp;suffix=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRobot</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a95f04d23734cb272f5e89ebcb9f55cb1</anchor>
      <arglist>(RobotPtr robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRobot</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a1b1a536cdfd36b81f7468725f61cdfd8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRobot</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>ab493206ec18557c17a5095969acc9721</anchor>
      <arglist>(const RobotPtr &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>RobotPtr</type>
      <name>getRobot</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a0bae3b966486d0a59cd2c5763472d5a0</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>RobotConstPtr</type>
      <name>getRobotConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a8fdb14f504e8a50809397c1278f23b1f</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStructure</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>aabbad435af8c299e8851acfbbc1b7037</anchor>
      <arglist>(StructurePtr structure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeStructure</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>af4c25c691048e5c86b29da6a12b39e75</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeStructure</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a28e5a0520cecee0c6f7b0cae73c2c90b</anchor>
      <arglist>(const StructurePtr &amp;structure)</arglist>
    </member>
    <member kind="function">
      <type>StructurePtr</type>
      <name>getStructure</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a5a49a40575f4fc5ffea07178753b706b</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>StructureConstPtr</type>
      <name>getStructureConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>acee51a0446c0310119ac6e5fef00e848</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, StructurePtr &gt; &amp;</type>
      <name>getStructures</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a55afb3757e88f0b628e33682f81cb960</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>ad9e4978c3d37192eeae423f8cf4b2e2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Eigen::Vector3d, Eigen::Vector3d &gt;</type>
      <name>getWorkspaceBounds</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a6f3dac4bf2e60f0ab5762e62e5f2d1a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d &amp;</type>
      <name>getWorkspaceLow</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a7e0273f3e84c467d40fad2cfeaaa0a04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>getWorkspaceLowConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>abcd3a823458e04efe92ca147d9d4f881</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d &amp;</type>
      <name>getWorkspaceHigh</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>af0ef7ce7c55e50fa15db4566f753b1b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>getWorkspaceHighConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a79f247b17b44b5eb130e67064edaaa22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>dart::simulation::WorldPtr</type>
      <name>getSim</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a079af7c6948feb804381884f23bcdc38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const dart::simulation::WorldPtr &amp;</type>
      <name>getSimConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>af359b8c35725d7daaef1326468de25d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSkeletonIndex</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a3aed82f50259de33f04bad04d613537d</anchor>
      <arglist>(const dart::dynamics::SkeletonPtr &amp;skeleton) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::collision::BodyNodeCollisionFilter &gt;</type>
      <name>getAllValidFilter</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a8e70e70c80e110e7e7b060fab993281e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::collision::BodyNodeCollisionFilter &gt;</type>
      <name>getDefaultFilter</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a328d805eddfc98622bdf148efafa68d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inCollision</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>af7562aadac9d420fe82ab3b6dc219102</anchor>
      <arglist>(const std::shared_ptr&lt; dart::collision::CollisionFilter &gt; &amp;filter=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToCollision</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a0291a6392d97ecf79c19bd331772b045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forceUpdate</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>af5b9b0408289d34ecd94cd30ecf16ad1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addSkeletonCollider</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a7a966b13d3b03fecdebf9aa56c701ba5</anchor>
      <arglist>(const std::string &amp;name, const dart::dynamics::SkeletonPtr &amp;skeleton)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>removeSkeletonCollider</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a23237b3ec68582da9589acfb449ffea5</anchor>
      <arglist>(const std::string &amp;name, const dart::dynamics::SkeletonPtr &amp;skeleton)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::simulation::WorldPtr</type>
      <name>world_</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a29629a31e59296eff22784ba87eacf83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Vector3d</type>
      <name>low_</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>ac660d1fcd61af03f1f27cc825f8e776f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Vector3d</type>
      <name>high_</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a690b29ebcf503a70215fd2b1fe90c958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, RobotPtr &gt;</type>
      <name>robots_</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a3d80ea62361ed181962cd6c7403797f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, StructurePtr &gt;</type>
      <name>structures_</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>aceb2eee4fde91f0bb08fdb845f716c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::collision::CollisionGroupPtr</type>
      <name>all_</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>ae329ebe236752db94130529b89b2ba08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, CollisionInfo &gt;</type>
      <name>collision_</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a6a52b392e08d4fbd32d7b3da34755e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; dart::collision::CompositeCollisionFilter &gt;</type>
      <name>filter_</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>ab6540c0e7757af31297fe70a3abf577a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::collision::CollisionDetectorPtr</type>
      <name>collider_</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a63fc006f6ed22c53faea945b2e78b966</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>name_</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a97d4018f70be099bfe1b19f0f41b18b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::recursive_mutex</type>
      <name>mutex_</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a54801428add08111eb4a1b939b10985e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>World</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a61a7b5c78b7bf993e2cffb970fe18079</anchor>
      <arglist>(const std::string &amp;name=&quot;world&quot;)</arglist>
    </member>
    <member kind="function">
      <type>WorldPtr</type>
      <name>clone</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a0be9c3721da1e35d7ea1b8f3f78f7bb4</anchor>
      <arglist>(const std::string &amp;suffix=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRobot</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a95f04d23734cb272f5e89ebcb9f55cb1</anchor>
      <arglist>(RobotPtr robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRobot</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a1b1a536cdfd36b81f7468725f61cdfd8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRobot</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>ab493206ec18557c17a5095969acc9721</anchor>
      <arglist>(const RobotPtr &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>RobotPtr</type>
      <name>getRobot</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a0bae3b966486d0a59cd2c5763472d5a0</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>RobotConstPtr</type>
      <name>getRobotConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a8fdb14f504e8a50809397c1278f23b1f</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStructure</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>aabbad435af8c299e8851acfbbc1b7037</anchor>
      <arglist>(StructurePtr structure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeStructure</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>af4c25c691048e5c86b29da6a12b39e75</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeStructure</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a28e5a0520cecee0c6f7b0cae73c2c90b</anchor>
      <arglist>(const StructurePtr &amp;structure)</arglist>
    </member>
    <member kind="function">
      <type>StructurePtr</type>
      <name>getStructure</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a5a49a40575f4fc5ffea07178753b706b</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>StructureConstPtr</type>
      <name>getStructureConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>acee51a0446c0310119ac6e5fef00e848</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, StructurePtr &gt; &amp;</type>
      <name>getStructures</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a55afb3757e88f0b628e33682f81cb960</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>ad9e4978c3d37192eeae423f8cf4b2e2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Eigen::Vector3d, Eigen::Vector3d &gt;</type>
      <name>getWorkspaceBounds</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a6f3dac4bf2e60f0ab5762e62e5f2d1a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d &amp;</type>
      <name>getWorkspaceLow</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a7e0273f3e84c467d40fad2cfeaaa0a04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>getWorkspaceLowConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>abcd3a823458e04efe92ca147d9d4f881</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d &amp;</type>
      <name>getWorkspaceHigh</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>af0ef7ce7c55e50fa15db4566f753b1b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>getWorkspaceHighConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a79f247b17b44b5eb130e67064edaaa22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>dart::simulation::WorldPtr</type>
      <name>getSim</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a079af7c6948feb804381884f23bcdc38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const dart::simulation::WorldPtr &amp;</type>
      <name>getSimConst</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>af359b8c35725d7daaef1326468de25d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSkeletonIndex</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a3aed82f50259de33f04bad04d613537d</anchor>
      <arglist>(const dart::dynamics::SkeletonPtr &amp;skeleton) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::collision::BodyNodeCollisionFilter &gt;</type>
      <name>getAllValidFilter</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a8e70e70c80e110e7e7b060fab993281e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::collision::BodyNodeCollisionFilter &gt;</type>
      <name>getDefaultFilter</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a328d805eddfc98622bdf148efafa68d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inCollision</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>af7562aadac9d420fe82ab3b6dc219102</anchor>
      <arglist>(const std::shared_ptr&lt; dart::collision::CollisionFilter &gt; &amp;filter=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToCollision</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>a0291a6392d97ecf79c19bd331772b045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forceUpdate</name>
      <anchorfile>classrobowflex_1_1darts_1_1World.html</anchorfile>
      <anchor>af5b9b0408289d34ecd94cd30ecf16ad1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>robowflex::darts::World::CollisionInfo</name>
    <filename>structrobowflex_1_1darts_1_1World_1_1CollisionInfo.html</filename>
    <member kind="variable">
      <type>std::shared_ptr&lt; dart::collision::CollisionGroup &gt;</type>
      <name>self</name>
      <anchorfile>structrobowflex_1_1darts_1_1World_1_1CollisionInfo.html</anchorfile>
      <anchor>ad9d062f749ab7aa0f7317166e2a20cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; dart::collision::CollisionGroup &gt;</type>
      <name>others</name>
      <anchorfile>structrobowflex_1_1darts_1_1World_1_1CollisionInfo.html</anchorfile>
      <anchor>ad9af4589ffe8c1525dcfc37cd969ca53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::WorldConstPtr</name>
    <filename>classrobowflex_1_1darts_1_1WorldConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::darts::WorldPtr</name>
    <filename>classrobowflex_1_1darts_1_1WorldPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::Exception</name>
    <filename>classrobowflex_1_1Exception.html</filename>
    <base>std::exception</base>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>classrobowflex_1_1Exception.html</anchorfile>
      <anchor>a2ac289e0ea34588d9c8dd8e147482a09</anchor>
      <arglist>(int value, const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getValue</name>
      <anchorfile>classrobowflex_1_1Exception.html</anchorfile>
      <anchor>a7c364163d2aa2a01ba515d22b5535c5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getMessage</name>
      <anchorfile>classrobowflex_1_1Exception.html</anchorfile>
      <anchor>afe60a3198763685aa0e2846f7b9133ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classrobowflex_1_1Exception.html</anchorfile>
      <anchor>a93d13fea53c850383744bbe0a243e6e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>value_</name>
      <anchorfile>classrobowflex_1_1Exception.html</anchorfile>
      <anchor>ab437c933e5130684a8069ab40983ace0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::string</type>
      <name>message_</name>
      <anchorfile>classrobowflex_1_1Exception.html</anchorfile>
      <anchor>a1fac8b580526bf15e9ad137d4416c916</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::Experiment</name>
    <filename>classrobowflex_1_1Experiment.html</filename>
    <member kind="function">
      <type>PlanDataSetPtr</type>
      <name>benchmark</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a950a199bb1c627406940d47947d38228</anchor>
      <arglist>(std::size_t n_threads=1) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Experiment</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>ad28c03c5d91e2d8816ae067885a9189f</anchor>
      <arglist>(const std::string &amp;name, const Profiler::Options &amp;options, double allowed_time=60.0, std::size_t trials=100, bool timeout=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addQuery</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>aa634c435f861288aa9f0ff0eb1e7d136</anchor>
      <arglist>(const std::string &amp;planner_name, const SceneConstPtr &amp;scene, const PlannerPtr &amp;planner, const planning_interface::MotionPlanRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addQuery</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a12905ca9a5e84a42a3310196cd75fb26</anchor>
      <arglist>(const std::string &amp;planner_name, const SceneConstPtr &amp;scene, const PlannerPtr &amp;planner, const MotionRequestBuilder &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addQuery</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a1cae30d134af17bfe7e67754b0865eed</anchor>
      <arglist>(const std::string &amp;planner_name, const SceneConstPtr &amp;scene, const PlannerPtr &amp;planner, const MotionRequestBuilderPtr &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>Profiler::Options &amp;</type>
      <name>getOptions</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a16b294cd488da6711c7ad5f4d57a2d84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Profiler &amp;</type>
      <name>getProfiler</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>ae1942c1b23882d49df1b34892ffdd6c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Profiler &amp;</type>
      <name>getProfilerConst</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>ab9833ce351a543eed00a548855dec571</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; PlanningQuery &gt; &amp;</type>
      <name>getQueries</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a48abdf515df269d061a49ad832950f89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableMultipleRequests</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>af436c0415741a4c5a553c802078729b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>overridePlanningTime</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>ab155882faf2bfa7e5e1c75043ede62e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>name_</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>abd83e5e943166956385dd42a472ed251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>allowed_time_</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a95bf25e83a8261cb3eda717479e0db5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>trials_</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a760cc4a3567e0fccb998e5cc3e7a3884</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>timeout_</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a84d7942fbf60a0f1abdb61ed443816a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>enforce_single_thread_</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a8822c40e77b729b6208eed0cf5a3e3a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>override_planning_time_</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>af5dcfdfd8f44edca7f8430d2f1af3249</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Profiler::Options</type>
      <name>options_</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a8dc205cd85ab25ceeea743a52aea6883</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Profiler</type>
      <name>profiler_</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a8c750b98cb85368c3b165281e291bf87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; PlanningQuery &gt;</type>
      <name>queries_</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a165811cdf15ce1c6f2a7579ad73eb5d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PreRunCallback</type>
      <name>pre_callback_</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a5dd1360f2986a4abdc15727364bc1b4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PostRunCallback</type>
      <name>post_callback_</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a8fb540e8df25f38a352435d23541624a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PostQueryCallback</type>
      <name>complete_callback_</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>ae2b292fd2197d492a7a9c899e4e0734b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const PlanningQuery &amp;query)&gt;</type>
      <name>PreRunCallback</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>aef43722e721b5b72450040a6bfd44942</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(PlanData &amp;result, const PlanningQuery &amp;query)&gt;</type>
      <name>PostRunCallback</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a83d9a71357e560aa116fb81a076403e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(PlanDataSetPtr dataset, const PlanningQuery &amp;query)&gt;</type>
      <name>PostQueryCallback</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>aa1fb11c33d1e47f53a74071cc1ffdbf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreRunCallback</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>ab693e2e57b346afd2fffe4b29d244f37</anchor>
      <arglist>(const PreRunCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPostRunCallback</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a1501c6a9168ed7af606a897be79cded2</anchor>
      <arglist>(const PostRunCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPostQueryCallback</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a19f76af57cf40d1b91e62c82ef029e0c</anchor>
      <arglist>(const PostQueryCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Experiment</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>ad28c03c5d91e2d8816ae067885a9189f</anchor>
      <arglist>(const std::string &amp;name, const Profiler::Options &amp;options, double allowed_time=60.0, std::size_t trials=100, bool timeout=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addQuery</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>aa634c435f861288aa9f0ff0eb1e7d136</anchor>
      <arglist>(const std::string &amp;planner_name, const SceneConstPtr &amp;scene, const PlannerPtr &amp;planner, const planning_interface::MotionPlanRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addQuery</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a12905ca9a5e84a42a3310196cd75fb26</anchor>
      <arglist>(const std::string &amp;planner_name, const SceneConstPtr &amp;scene, const PlannerPtr &amp;planner, const MotionRequestBuilder &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addQuery</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a1cae30d134af17bfe7e67754b0865eed</anchor>
      <arglist>(const std::string &amp;planner_name, const SceneConstPtr &amp;scene, const PlannerPtr &amp;planner, const MotionRequestBuilderPtr &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>Profiler::Options &amp;</type>
      <name>getOptions</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a16b294cd488da6711c7ad5f4d57a2d84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Profiler &amp;</type>
      <name>getProfiler</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>ae1942c1b23882d49df1b34892ffdd6c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Profiler &amp;</type>
      <name>getProfilerConst</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>ab9833ce351a543eed00a548855dec571</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; PlanningQuery &gt; &amp;</type>
      <name>getQueries</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>a48abdf515df269d061a49ad832950f89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableMultipleRequests</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>af436c0415741a4c5a553c802078729b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>overridePlanningTime</name>
      <anchorfile>classrobowflex_1_1Experiment.html</anchorfile>
      <anchor>ab155882faf2bfa7e5e1c75043ede62e1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::ExperimentConstPtr</name>
    <filename>classrobowflex_1_1ExperimentConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::ExperimentPtr</name>
    <filename>classrobowflex_1_1ExperimentPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::FetchRobot</name>
    <filename>classrobowflex_1_1FetchRobot.html</filename>
    <base>robowflex::Robot</base>
    <member kind="function">
      <type></type>
      <name>FetchRobot</name>
      <anchorfile>classrobowflex_1_1FetchRobot.html</anchorfile>
      <anchor>a2f1dd0e56219abfeb970d12d6e8fafbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1FetchRobot.html</anchorfile>
      <anchor>a72c6a08820a89f784b68274539564453</anchor>
      <arglist>(bool addVirtual=true, bool use_low_limits=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addCastersURDF</name>
      <anchorfile>classrobowflex_1_1FetchRobot.html</anchorfile>
      <anchor>ac66a1f19f217de72891047ba8e1d77cb</anchor>
      <arglist>(tinyxml2::XMLDocument &amp;doc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBasePose</name>
      <anchorfile>classrobowflex_1_1FetchRobot.html</anchorfile>
      <anchor>aafcd98b9aa5069182adba35810c080db</anchor>
      <arglist>(double x, double y, double theta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointHead</name>
      <anchorfile>classrobowflex_1_1FetchRobot.html</anchorfile>
      <anchor>ae815a3ed21e4c535f93e2c76c9135f24</anchor>
      <arglist>(const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>openGripper</name>
      <anchorfile>classrobowflex_1_1FetchRobot.html</anchorfile>
      <anchor>a31a47cb880cb00ed2a8cbbc273da1255</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeGripper</name>
      <anchorfile>classrobowflex_1_1FetchRobot.html</anchorfile>
      <anchor>a89f1122d1c5e5e4063f8064532badeff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_URDF</name>
      <anchorfile>classrobowflex_1_1FetchRobot.html</anchorfile>
      <anchor>a158dc5682e3217ad597132a4a4fba3ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_SRDF</name>
      <anchorfile>classrobowflex_1_1FetchRobot.html</anchorfile>
      <anchor>a20f595078e28cbde70d0ad1be8c50ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_LIMITS</name>
      <anchorfile>classrobowflex_1_1FetchRobot.html</anchorfile>
      <anchor>af7e0333e7fafd2e4af2acabd97b1199d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_KINEMATICS</name>
      <anchorfile>classrobowflex_1_1FetchRobot.html</anchorfile>
      <anchor>a94172358ebee5c5dbab8e65968fcea51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>RESOURCE_URDF</name>
      <anchorfile>classrobowflex_1_1FetchRobot.html</anchorfile>
      <anchor>a3dec5f27553a3f2586bfcb5023ef0275</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>RESOURCE_SRDF</name>
      <anchorfile>classrobowflex_1_1FetchRobot.html</anchorfile>
      <anchor>a0f4c805632d61a26b2c1acedcb70c7b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>RESOURCE_LIMITS</name>
      <anchorfile>classrobowflex_1_1FetchRobot.html</anchorfile>
      <anchor>a5d231231d9c88e93a5de1c1f68ae007b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>RESOURCE_LIMITS_LOW</name>
      <anchorfile>classrobowflex_1_1FetchRobot.html</anchorfile>
      <anchor>a4f0e00fdee0e1b2960dcb6ba11d3379e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>RESOURCE_KINEMATICS</name>
      <anchorfile>classrobowflex_1_1FetchRobot.html</anchorfile>
      <anchor>a3c97b08d20c970df6094c33ba01b6b76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::FetchRobotConstPtr</name>
    <filename>classrobowflex_1_1FetchRobotConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::FetchRobotPtr</name>
    <filename>classrobowflex_1_1FetchRobotPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::Geometry</name>
    <filename>classrobowflex_1_1Geometry.html</filename>
    <class kind="class">robowflex::Geometry::ShapeType</class>
    <member kind="function">
      <type></type>
      <name>Geometry</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>a1753b8512ee013875d41a55ee58dc71e</anchor>
      <arglist>(ShapeType::Type type, const Eigen::Vector3d &amp;dimensions, const std::string &amp;resource=&quot;&quot;, const EigenSTL::vector_Vector3d &amp;vertices=EigenSTL::vector_Vector3d{})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Geometry</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>a7b387009be2b933f033297c129ddaf60</anchor>
      <arglist>(const shapes::Shape &amp;shape)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Geometry</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>adf31f83c1bf42ab90de5a19e82f294bb</anchor>
      <arglist>(const shape_msgs::SolidPrimitive &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Geometry</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>a325421887aae401974b901ea49641132</anchor>
      <arglist>(const shape_msgs::Mesh &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Geometry</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>ab01e14aff00b6d2743b31e47fc848cdd</anchor>
      <arglist>(const Geometry &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Geometry &amp;</type>
      <name>operator=</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>a11af3cdc67ce0382365a9731672aea20</anchor>
      <arglist>(const Geometry &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>afeed3d5a783d0b6ae7d01c2706951289</anchor>
      <arglist>(const Eigen::Vector3d &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, Eigen::Vector3d &gt;</type>
      <name>sample</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>abceb50074b6e2cbcc990c1396098ea77</anchor>
      <arglist>(const unsigned int attempts=50) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMesh</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>a90091f195278eaf211faaaa34da0cd78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const shape_msgs::SolidPrimitive</type>
      <name>getSolidMsg</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>a9718437f6931324f7187d85413075e39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const shape_msgs::Mesh</type>
      <name>getMeshMsg</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>a748ef0e6fd0ee8c617765204e0930952</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const shapes::ShapePtr &amp;</type>
      <name>getShape</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>aa9d7ded50c02279c5287a74297470958</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const bodies::BodyPtr &amp;</type>
      <name>getBody</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>ae869d1977dc684258a619bef2869568c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ShapeType::Type</type>
      <name>getType</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>aba715d31bfc37f781fb53d48146c35fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getResource</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>a000625d72ff932d5b2421f81739d27a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const EigenSTL::vector_Vector3d &amp;</type>
      <name>getVertices</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>a5f9b4da36330bfd1d45ac1a709fb4ede</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>getDimensions</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>a88a22b97a61eadb0114d27a04def1688</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::AlignedBox3d</type>
      <name>getAABB</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>aa12c70d37fd7c5d9084ca3199206c8de</anchor>
      <arglist>(const RobotPose &amp;pose=RobotPose::Identity()) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GeometryPtr</type>
      <name>makeSphere</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>a3b45cda54e08fbd87c67432dd44c1ee4</anchor>
      <arglist>(double radius)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GeometryPtr</type>
      <name>makeBox</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>a4b0635a1b21b2c98bf6f383199ed42f5</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GeometryPtr</type>
      <name>makeBox</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>a1a78ffe5037c1da911322ad32bb33a77</anchor>
      <arglist>(const Eigen::Vector3d &amp;dimensions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GeometryPtr</type>
      <name>makeCylinder</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>ad6fa7bfc9ea2360c86aff746799e85dc</anchor>
      <arglist>(double radius, double length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GeometryPtr</type>
      <name>makeCone</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>a7aee3a61fc6ade3599cc82a4a449718b</anchor>
      <arglist>(double radius, double length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GeometryPtr</type>
      <name>makeSolidPrimitive</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>aeda017855d539199fb505030cd16ad3b</anchor>
      <arglist>(const shape_msgs::SolidPrimitive &amp;msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GeometryPtr</type>
      <name>makeMesh</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>a05e5b0f2f7db3483263064b0eab47618</anchor>
      <arglist>(const std::string &amp;resource, const Eigen::Vector3d &amp;scale={1, 1, 1})</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GeometryPtr</type>
      <name>makeMesh</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>af9dd0212df75a483013569bc0d6ba6f8</anchor>
      <arglist>(const EigenSTL::vector_Vector3d &amp;vertices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>shapes::Shape *</type>
      <name>loadShape</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>ac84f99fddb1e1f5eabac2d3663a489ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bodies::Body *</type>
      <name>loadBody</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>acadeec2a7cd0f8b7ac6ac309937d390a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ShapeType::Type</type>
      <name>type_</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>ad89296c0ff755b3beb18caa9df99e6c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Vector3d</type>
      <name>dimensions_</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>a1aece64f0d31c57bae196d33baef6b16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EigenSTL::vector_Vector3d</type>
      <name>vertices_</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>ad154c7e519795fc08e2a019948be71f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>resource_</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>ad87f6f762768545896cd92430531ce6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>shapes::ShapePtr</type>
      <name>shape_</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>a77993d6c27159d08738b8dba0854b615</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bodies::BodyPtr</type>
      <name>body_</name>
      <anchorfile>classrobowflex_1_1Geometry.html</anchorfile>
      <anchor>abc22f4a38191dca320d8b518783b5d56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::Geometry::ShapeType</name>
    <filename>classrobowflex_1_1Geometry_1_1ShapeType.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classrobowflex_1_1Geometry_1_1ShapeType.html</anchorfile>
      <anchor>a5046aea046e675696ac6c78bf273825b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOX</name>
      <anchorfile>classrobowflex_1_1Geometry_1_1ShapeType.html</anchorfile>
      <anchor>a5046aea046e675696ac6c78bf273825ba88dd34d51e5b1b255ead4bf3200a7d51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPHERE</name>
      <anchorfile>classrobowflex_1_1Geometry_1_1ShapeType.html</anchorfile>
      <anchor>a5046aea046e675696ac6c78bf273825bafaea4efab646e1956f00d187f1265f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CYLINDER</name>
      <anchorfile>classrobowflex_1_1Geometry_1_1ShapeType.html</anchorfile>
      <anchor>a5046aea046e675696ac6c78bf273825ba2c41d9a87b690b7afc5805b343d7a4a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONE</name>
      <anchorfile>classrobowflex_1_1Geometry_1_1ShapeType.html</anchorfile>
      <anchor>a5046aea046e675696ac6c78bf273825ba4abdeb43d35691fe96127109454a85f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESH</name>
      <anchorfile>classrobowflex_1_1Geometry_1_1ShapeType.html</anchorfile>
      <anchor>a5046aea046e675696ac6c78bf273825ba40efcc8aff42316338c0c2b0355fb3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOX</name>
      <anchorfile>classrobowflex_1_1Geometry_1_1ShapeType.html</anchorfile>
      <anchor>a5046aea046e675696ac6c78bf273825ba88dd34d51e5b1b255ead4bf3200a7d51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPHERE</name>
      <anchorfile>classrobowflex_1_1Geometry_1_1ShapeType.html</anchorfile>
      <anchor>a5046aea046e675696ac6c78bf273825bafaea4efab646e1956f00d187f1265f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CYLINDER</name>
      <anchorfile>classrobowflex_1_1Geometry_1_1ShapeType.html</anchorfile>
      <anchor>a5046aea046e675696ac6c78bf273825ba2c41d9a87b690b7afc5805b343d7a4a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONE</name>
      <anchorfile>classrobowflex_1_1Geometry_1_1ShapeType.html</anchorfile>
      <anchor>a5046aea046e675696ac6c78bf273825ba4abdeb43d35691fe96127109454a85f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESH</name>
      <anchorfile>classrobowflex_1_1Geometry_1_1ShapeType.html</anchorfile>
      <anchor>a5046aea046e675696ac6c78bf273825ba40efcc8aff42316338c0c2b0355fb3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>toType</name>
      <anchorfile>classrobowflex_1_1Geometry_1_1ShapeType.html</anchorfile>
      <anchor>a60f8d4aa261144317286b444a29f34d0</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>toString</name>
      <anchorfile>classrobowflex_1_1Geometry_1_1ShapeType.html</anchorfile>
      <anchor>a0e497d7082981764e599200bbda0c660</anchor>
      <arglist>(Type type)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>MAX</name>
      <anchorfile>classrobowflex_1_1Geometry_1_1ShapeType.html</anchorfile>
      <anchor>a7c68fb7f3e0768bd5744572f5e852f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::vector&lt; std::string &gt;</type>
      <name>STRINGS</name>
      <anchorfile>classrobowflex_1_1Geometry_1_1ShapeType.html</anchorfile>
      <anchor>a7c0d841b0157d8b03435a2cf3751ccb2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::GeometryConstPtr</name>
    <filename>classrobowflex_1_1GeometryConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::GeometryPtr</name>
    <filename>classrobowflex_1_1GeometryPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::HDF5DataConstPtr</name>
    <filename>classrobowflex_1_1HDF5DataConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::HDF5DataPtr</name>
    <filename>classrobowflex_1_1HDF5DataPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::ID</name>
    <filename>classrobowflex_1_1ID.html</filename>
    <member kind="typedef">
      <type>std::pair&lt; std::string, std::size_t &gt;</type>
      <name>Key</name>
      <anchorfile>classrobowflex_1_1ID.html</anchorfile>
      <anchor>a0f7e1c1d6a33ff5f2fbc7a4a27efdaa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ID</name>
      <anchorfile>classrobowflex_1_1ID.html</anchorfile>
      <anchor>aa2e4cc0b4fe139ee001bee463916b2d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getID</name>
      <anchorfile>classrobowflex_1_1ID.html</anchorfile>
      <anchor>a6f7a247019d01d91770aab171371d411</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getVersion</name>
      <anchorfile>classrobowflex_1_1ID.html</anchorfile>
      <anchor>a816b65d17a3fdcabefbb08a554f3bef0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>getKey</name>
      <anchorfile>classrobowflex_1_1ID.html</anchorfile>
      <anchor>ab76e052c17281fe99e747a4fba5df045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classrobowflex_1_1ID.html</anchorfile>
      <anchor>a73bd185ca87c64f56e8cf418164aff54</anchor>
      <arglist>(const ID &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classrobowflex_1_1ID.html</anchorfile>
      <anchor>abbe32331b4e95402913ab804e5fbe990</anchor>
      <arglist>(const Key &amp;b) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Key</type>
      <name>getNullKey</name>
      <anchorfile>classrobowflex_1_1ID.html</anchorfile>
      <anchor>aa951e53e7b55b5a19e194959c228feba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>incrementVersion</name>
      <anchorfile>classrobowflex_1_1ID.html</anchorfile>
      <anchor>a3b901231f422e7e5ad07e87fc964cf8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>id_</name>
      <anchorfile>classrobowflex_1_1ID.html</anchorfile>
      <anchor>a0c84f98c0eb017151bc8c0e31d71bf25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::atomic_size_t</type>
      <name>version_</name>
      <anchorfile>classrobowflex_1_1ID.html</anchorfile>
      <anchor>a1c79479327f0b199500b894f0c0e4dfc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::IDConstPtr</name>
    <filename>classrobowflex_1_1IDConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::IDPtr</name>
    <filename>classrobowflex_1_1IDPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::IO::Bag</name>
    <filename>classrobowflex_1_1IO_1_1Bag.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Mode</name>
      <anchorfile>classrobowflex_1_1IO_1_1Bag.html</anchorfile>
      <anchor>a6c815ce5d20042c1bcb1e8a96185399e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ</name>
      <anchorfile>classrobowflex_1_1IO_1_1Bag.html</anchorfile>
      <anchor>a6c815ce5d20042c1bcb1e8a96185399eaf0a100871108c22d8065e118bead6acd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRITE</name>
      <anchorfile>classrobowflex_1_1IO_1_1Bag.html</anchorfile>
      <anchor>a6c815ce5d20042c1bcb1e8a96185399ea15d631bfb446e35c940b06ae983241c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ</name>
      <anchorfile>classrobowflex_1_1IO_1_1Bag.html</anchorfile>
      <anchor>a6c815ce5d20042c1bcb1e8a96185399eaf0a100871108c22d8065e118bead6acd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRITE</name>
      <anchorfile>classrobowflex_1_1IO_1_1Bag.html</anchorfile>
      <anchor>a6c815ce5d20042c1bcb1e8a96185399ea15d631bfb446e35c940b06ae983241c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bag</name>
      <anchorfile>classrobowflex_1_1IO_1_1Bag.html</anchorfile>
      <anchor>ac9720ad66eb2c47b99d168efc3460168</anchor>
      <arglist>(const std::string &amp;file, Mode mode=WRITE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Bag</name>
      <anchorfile>classrobowflex_1_1IO_1_1Bag.html</anchorfile>
      <anchor>a1195732a759aed17b6a0a2f0cc9f5055</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addMessage</name>
      <anchorfile>classrobowflex_1_1IO_1_1Bag.html</anchorfile>
      <anchor>aeea42ab2e31c185453927c9fb1ec6069</anchor>
      <arglist>(const std::string &amp;topic, const T &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>getMessages</name>
      <anchorfile>classrobowflex_1_1IO_1_1Bag.html</anchorfile>
      <anchor>af292c5404b7b96f0f1334e2770f6c57f</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;topics)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Mode</type>
      <name>mode_</name>
      <anchorfile>classrobowflex_1_1IO_1_1Bag.html</anchorfile>
      <anchor>ac430677e1235675d30949cc9a53e56d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>file_</name>
      <anchorfile>classrobowflex_1_1IO_1_1Bag.html</anchorfile>
      <anchor>ac264fb5fdd126958a9bb5a7f4ce8b7f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>rosbag::Bag</type>
      <name>bag_</name>
      <anchorfile>classrobowflex_1_1IO_1_1Bag.html</anchorfile>
      <anchor>ad23060099e5c3afdd319de1b786b1713</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::IO::GNUPlotHelper</name>
    <filename>classrobowflex_1_1IO_1_1GNUPlotHelper.html</filename>
    <class kind="struct">robowflex::IO::GNUPlotHelper::BoxPlotOptions</class>
    <class kind="class">robowflex::IO::GNUPlotHelper::Instance</class>
    <class kind="struct">robowflex::IO::GNUPlotHelper::PlottingOptions</class>
    <class kind="struct">robowflex::IO::GNUPlotHelper::TimeSeriesOptions</class>
    <member kind="typedef">
      <type>std::pair&lt; double, double &gt;</type>
      <name>Point</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper.html</anchorfile>
      <anchor>ae7d3e464f5f30ec1ec2e119c866eb3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Point &gt;</type>
      <name>Series</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper.html</anchorfile>
      <anchor>a03a037b1ffbd60ce2179ff38fdc6c88c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Values</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper.html</anchorfile>
      <anchor>a0cf4457b2f48a8f3ea2295a0c24b0e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GNUPlotHelper</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper.html</anchorfile>
      <anchor>abb96571ca7e1bbcc54ef598e1224132f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GNUPlotHelper</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper.html</anchorfile>
      <anchor>a9fc36cd1cde2120ac3454d1ec14f1c04</anchor>
      <arglist>(GNUPlotHelper const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper.html</anchorfile>
      <anchor>a4397e60386c2733bdc83967debc1da93</anchor>
      <arglist>(GNUPlotHelper const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configurePlot</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper.html</anchorfile>
      <anchor>af21dfc247a41eeb4f9e05040690533f9</anchor>
      <arglist>(const PlottingOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeseries</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper.html</anchorfile>
      <anchor>af1dd56a0f6f3b694da3acbff1655e769</anchor>
      <arglist>(const TimeSeriesOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>boxplot</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper.html</anchorfile>
      <anchor>a880567d35ac9911ffb289d63f814d9d7</anchor>
      <arglist>(const BoxPlotOptions &amp;options)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::shared_ptr&lt; Instance &gt;</type>
      <name>getInstance</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper.html</anchorfile>
      <anchor>a82c77a082ea5763a8fc287152b540aee</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, std::shared_ptr&lt; Instance &gt; &gt;</type>
      <name>instances_</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper.html</anchorfile>
      <anchor>a4155ebfa1ac4ab21a3fe6757c180e153</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configurePlot</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper.html</anchorfile>
      <anchor>af21dfc247a41eeb4f9e05040690533f9</anchor>
      <arglist>(const PlottingOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeseries</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper.html</anchorfile>
      <anchor>af1dd56a0f6f3b694da3acbff1655e769</anchor>
      <arglist>(const TimeSeriesOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>boxplot</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper.html</anchorfile>
      <anchor>a880567d35ac9911ffb289d63f814d9d7</anchor>
      <arglist>(const BoxPlotOptions &amp;options)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>robowflex::IO::GNUPlotHelper::BoxPlotOptions</name>
    <filename>structrobowflex_1_1IO_1_1GNUPlotHelper_1_1BoxPlotOptions.html</filename>
    <base>robowflex::IO::GNUPlotHelper::PlottingOptions</base>
    <member kind="variable">
      <type>bool</type>
      <name>outliers</name>
      <anchorfile>structrobowflex_1_1IO_1_1GNUPlotHelper_1_1BoxPlotOptions.html</anchorfile>
      <anchor>a335ad6a8f7126d4ab288781b3e57f2f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>sorted</name>
      <anchorfile>structrobowflex_1_1IO_1_1GNUPlotHelper_1_1BoxPlotOptions.html</anchorfile>
      <anchor>a88902de6acc041290c434c7199dbe2d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, Values &gt;</type>
      <name>values</name>
      <anchorfile>structrobowflex_1_1IO_1_1GNUPlotHelper_1_1BoxPlotOptions.html</anchorfile>
      <anchor>af7cb1bf3f560e16afa4e14fb5c7b1fa3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::IO::GNUPlotHelper::Instance</name>
    <filename>classrobowflex_1_1IO_1_1GNUPlotHelper_1_1Instance.html</filename>
    <member kind="function">
      <type></type>
      <name>Instance</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper_1_1Instance.html</anchorfile>
      <anchor>aa45ef3ed70d7313df29e16b1976cd28a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper_1_1Instance.html</anchorfile>
      <anchor>a7570634c627779cec3fc802b36ad7408</anchor>
      <arglist>(const std::string &amp;line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeline</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper_1_1Instance.html</anchorfile>
      <anchor>a0ad3ef0124fbe59e526f21b06201268a</anchor>
      <arglist>(const std::string &amp;line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper_1_1Instance.html</anchorfile>
      <anchor>a3ac0e06598788474c5831b89e6b9a915</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Instance</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper_1_1Instance.html</anchorfile>
      <anchor>aa5cf91ed329ad08e13d7c19ee031430a</anchor>
      <arglist>(Instance const &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper_1_1Instance.html</anchorfile>
      <anchor>a108e346ed1c57fd4d638a9d7d47eaef6</anchor>
      <arglist>(Instance const &amp;)=delete</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>debug_</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper_1_1Instance.html</anchorfile>
      <anchor>aafdf88b969c27737293d9190ad33dd28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper_1_1Instance.html</anchorfile>
      <anchor>a7570634c627779cec3fc802b36ad7408</anchor>
      <arglist>(const std::string &amp;line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeline</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper_1_1Instance.html</anchorfile>
      <anchor>a0ad3ef0124fbe59e526f21b06201268a</anchor>
      <arglist>(const std::string &amp;line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotHelper_1_1Instance.html</anchorfile>
      <anchor>a3ac0e06598788474c5831b89e6b9a915</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>robowflex::IO::GNUPlotHelper::PlottingOptions</name>
    <filename>structrobowflex_1_1IO_1_1GNUPlotHelper_1_1PlottingOptions.html</filename>
    <class kind="struct">robowflex::IO::GNUPlotHelper::PlottingOptions::Axis</class>
    <member kind="variable">
      <type>std::string</type>
      <name>instance</name>
      <anchorfile>structrobowflex_1_1IO_1_1GNUPlotHelper_1_1PlottingOptions.html</anchorfile>
      <anchor>ad2704176b23fc8a4326a9b35b7658bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>title</name>
      <anchorfile>structrobowflex_1_1IO_1_1GNUPlotHelper_1_1PlottingOptions.html</anchorfile>
      <anchor>a64035b46390a8d4ca19ec8b4ad5033fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>mode</name>
      <anchorfile>structrobowflex_1_1IO_1_1GNUPlotHelper_1_1PlottingOptions.html</anchorfile>
      <anchor>ae249932a4d91ba8423034440de366183</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Axis</type>
      <name>x</name>
      <anchorfile>structrobowflex_1_1IO_1_1GNUPlotHelper_1_1PlottingOptions.html</anchorfile>
      <anchor>a394f2549e40aabd79faadca89e7fa2df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Axis</type>
      <name>y</name>
      <anchorfile>structrobowflex_1_1IO_1_1GNUPlotHelper_1_1PlottingOptions.html</anchorfile>
      <anchor>a5ea3b26df1e75e95e00c7c549ca92026</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>robowflex::IO::GNUPlotHelper::PlottingOptions::Axis</name>
    <filename>structrobowflex_1_1IO_1_1GNUPlotHelper_1_1PlottingOptions_1_1Axis.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>label</name>
      <anchorfile>structrobowflex_1_1IO_1_1GNUPlotHelper_1_1PlottingOptions_1_1Axis.html</anchorfile>
      <anchor>aa2933674b72e93ada0b32c0be8cbef7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max</name>
      <anchorfile>structrobowflex_1_1IO_1_1GNUPlotHelper_1_1PlottingOptions_1_1Axis.html</anchorfile>
      <anchor>a70a1d81961714edc36f86073ac538c69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>min</name>
      <anchorfile>structrobowflex_1_1IO_1_1GNUPlotHelper_1_1PlottingOptions_1_1Axis.html</anchorfile>
      <anchor>a8f8ffaef9a3807c77c277be8f6690ea1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>robowflex::IO::GNUPlotHelper::TimeSeriesOptions</name>
    <filename>structrobowflex_1_1IO_1_1GNUPlotHelper_1_1TimeSeriesOptions.html</filename>
    <base>robowflex::IO::GNUPlotHelper::PlottingOptions</base>
    <member kind="variable">
      <type>std::map&lt; std::string, Series &gt;</type>
      <name>points</name>
      <anchorfile>structrobowflex_1_1IO_1_1GNUPlotHelper_1_1TimeSeriesOptions.html</anchorfile>
      <anchor>a1d37cced647d4c98bb5fc43ef6171516</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::IO::GNUPlotPlanDataSetOutputter</name>
    <filename>classrobowflex_1_1IO_1_1GNUPlotPlanDataSetOutputter.html</filename>
    <base>robowflex::PlanDataSetOutputter</base>
    <member kind="function">
      <type></type>
      <name>GNUPlotPlanDataSetOutputter</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotPlanDataSetOutputter.html</anchorfile>
      <anchor>ac46e4104a9ae1bd888904fecfa19f931</anchor>
      <arglist>(const std::string &amp;metric)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GNUPlotPlanDataSetOutputter</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotPlanDataSetOutputter.html</anchorfile>
      <anchor>a7e64e497d2dabb8585548cf3b717135b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotPlanDataSetOutputter.html</anchorfile>
      <anchor>ab3c6fbf0b9bff881293897fa210e82c3</anchor>
      <arglist>(const PlanDataSet &amp;results) override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>metric_</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotPlanDataSetOutputter.html</anchorfile>
      <anchor>a7b4f616b6e67f42a2856148154d3ea2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GNUPlotHelper</type>
      <name>helper_</name>
      <anchorfile>classrobowflex_1_1IO_1_1GNUPlotPlanDataSetOutputter.html</anchorfile>
      <anchor>acc827bdf87655465bf894952bf162d71</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::IO::Handler</name>
    <filename>classrobowflex_1_1IO_1_1Handler.html</filename>
    <member kind="function">
      <type></type>
      <name>Handler</name>
      <anchorfile>classrobowflex_1_1IO_1_1Handler.html</anchorfile>
      <anchor>ae8dd424faaa9fe35333996a53cdbf1ae</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Handler</name>
      <anchorfile>classrobowflex_1_1IO_1_1Handler.html</anchorfile>
      <anchor>a7078fbad0ad270d2f5d275070bba8070</anchor>
      <arglist>(Handler const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classrobowflex_1_1IO_1_1Handler.html</anchorfile>
      <anchor>a9bfb1d08271ad49c8c67d14558614232</anchor>
      <arglist>(Handler const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Handler</name>
      <anchorfile>classrobowflex_1_1IO_1_1Handler.html</anchorfile>
      <anchor>a2f677c5376f80e5d397adedf37c622cc</anchor>
      <arglist>(const IO::Handler &amp;handler, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Handler</name>
      <anchorfile>classrobowflex_1_1IO_1_1Handler.html</anchorfile>
      <anchor>a44102c6477dd39913320d2f54cde6092</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadYAMLtoROS</name>
      <anchorfile>classrobowflex_1_1IO_1_1Handler.html</anchorfile>
      <anchor>ac2833ad1ff056153192e11258815595e</anchor>
      <arglist>(const YAML::Node &amp;node, const std::string &amp;prefix=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParam</name>
      <anchorfile>classrobowflex_1_1IO_1_1Handler.html</anchorfile>
      <anchor>a1ec8d085e19a898f3d70bd964dc8d045</anchor>
      <arglist>(const std::string &amp;key, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasParam</name>
      <anchorfile>classrobowflex_1_1IO_1_1Handler.html</anchorfile>
      <anchor>a44c6c6b8384d8e1d97f98190bdbad6bb</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getParam</name>
      <anchorfile>classrobowflex_1_1IO_1_1Handler.html</anchorfile>
      <anchor>aac6e13dd1c4ebfc715490d864ad9c77e</anchor>
      <arglist>(const std::string &amp;key, T &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>const ros::NodeHandle &amp;</type>
      <name>getHandle</name>
      <anchorfile>classrobowflex_1_1IO_1_1Handler.html</anchorfile>
      <anchor>a8663a3da14f2743ccacd0b7521e05087</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classrobowflex_1_1IO_1_1Handler.html</anchorfile>
      <anchor>a398cffcab454fe34c96bb79c23c680c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getNamespace</name>
      <anchorfile>classrobowflex_1_1IO_1_1Handler.html</anchorfile>
      <anchor>aca54f2aa4b4fd07b52c6f380e9da195c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>name_</name>
      <anchorfile>classrobowflex_1_1IO_1_1Handler.html</anchorfile>
      <anchor>adce3f8d4454c4efbf6f920201cbbeaf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>namespace_</name>
      <anchorfile>classrobowflex_1_1IO_1_1Handler.html</anchorfile>
      <anchor>a9dc12e4fef4248535a407f3cde628064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ros::NodeHandle</type>
      <name>nh_</name>
      <anchorfile>classrobowflex_1_1IO_1_1Handler.html</anchorfile>
      <anchor>aa2204200cb5ef2c362d39ec00d561d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::string &gt;</type>
      <name>params_</name>
      <anchorfile>classrobowflex_1_1IO_1_1Handler.html</anchorfile>
      <anchor>a7cdb461c7a29b3d6e7cbab1d6876294a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>UUID</name>
      <anchorfile>classrobowflex_1_1IO_1_1Handler.html</anchorfile>
      <anchor>afa2f8303d4182ccdbeb60cb0fa350a5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::IO::HDF5Data</name>
    <filename>classrobowflex_1_1IO_1_1HDF5Data.html</filename>
    <member kind="function">
      <type></type>
      <name>HDF5Data</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5Data.html</anchorfile>
      <anchor>ac1491abe53cd26b64f99371e41f89dd7</anchor>
      <arglist>(const T &amp;location, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDF5Data</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5Data.html</anchorfile>
      <anchor>aa51b2e7674204aa655c18e6159110e50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; hsize_t &gt;</type>
      <name>getDims</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5Data.html</anchorfile>
      <anchor>ae083d5c3ff58a1eec05eb1a046ea8f31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>getData</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5Data.html</anchorfile>
      <anchor>a23b45724262d818679402adc0e113c15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>getStatus</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5Data.html</anchorfile>
      <anchor>a417bcd1b3122e0e52a34fd070b9461e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5Data.html</anchorfile>
      <anchor>ac9422297f7f4037b15f485e3f521186c</anchor>
      <arglist>(const std::vector&lt; hsize_t &gt; &amp;index) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::tuple&lt; H5::PredType, unsigned int, std::string &gt;</type>
      <name>getDataProperties</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5Data.html</anchorfile>
      <anchor>af311153f4ac891fc022f918f444824f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const H5::DataSet</type>
      <name>dataset_</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5Data.html</anchorfile>
      <anchor>a868568e8226f656c0aca79b56b8338f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const H5::DataSpace</type>
      <name>space_</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5Data.html</anchorfile>
      <anchor>aee3e2fc2c48038144cce891bd31f1b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const H5T_class_t</type>
      <name>type_</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5Data.html</anchorfile>
      <anchor>ae7bfe49968b526e104ce7116ceb9435e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int</type>
      <name>rank_</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5Data.html</anchorfile>
      <anchor>ab7aa327dcff28ad8b49eff9c8e4a4907</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const hsize_t *</type>
      <name>dims_</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5Data.html</anchorfile>
      <anchor>a09d36053782f7ea9a557a589c08f6f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const void *</type>
      <name>data_</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5Data.html</anchorfile>
      <anchor>a3174621eedf6aae2a81cb727a8589f46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::IO::HDF5File</name>
    <filename>classrobowflex_1_1IO_1_1HDF5File.html</filename>
    <member kind="typedef">
      <type>boost::make_recursive_variant&lt; HDF5DataPtr, std::map&lt; std::string, boost::recursive_variant_ &gt; &gt;::type</type>
      <name>Node</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5File.html</anchorfile>
      <anchor>a0691c40015573dc089f0a36d2574bc62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, Node &gt;</type>
      <name>NodeMap</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5File.html</anchorfile>
      <anchor>ad736a2045e84ba0152d17c41ece933fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDF5File</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5File.html</anchorfile>
      <anchor>aba0c7c690b6e20798c6cd9a228d340e5</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>const HDF5DataPtr</type>
      <name>getData</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5File.html</anchorfile>
      <anchor>ad85a0b44894e8226a7fd32be84eb4ec9</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;keys) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; std::string &gt; &gt;</type>
      <name>getKeys</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5File.html</anchorfile>
      <anchor>a76502a090c1c8895b5aa75d098439f4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::vector&lt; std::string &gt;</type>
      <name>listObjects</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5File.html</anchorfile>
      <anchor>a226a8f268bdaada61155a6dd1dcb4ea2</anchor>
      <arglist>(const T &amp;location) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>loadData</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5File.html</anchorfile>
      <anchor>a4c430e8b3ad652179dbbdfbf7861a2a1</anchor>
      <arglist>(Node &amp;node, const T &amp;location, const std::string &amp;name)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const H5::H5File</type>
      <name>file_</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5File.html</anchorfile>
      <anchor>a8fe22f4075c602824a8bf7847b24ccd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node</type>
      <name>data_</name>
      <anchorfile>classrobowflex_1_1IO_1_1HDF5File.html</anchorfile>
      <anchor>a0ac234fefd5ebd557a8020c6df093221</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::IO::PluginManager</name>
    <filename>classrobowflex_1_1IO_1_1PluginManager.html</filename>
    <member kind="function">
      <type></type>
      <name>PluginManager</name>
      <anchorfile>classrobowflex_1_1IO_1_1PluginManager.html</anchorfile>
      <anchor>a05e91d0c45b8ec3200d26442f5fa4916</anchor>
      <arglist>(PluginManager const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classrobowflex_1_1IO_1_1PluginManager.html</anchorfile>
      <anchor>ac9fdd6cc75d714b0c2f7126c7545797a</anchor>
      <arglist>(PluginManager const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>loadPlugin</name>
      <anchorfile>classrobowflex_1_1IO_1_1PluginManager.html</anchorfile>
      <anchor>a3195d2257d0c29d11e0078f912d55185</anchor>
      <arglist>(const std::string &amp;package, const std::string &amp;plugin)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginManager &amp;</type>
      <name>getInstance</name>
      <anchorfile>classrobowflex_1_1IO_1_1PluginManager.html</anchorfile>
      <anchor>ab139cc22f989cc09d53bbbc84c9c4059</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; T &gt;</type>
      <name>load</name>
      <anchorfile>classrobowflex_1_1IO_1_1PluginManager.html</anchorfile>
      <anchor>a25d8e1c44a7e325d812de6a237f27a3c</anchor>
      <arglist>(const std::string &amp;package, const std::string &amp;plugin)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>pluginlib::ClassLoader&lt; T &gt;</type>
      <name>Loader</name>
      <anchorfile>classrobowflex_1_1IO_1_1PluginManager.html</anchorfile>
      <anchor>a28c8f73f718d36826fed45cabca1314c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::shared_ptr&lt; Loader&lt; T &gt; &gt;</type>
      <name>LoaderPtr</name>
      <anchorfile>classrobowflex_1_1IO_1_1PluginManager.html</anchorfile>
      <anchor>a243127b734cbac138d70391525a17a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>pluginlib::ClassLoaderBase</type>
      <name>BaseLoader</name>
      <anchorfile>classrobowflex_1_1IO_1_1PluginManager.html</anchorfile>
      <anchor>af9ede2e4fed2cf6ccb72f2fad73409b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::shared_ptr&lt; BaseLoader &gt;</type>
      <name>BaseLoaderPtr</name>
      <anchorfile>classrobowflex_1_1IO_1_1PluginManager.html</anchorfile>
      <anchor>a8f00b2823e59cfc23ffbb0d73725fed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>PluginManager</name>
      <anchorfile>classrobowflex_1_1IO_1_1PluginManager.html</anchorfile>
      <anchor>a27baf8e4e44ab624bdb8e67d14f242b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>LoaderPtr&lt; T &gt;</type>
      <name>getLoader</name>
      <anchorfile>classrobowflex_1_1IO_1_1PluginManager.html</anchorfile>
      <anchor>a940ce54e3decee64df97951fc6059df7</anchor>
      <arglist>(const std::string &amp;package)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mutex_</name>
      <anchorfile>classrobowflex_1_1IO_1_1PluginManager.html</anchorfile>
      <anchor>a56325b19f33776aacc6e1370c097e184</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::pair&lt; std::string, std::string &gt;, BaseLoaderPtr &gt;</type>
      <name>loaders_</name>
      <anchorfile>classrobowflex_1_1IO_1_1PluginManager.html</anchorfile>
      <anchor>a25ede8ca4dbadb6f316a3259ead5dd2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::IO::RobotBroadcaster</name>
    <filename>classrobowflex_1_1IO_1_1RobotBroadcaster.html</filename>
    <class kind="struct">robowflex::IO::RobotBroadcaster::StaticTransform</class>
    <member kind="function">
      <type></type>
      <name>RobotBroadcaster</name>
      <anchorfile>classrobowflex_1_1IO_1_1RobotBroadcaster.html</anchorfile>
      <anchor>a398063a206d557fd4dfb8d6b78ce8e58</anchor>
      <arglist>(const RobotConstPtr &amp;robot, const std::string &amp;base_frame=&quot;world&quot;, const std::string &amp;name=&quot;robowflex&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RobotBroadcaster</name>
      <anchorfile>classrobowflex_1_1IO_1_1RobotBroadcaster.html</anchorfile>
      <anchor>a861fe7a9cd17449d341edb9b23ba14bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classrobowflex_1_1IO_1_1RobotBroadcaster.html</anchorfile>
      <anchor>a797904bc9a43d330742d0e4fcbde1d86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classrobowflex_1_1IO_1_1RobotBroadcaster.html</anchorfile>
      <anchor>a45f989b2a75d2e77043708a616082d66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStaticTransform</name>
      <anchorfile>classrobowflex_1_1IO_1_1RobotBroadcaster.html</anchorfile>
      <anchor>a38752d49ab7479ed9efd64d75f07694c</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;base, const std::string &amp;target, const RobotPose &amp;tf=RobotPose::Identity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeStaticTransform</name>
      <anchorfile>classrobowflex_1_1IO_1_1RobotBroadcaster.html</anchorfile>
      <anchor>adf04d6bfffac779ebedca70cba67b772</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>update</name>
      <anchorfile>classrobowflex_1_1IO_1_1RobotBroadcaster.html</anchorfile>
      <anchor>a828e239566755637ff32ebb17dbace38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RobotConstPtr</type>
      <name>robot_</name>
      <anchorfile>classrobowflex_1_1IO_1_1RobotBroadcaster.html</anchorfile>
      <anchor>a18d7f258952e591fac3959200e206d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>base_</name>
      <anchorfile>classrobowflex_1_1IO_1_1RobotBroadcaster.html</anchorfile>
      <anchor>a914f199f3104366c6acd90a7afe9381e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>active_</name>
      <anchorfile>classrobowflex_1_1IO_1_1RobotBroadcaster.html</anchorfile>
      <anchor>a2c23a9554bee0d6add04542f22f5e738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>done_</name>
      <anchorfile>classrobowflex_1_1IO_1_1RobotBroadcaster.html</anchorfile>
      <anchor>abb06b712a24231a4fe7379f0a6af4958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>rate_</name>
      <anchorfile>classrobowflex_1_1IO_1_1RobotBroadcaster.html</anchorfile>
      <anchor>a437d662568d0354e9c0ab3e5226bf5e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; std::thread &gt;</type>
      <name>thread_</name>
      <anchorfile>classrobowflex_1_1IO_1_1RobotBroadcaster.html</anchorfile>
      <anchor>a2dcbc4d1b160a5f68b5edb8a0a441867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ros::NodeHandle</type>
      <name>nh_</name>
      <anchorfile>classrobowflex_1_1IO_1_1RobotBroadcaster.html</anchorfile>
      <anchor>a436178421933dc6ce344e33f29829bd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>tf2_ros::TransformBroadcaster</type>
      <name>tf2br_</name>
      <anchorfile>classrobowflex_1_1IO_1_1RobotBroadcaster.html</anchorfile>
      <anchor>ab314a012e95708f84373d56bd8b7f5d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ros::Publisher</type>
      <name>state_pub_</name>
      <anchorfile>classrobowflex_1_1IO_1_1RobotBroadcaster.html</anchorfile>
      <anchor>a8050d226210a320e343887d16eb4dc24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, StaticTransform &gt;</type>
      <name>static_</name>
      <anchorfile>classrobowflex_1_1IO_1_1RobotBroadcaster.html</anchorfile>
      <anchor>a73a4c945acec3ae6b1352561b96fa78d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>robowflex::IO::RobotBroadcaster::StaticTransform</name>
    <filename>structrobowflex_1_1IO_1_1RobotBroadcaster_1_1StaticTransform.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>base</name>
      <anchorfile>structrobowflex_1_1IO_1_1RobotBroadcaster_1_1StaticTransform.html</anchorfile>
      <anchor>abd52e39d24bc3e0a42436dfc9ce11113</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>target</name>
      <anchorfile>structrobowflex_1_1IO_1_1RobotBroadcaster_1_1StaticTransform.html</anchorfile>
      <anchor>a33f591cdf9f1793436a86df0e82601b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RobotPose</type>
      <name>tf</name>
      <anchorfile>structrobowflex_1_1IO_1_1RobotBroadcaster_1_1StaticTransform.html</anchorfile>
      <anchor>a19a08bd12a4d75335da50cb4eb644313</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::IO::RVIZHelper</name>
    <filename>classrobowflex_1_1IO_1_1RVIZHelper.html</filename>
    <member kind="function">
      <type></type>
      <name>RVIZHelper</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>aa38ab1ceea8b4a281399fd21362ae42b</anchor>
      <arglist>(const RobotConstPtr &amp;robot, const std::string &amp;name=&quot;robowflex&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTrajectory</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>af15ed6584a83c9abbdaee0a37e13e448</anchor>
      <arglist>(const planning_interface::MotionPlanResponse &amp;response)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTrajectory</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a05b2f23fb658cf7893c92fe8c0195949</anchor>
      <arglist>(const Trajectory &amp;trajectory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTrajectory</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>ae198ea2bcb73d536def7343c3c887f6b</anchor>
      <arglist>(const robot_trajectory::RobotTrajectoryPtr &amp;trajectory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTrajectory</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a088f0d2947cc9f10aa6e8f0347810650</anchor>
      <arglist>(const moveit_msgs::RobotTrajectory &amp;traj, const moveit::core::RobotState &amp;start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTrajectories</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a4c0f6811fb5873ac5f8a18e14945af4e</anchor>
      <arglist>(const std::vector&lt; robot_trajectory::RobotTrajectoryPtr &gt; &amp;trajectories)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTrajectories</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>aa1769a8fed2faf24be83dc9ca2e85577</anchor>
      <arglist>(const std::vector&lt; planning_interface::MotionPlanResponse &gt; &amp;responses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTrajectories</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a95660978c1b3ebdf51d1001fffcc2b61</anchor>
      <arglist>(const std::vector&lt; TrajectoryPtr &gt; &amp;trajectories)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visualizeState</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a8e6e842789f89d0c75920da0d0a4cce8</anchor>
      <arglist>(const robot_state::RobotStatePtr &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visualizeState</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a642e2b3fdead82923473f007153c9cb2</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visualizeCurrentState</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>aa5820a89f519db0133782d268f046199</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeScene</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a9ecd904c496ce66c8a8616f95b842074</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateScene</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>ac7c28b2d8923603632231b7fee37e4b9</anchor>
      <arglist>(const SceneConstPtr &amp;scene)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatePCD</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>ac5e383908dfc655b13b38697841ebb2c</anchor>
      <arglist>(const sensor_msgs::PointCloud2 &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a12aca0ef7fb501fae5d291479ff0245a</anchor>
      <arglist>(const visualization_msgs::Marker &amp;marker, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a925a07d0d72a2125963d0a0496991c29</anchor>
      <arglist>(double x, double y, double z, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>af1c63b20628b2ef117d341ef3389ad85</anchor>
      <arglist>(const Eigen::Vector3d &amp;point, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTransformMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>af79980de26d6c7ee6ebeea4758b32c12</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;base_frame, const RobotPose &amp;pose, double scale=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGeometryMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>ad627a5e87a0b8bb7dd324f53684ece0e</anchor>
      <arglist>(const std::string &amp;name, const GeometryConstPtr &amp;geometry, const std::string &amp;base_frame, const RobotPose &amp;pose, const Eigen::Vector4d &amp;color=color::WHITE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArrowMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>aac4c659a2e91687d77147ff5b5e447ef</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;base_frame, const RobotPose &amp;pose, const Eigen::Vector4d &amp;color, const Eigen::Vector3d &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTextMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>aeaea9eb2de1539970e3f04ec08c770a5</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;text, const std::string &amp;base_frame, const RobotPose &amp;pose, double height, const Eigen::Vector4d &amp;color=color::WHITE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLineMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a2bc6b7fdc40c134035a734cc2b6f1192</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; Eigen::Vector3d &gt; &amp;points, const std::vector&lt; Eigen::Vector4d &gt; &amp;colors, double scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>ae5f38039a544f4da7280f9cac531dc24</anchor>
      <arglist>(const std::string &amp;name, const MotionRequestBuilder &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>aaac03a0831140090fe3ae914e61685d4</anchor>
      <arglist>(const std::string &amp;name, const moveit_msgs::MotionPlanRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllMarkers</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a1af3d8ddccea836467ac3b383b830e62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a158c86f3d75a9b45ff10bcddf7d81835</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateMarkers</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a947e2ed5b8132f76bb3fd875f7d978b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>fillMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>ab371a63b03592dfef2594873f59824c6</anchor>
      <arglist>(visualization_msgs::Marker &amp;marker, const std::string &amp;base_frame, const RobotPose &amp;pose, const Eigen::Vector4d &amp;color, const Eigen::Vector3d &amp;scale) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RobotConstPtr</type>
      <name>robot_</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a93145ba9f05b0aa27c925b25b095014c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ros::NodeHandle</type>
      <name>nh_</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a789db3404b017326b5271e65b38e3c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ros::Publisher</type>
      <name>marker_pub_</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a1ff5ca3b2a449f5b1f60e8e3432aeb0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ros::Publisher</type>
      <name>trajectory_pub_</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a69b398440a32dca875f3951d6a876c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ros::Publisher</type>
      <name>scene_pub_</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a6714790347a2f536752a5fa2fe1e239a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ros::Publisher</type>
      <name>pcd_pub_</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a3813578c39d8e121d27b3b1749232fe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ros::Publisher</type>
      <name>state_pub_</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>ab54049bc81139ffca88c4bfa13e25345</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::multimap&lt; std::string, visualization_msgs::Marker &gt;</type>
      <name>markers_</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a2f34ec6c15e8212eaf02335744d6e0d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTrajectory</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>af15ed6584a83c9abbdaee0a37e13e448</anchor>
      <arglist>(const planning_interface::MotionPlanResponse &amp;response)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTrajectory</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a05b2f23fb658cf7893c92fe8c0195949</anchor>
      <arglist>(const Trajectory &amp;trajectory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTrajectory</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>ae198ea2bcb73d536def7343c3c887f6b</anchor>
      <arglist>(const robot_trajectory::RobotTrajectoryPtr &amp;trajectory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTrajectory</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a088f0d2947cc9f10aa6e8f0347810650</anchor>
      <arglist>(const moveit_msgs::RobotTrajectory &amp;traj, const moveit::core::RobotState &amp;start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTrajectories</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a4c0f6811fb5873ac5f8a18e14945af4e</anchor>
      <arglist>(const std::vector&lt; robot_trajectory::RobotTrajectoryPtr &gt; &amp;trajectories)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTrajectories</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>aa1769a8fed2faf24be83dc9ca2e85577</anchor>
      <arglist>(const std::vector&lt; planning_interface::MotionPlanResponse &gt; &amp;responses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTrajectories</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a95660978c1b3ebdf51d1001fffcc2b61</anchor>
      <arglist>(const std::vector&lt; TrajectoryPtr &gt; &amp;trajectories)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visualizeState</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a8e6e842789f89d0c75920da0d0a4cce8</anchor>
      <arglist>(const robot_state::RobotStatePtr &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visualizeState</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a642e2b3fdead82923473f007153c9cb2</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visualizeCurrentState</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>aa5820a89f519db0133782d268f046199</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeScene</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a9ecd904c496ce66c8a8616f95b842074</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateScene</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>ac7c28b2d8923603632231b7fee37e4b9</anchor>
      <arglist>(const SceneConstPtr &amp;scene)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatePCD</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>ac5e383908dfc655b13b38697841ebb2c</anchor>
      <arglist>(const sensor_msgs::PointCloud2 &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a12aca0ef7fb501fae5d291479ff0245a</anchor>
      <arglist>(const visualization_msgs::Marker &amp;marker, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a925a07d0d72a2125963d0a0496991c29</anchor>
      <arglist>(double x, double y, double z, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>af1c63b20628b2ef117d341ef3389ad85</anchor>
      <arglist>(const Eigen::Vector3d &amp;point, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTransformMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>af79980de26d6c7ee6ebeea4758b32c12</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;base_frame, const RobotPose &amp;pose, double scale=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGeometryMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>ad627a5e87a0b8bb7dd324f53684ece0e</anchor>
      <arglist>(const std::string &amp;name, const GeometryConstPtr &amp;geometry, const std::string &amp;base_frame, const RobotPose &amp;pose, const Eigen::Vector4d &amp;color=color::WHITE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArrowMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>aac4c659a2e91687d77147ff5b5e447ef</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;base_frame, const RobotPose &amp;pose, const Eigen::Vector4d &amp;color, const Eigen::Vector3d &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTextMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>aeaea9eb2de1539970e3f04ec08c770a5</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;text, const std::string &amp;base_frame, const RobotPose &amp;pose, double height, const Eigen::Vector4d &amp;color=color::WHITE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLineMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a2bc6b7fdc40c134035a734cc2b6f1192</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; Eigen::Vector3d &gt; &amp;points, const std::vector&lt; Eigen::Vector4d &gt; &amp;colors, double scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>ae5f38039a544f4da7280f9cac531dc24</anchor>
      <arglist>(const std::string &amp;name, const MotionRequestBuilder &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>aaac03a0831140090fe3ae914e61685d4</anchor>
      <arglist>(const std::string &amp;name, const moveit_msgs::MotionPlanRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllMarkers</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a1af3d8ddccea836467ac3b383b830e62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMarker</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a158c86f3d75a9b45ff10bcddf7d81835</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateMarkers</name>
      <anchorfile>classrobowflex_1_1IO_1_1RVIZHelper.html</anchorfile>
      <anchor>a947e2ed5b8132f76bb3fd875f7d978b2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::IO::RVIZHelperConstPtr</name>
    <filename>classrobowflex_1_1IO_1_1RVIZHelperConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::IO::RVIZHelperPtr</name>
    <filename>classrobowflex_1_1IO_1_1RVIZHelperPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::JSONPlanDataSetOutputter</name>
    <filename>classrobowflex_1_1JSONPlanDataSetOutputter.html</filename>
    <base>robowflex::PlanDataSetOutputter</base>
    <member kind="function">
      <type></type>
      <name>JSONPlanDataSetOutputter</name>
      <anchorfile>classrobowflex_1_1JSONPlanDataSetOutputter.html</anchorfile>
      <anchor>a4fc133158b55a12a9aca46cc8899314a</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JSONPlanDataSetOutputter</name>
      <anchorfile>classrobowflex_1_1JSONPlanDataSetOutputter.html</anchorfile>
      <anchor>abca95c579008ea0fc70a871018b69bc2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>classrobowflex_1_1JSONPlanDataSetOutputter.html</anchorfile>
      <anchor>af00e714038315f0fb79cfd39edc254cc</anchor>
      <arglist>(const PlanDataSet &amp;results) override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>is_init_</name>
      <anchorfile>classrobowflex_1_1JSONPlanDataSetOutputter.html</anchorfile>
      <anchor>a98ea00fadcfefb5b8352195cef55da66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>file_</name>
      <anchorfile>classrobowflex_1_1JSONPlanDataSetOutputter.html</anchorfile>
      <anchor>ac89834fc0dde95f047bba2fa4840e897</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::ofstream</type>
      <name>outfile_</name>
      <anchorfile>classrobowflex_1_1JSONPlanDataSetOutputter.html</anchorfile>
      <anchor>ae6e1e4f6f9a7f6fedf27aaaa3601a0a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::MotionRequestBuilder</name>
    <filename>classrobowflex_1_1MotionRequestBuilder.html</filename>
    <base>robowflex::ID</base>
    <member kind="function">
      <type></type>
      <name>MotionRequestBuilder</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>af5126d83c1529441f7b4e159a5e40144</anchor>
      <arglist>(const RobotConstPtr &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MotionRequestBuilder</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a3bc03548a0cf0603964b8e3410b475d4</anchor>
      <arglist>(const RobotConstPtr &amp;robot, const std::string &amp;group_name, const std::string &amp;planner_config=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MotionRequestBuilder</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a359391a086128be5b1392b060f60522f</anchor>
      <arglist>(const PlannerConstPtr &amp;planner, const std::string &amp;group_name, const std::string &amp;planner_config=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MotionRequestBuilder</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a70cfcb882d00cac430b6a22f695d3c82</anchor>
      <arglist>(const MotionRequestBuilder &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MotionRequestBuilderPtr</type>
      <name>clone</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a4be5d995e665824f64e05e007887ef3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>acc6f08b4156e9e7a58327f9484f306cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlanningGroup</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>ad14c35b31a3170c89f670db96f0d4ad4</anchor>
      <arglist>(const std::string &amp;group_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlanner</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>adc4304c3a007f311b2a336f64983074a</anchor>
      <arglist>(const PlannerConstPtr &amp;planner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartConfiguration</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a85ba3502e0ccadad2226415c84153d3e</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;joints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartConfiguration</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a2fcb0b5873d96398f17ed1429c2a71ab</anchor>
      <arglist>(const robot_state::RobotState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartConfiguration</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a74bd83627cc405702c14f890884475f5</anchor>
      <arglist>(const robot_state::RobotStatePtr &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useSceneStateAsStart</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a0dbf59828be13d1086441c85768afd5f</anchor>
      <arglist>(const SceneConstPtr &amp;scene)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>attachObjectToStart</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a699b712e8d9dc0e06d27c770fdf058ed</anchor>
      <arglist>(ScenePtr scene, const std::string &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>attachObjectToStartConst</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>aa5ab3998d43833dcc44d1611c44b589e</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const std::string &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPathPoseConstraint</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a61721e490554f85360b0a500aabee670</anchor>
      <arglist>(const std::string &amp;ee_name, const std::string &amp;base_name, const RobotPose &amp;pose, const GeometryConstPtr &amp;geometry, const Eigen::Quaterniond &amp;orientation, const Eigen::Vector3d &amp;tolerances)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPathPositionConstraint</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>af9dfb6da75f457d4a6f791adf32d8f13</anchor>
      <arglist>(const std::string &amp;ee_name, const std::string &amp;base_name, const RobotPose &amp;pose, const GeometryConstPtr &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPathOrientationConstraint</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a528a97f8c4b17b92803ccd4fe39d52e6</anchor>
      <arglist>(const std::string &amp;ee_name, const std::string &amp;base_name, const Eigen::Quaterniond &amp;orientation, const Eigen::Vector3d &amp;tolerances)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setConfig</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a786e67b08f9873bab228de0fe759816b</anchor>
      <arglist>(const std::string &amp;requested_config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllowedPlanningTime</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a2124a6c488484ef2ec0097e06e56e6ad</anchor>
      <arglist>(double allowed_planning_time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumPlanningAttempts</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a3e37eb660e1ca9179586f529645ecaf8</anchor>
      <arglist>(unsigned int num_planning_attempts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkspaceBounds</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>ab3668987415bf45930a2438ae3935c4b</anchor>
      <arglist>(const moveit_msgs::WorkspaceParameters &amp;wp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkspaceBounds</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a1832602b77c5e1e98e247b95e74cbfd3</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;min, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>swapStartWithGoal</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a0cdb1bcff2be8959835049b78d607ee5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>planning_interface::MotionPlanRequest &amp;</type>
      <name>getRequest</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>ad189a2de452be4c113a35d67a21e9875</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const planning_interface::MotionPlanRequest &amp;</type>
      <name>getRequestConst</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>af2049a8b3da4b46935a61bc5220e008d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>robot_state::RobotStatePtr</type>
      <name>getStartConfiguration</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a861e675c921ca443735e4e043956ed6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>robot_state::RobotStatePtr</type>
      <name>getGoalConfiguration</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>afd15609de4c66599d2728ce2267c7e17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::Constraints &amp;</type>
      <name>getPathConstraints</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a3c0124b3c45dc3087508a83fff616182</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RobotConstPtr &amp;</type>
      <name>getRobot</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a94101cbd6ce876aa084726073f879b6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PlannerConstPtr &amp;</type>
      <name>getPlanner</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a95e3a8584c5858c02bb92f8567b5ccbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPlanningGroup</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a9898d1b03a8d96f3e3476df9e8105132</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPlannerConfig</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a78a7a1c470264423bbfb57b2c34c2592</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYAMLFile</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a0fa97528d4771ad19d895052c379ea7c</anchor>
      <arglist>(const std::string &amp;file) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromYAMLFile</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a8a7016a3777f7843da0738157a17a362</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const RobotConstPtr</type>
      <name>robot_</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a4609dd3215c6c06624730c1c97a1bbb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PlannerConstPtr</type>
      <name>planner_</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a451bbd757f4860d8ad3d56c8db021be3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>group_name_</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a688e2c4f49a4d414aa3ad6969456509c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>robot_model::JointModelGroup *</type>
      <name>jmg_</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a2f9f63759023ac15058d571a438809be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>planning_interface::MotionPlanRequest</type>
      <name>request_</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a11d30567db3d5170584c2c1b20b37a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_CONFIG</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a6c44c8337f5d5659d8591e9673658b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const robot_state::RobotState &amp;)&gt;</type>
      <name>ConfigurationValidityCallback</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a5f8b8f65f863f2127ed7a93cc69a782c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalConfiguration</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>aab332e29f4578f9e0dbb32ca4a104e1c</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;joints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalConfiguration</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a07e3abcac38a44c03e4814b2a82c4f8c</anchor>
      <arglist>(const robot_state::RobotStatePtr &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalConfiguration</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a8e006609fe39635282909a6a5ac8a843</anchor>
      <arglist>(const robot_state::RobotState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalFromIKQuery</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a181b144f2e32e7e65b8f09ff978d827b</anchor>
      <arglist>(const Robot::IKQuery &amp;query)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalPose</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a076c32bf25097b7a2123c2a8bcd5ad7d</anchor>
      <arglist>(const std::string &amp;ee_name, const std::string &amp;base_name, const RobotPose &amp;pose, double tolerance=0.001)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalRegion</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>ad255e53c88fdf8b4b20a034155434e9a</anchor>
      <arglist>(const std::string &amp;ee_name, const std::string &amp;base_name, const RobotPose &amp;pose, const GeometryConstPtr &amp;geometry, const Eigen::Quaterniond &amp;orientation, const Eigen::Vector3d &amp;tolerances)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalRotaryTile</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>ad5bb2d24e80feab8058c8f87215e0422</anchor>
      <arglist>(const std::string &amp;ee_name, const std::string &amp;base_name, const RobotPose &amp;pose, const GeometryConstPtr &amp;geometry, const Eigen::Quaterniond &amp;orientation, const Eigen::Vector3d &amp;tolerances, const RobotPose &amp;offset, const Eigen::Vector3d &amp;axis, unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCylinderSideGrasp</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a32701105e7b006f5d129c2b6ea7b5a9a</anchor>
      <arglist>(const std::string &amp;ee_name, const std::string &amp;base_name, const RobotPose &amp;pose, const GeometryConstPtr &amp;cylinder, double distance, double depth, unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalConfiguration</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>ae3ff76382121eb61c41931a6bfa17cef</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;joints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalConfiguration</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a4da8877fbbfc74bba310760e93c13412</anchor>
      <arglist>(const robot_state::RobotStatePtr &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalConfiguration</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a7ec31a3b72b88a9ee906c6a477eec377</anchor>
      <arglist>(const robot_state::RobotState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalFromIKQuery</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>aeb0e30adb15c2ccef1771d6db9d3886f</anchor>
      <arglist>(const Robot::IKQuery &amp;query)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalPose</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a86d65ad791b62f2cd756e8088d0a56ea</anchor>
      <arglist>(const std::string &amp;ee_name, const std::string &amp;base_name, const RobotPose &amp;pose, double tolerance=0.001)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalRegion</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>ae049895d0563dbb858c46f63e030f99e</anchor>
      <arglist>(const std::string &amp;ee_name, const std::string &amp;base_name, const RobotPose &amp;pose, const GeometryConstPtr &amp;geometry, const Eigen::Quaterniond &amp;orientation, const Eigen::Vector3d &amp;tolerances)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>precomputeGoalConfigurations</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>aa52f6f62970d6763df5be0cc1ce51722</anchor>
      <arglist>(std::size_t n_samples, const ScenePtr &amp;scene, const ConfigurationValidityCallback &amp;callback={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearGoals</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a2b2aaf7ff2bc3d5eddd16ad0632e0459</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>acc6f08b4156e9e7a58327f9484f306cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlanningGroup</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>ad14c35b31a3170c89f670db96f0d4ad4</anchor>
      <arglist>(const std::string &amp;group_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlanner</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>adc4304c3a007f311b2a336f64983074a</anchor>
      <arglist>(const PlannerConstPtr &amp;planner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartConfiguration</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a85ba3502e0ccadad2226415c84153d3e</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;joints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartConfiguration</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a2fcb0b5873d96398f17ed1429c2a71ab</anchor>
      <arglist>(const robot_state::RobotState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartConfiguration</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a74bd83627cc405702c14f890884475f5</anchor>
      <arglist>(const robot_state::RobotStatePtr &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useSceneStateAsStart</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a0dbf59828be13d1086441c85768afd5f</anchor>
      <arglist>(const SceneConstPtr &amp;scene)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>attachObjectToStart</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a699b712e8d9dc0e06d27c770fdf058ed</anchor>
      <arglist>(ScenePtr scene, const std::string &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>attachObjectToStartConst</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>aa5ab3998d43833dcc44d1611c44b589e</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const std::string &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPathPoseConstraint</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a61721e490554f85360b0a500aabee670</anchor>
      <arglist>(const std::string &amp;ee_name, const std::string &amp;base_name, const RobotPose &amp;pose, const GeometryConstPtr &amp;geometry, const Eigen::Quaterniond &amp;orientation, const Eigen::Vector3d &amp;tolerances)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPathPositionConstraint</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>af9dfb6da75f457d4a6f791adf32d8f13</anchor>
      <arglist>(const std::string &amp;ee_name, const std::string &amp;base_name, const RobotPose &amp;pose, const GeometryConstPtr &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPathOrientationConstraint</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a528a97f8c4b17b92803ccd4fe39d52e6</anchor>
      <arglist>(const std::string &amp;ee_name, const std::string &amp;base_name, const Eigen::Quaterniond &amp;orientation, const Eigen::Vector3d &amp;tolerances)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setConfig</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a786e67b08f9873bab228de0fe759816b</anchor>
      <arglist>(const std::string &amp;requested_config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllowedPlanningTime</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a2124a6c488484ef2ec0097e06e56e6ad</anchor>
      <arglist>(double allowed_planning_time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumPlanningAttempts</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a3e37eb660e1ca9179586f529645ecaf8</anchor>
      <arglist>(unsigned int num_planning_attempts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkspaceBounds</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>ab3668987415bf45930a2438ae3935c4b</anchor>
      <arglist>(const moveit_msgs::WorkspaceParameters &amp;wp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkspaceBounds</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a1832602b77c5e1e98e247b95e74cbfd3</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;min, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>swapStartWithGoal</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a0cdb1bcff2be8959835049b78d607ee5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>planning_interface::MotionPlanRequest &amp;</type>
      <name>getRequest</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>ad189a2de452be4c113a35d67a21e9875</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const planning_interface::MotionPlanRequest &amp;</type>
      <name>getRequestConst</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>af2049a8b3da4b46935a61bc5220e008d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>robot_state::RobotStatePtr</type>
      <name>getStartConfiguration</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a861e675c921ca443735e4e043956ed6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>robot_state::RobotStatePtr</type>
      <name>getGoalConfiguration</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>afd15609de4c66599d2728ce2267c7e17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::Constraints &amp;</type>
      <name>getPathConstraints</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a3c0124b3c45dc3087508a83fff616182</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RobotConstPtr &amp;</type>
      <name>getRobot</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a94101cbd6ce876aa084726073f879b6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PlannerConstPtr &amp;</type>
      <name>getPlanner</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a95e3a8584c5858c02bb92f8567b5ccbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPlanningGroup</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a9898d1b03a8d96f3e3476df9e8105132</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPlannerConfig</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a78a7a1c470264423bbfb57b2c34c2592</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYAMLFile</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a0fa97528d4771ad19d895052c379ea7c</anchor>
      <arglist>(const std::string &amp;file) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromYAMLFile</name>
      <anchorfile>classrobowflex_1_1MotionRequestBuilder.html</anchorfile>
      <anchor>a8a7016a3777f7843da0738157a17a362</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::MotionRequestBuilderConstPtr</name>
    <filename>classrobowflex_1_1MotionRequestBuilderConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::MotionRequestBuilderPtr</name>
    <filename>classrobowflex_1_1MotionRequestBuilderPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::movegroup::MoveGroupHelper</name>
    <filename>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</filename>
    <class kind="struct">robowflex::movegroup::MoveGroupHelper::Action</class>
    <member kind="typedef">
      <type>std::function&lt; void(Action &amp;)&gt;</type>
      <name>ResultCallback</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>a371a7fb1b1b5a1adf4e6995dd457b859</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MoveGroupHelper</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>a0c14dc5175bb82a10f94ac2068e9ee10</anchor>
      <arglist>(const std::string &amp;move_group=MOVE_GROUP)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MoveGroupHelper</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>ab3ad0daffd247637d701a3a84422df1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResultCallback</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>a970bf941c0e5568294a078a750d1bce1</anchor>
      <arglist>(const ResultCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>executeTrajectory</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>a674191a847e98283753bc0d23f7e251e</anchor>
      <arglist>(const robot_trajectory::RobotTrajectory &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pullState</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>ab4371710699c293a0bb5ef95d7fcdb46</anchor>
      <arglist>(RobotPtr robot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pullScene</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>ab32dbdfc991cf9180fefa17920db0e80</anchor>
      <arglist>(ScenePtr scene)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pushScene</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>a10b21dcf26d5bc6ac007303a4a9be265</anchor>
      <arglist>(const SceneConstPtr &amp;scene)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clearOctomap</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>afa6396a81225ade4d30fe78118ae30df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>moveGroupGoalCallback</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>a64ea8f29252c8def019fec0518e51db0</anchor>
      <arglist>(const moveit_msgs::MoveGroupActionGoal &amp;msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>moveGroupResultCallback</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>aa460b8e53190d65264b1550ad97f0df4</anchor>
      <arglist>(const moveit_msgs::MoveGroupActionResult &amp;msg)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ros::NodeHandle</type>
      <name>nh_</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>abc96e5c11b5b338f5b21d5ff1c64ec79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ros::Subscriber</type>
      <name>goal_sub_</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>a8529bc15498cb313ecf4c65f63e6e93c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ros::Subscriber</type>
      <name>result_sub_</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>a70fc91aadc3960867b1cfee4306ec57c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ros::ServiceClient</type>
      <name>gpsc_</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>a20fbb3989810a7811793ffea77072fc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ros::ServiceClient</type>
      <name>apsc_</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>af9be882e19c6a472a4c1a4b7e7da1815</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ros::ServiceClient</type>
      <name>co_</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>a393af5a4b27d7e0d1d907446e2c35b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>actionlib::SimpleActionClient&lt; moveit_msgs::ExecuteTrajectoryAction &gt;</type>
      <name>eac_</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>abf97f68cb1383db63ed8e30a5a7b7d4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ResultCallback</type>
      <name>callback_</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>a1f9719a7523dbb1009b5bde28c1a2ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, Action &gt;</type>
      <name>requests_</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>ae086348eb164103f1e08f51bf18b67c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RobotPtr</type>
      <name>robot_</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>a39020060a55295de1599ee75ec3535ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>MOVE_GROUP</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>af785f6ae98abc7954c79263a787a7fa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>GET_SCENE</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>acd02e61e67c5e2b126739359ac1d6312</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>APPLY_SCENE</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>ae2293a330de6858a7b26a9b1f1c8bdf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>CLEAR_OCTOMAP</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>abcfa2f8098a42ffdd3e0a9bd17abbfe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>EXECUTE</name>
      <anchorfile>classrobowflex_1_1movegroup_1_1MoveGroupHelper.html</anchorfile>
      <anchor>a046fe8f5c7cfb168bdc361a5a6d3a745</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>robowflex::movegroup::MoveGroupHelper::Action</name>
    <filename>structrobowflex_1_1movegroup_1_1MoveGroupHelper_1_1Action.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>fromYAMLFile</name>
      <anchorfile>structrobowflex_1_1movegroup_1_1MoveGroupHelper_1_1Action.html</anchorfile>
      <anchor>a9cdfc304956f8609abeb2f7622c4464e</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYAMLFile</name>
      <anchorfile>structrobowflex_1_1movegroup_1_1MoveGroupHelper_1_1Action.html</anchorfile>
      <anchor>a764505f3d3ffedefbfacd8144a2a27b1</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>id</name>
      <anchorfile>structrobowflex_1_1movegroup_1_1MoveGroupHelper_1_1Action.html</anchorfile>
      <anchor>ae5d945b5cfd8c56dabad9da028311a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ScenePtr</type>
      <name>scene</name>
      <anchorfile>structrobowflex_1_1movegroup_1_1MoveGroupHelper_1_1Action.html</anchorfile>
      <anchor>ac6ad3e11d4f50edf883c5f7676524617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>moveit_msgs::MotionPlanRequest</type>
      <name>request</name>
      <anchorfile>structrobowflex_1_1movegroup_1_1MoveGroupHelper_1_1Action.html</anchorfile>
      <anchor>a372dab226d581d9b0b5a77d224625077</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>success</name>
      <anchorfile>structrobowflex_1_1movegroup_1_1MoveGroupHelper_1_1Action.html</anchorfile>
      <anchor>a049f6ff314c303872ee1df012e1446b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>time</name>
      <anchorfile>structrobowflex_1_1movegroup_1_1MoveGroupHelper_1_1Action.html</anchorfile>
      <anchor>abca8672dbd6ad06ec7397ce09a00dfa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>moveit_msgs::RobotTrajectory</type>
      <name>trajectory</name>
      <anchorfile>structrobowflex_1_1movegroup_1_1MoveGroupHelper_1_1Action.html</anchorfile>
      <anchor>ade9c29ff8d841d06b2c63a4547b38844</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::Cob4OMPLPipelinePlanner</name>
    <filename>classrobowflex_1_1OMPL_1_1Cob4OMPLPipelinePlanner.html</filename>
    <base>robowflex::OMPL::OMPLPipelinePlanner</base>
    <member kind="function">
      <type></type>
      <name>Cob4OMPLPipelinePlanner</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1Cob4OMPLPipelinePlanner.html</anchorfile>
      <anchor>a4a43b2659bba3672beb5551b47c1c330</anchor>
      <arglist>(const RobotPtr &amp;robot, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1Cob4OMPLPipelinePlanner.html</anchorfile>
      <anchor>a073d928c37233f3975dea9691172f477</anchor>
      <arglist>(const Settings &amp;settings=Settings(), const std::vector&lt; std::string &gt; &amp;adapters=DEFAULT_ADAPTERS)</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_CONFIG</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1Cob4OMPLPipelinePlanner.html</anchorfile>
      <anchor>aaf899c3c8d8f7c1312fa41d0f755ad52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>RESOURCE_CONFIG</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1Cob4OMPLPipelinePlanner.html</anchorfile>
      <anchor>a43d27ddb8ff2df50246392791a86c8bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::Cob4OMPLPipelinePlannerConstPtr</name>
    <filename>classrobowflex_1_1OMPL_1_1Cob4OMPLPipelinePlannerConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::Cob4OMPLPipelinePlannerPtr</name>
    <filename>classrobowflex_1_1OMPL_1_1Cob4OMPLPipelinePlannerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::FetchOMPLPipelinePlanner</name>
    <filename>classrobowflex_1_1OMPL_1_1FetchOMPLPipelinePlanner.html</filename>
    <base>robowflex::OMPL::OMPLPipelinePlanner</base>
    <member kind="function">
      <type></type>
      <name>FetchOMPLPipelinePlanner</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1FetchOMPLPipelinePlanner.html</anchorfile>
      <anchor>ae1cf6fd4c1252bfd48aca0b7e98ffd15</anchor>
      <arglist>(const RobotPtr &amp;robot, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1FetchOMPLPipelinePlanner.html</anchorfile>
      <anchor>aafa601ce537f62301345b6d7568b7a72</anchor>
      <arglist>(const Settings &amp;settings=Settings(), const std::vector&lt; std::string &gt; &amp;adapters=DEFAULT_ADAPTERS)</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_CONFIG</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1FetchOMPLPipelinePlanner.html</anchorfile>
      <anchor>abf4dfc0b1b9dcff90f27d83de49bf730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>RESOURCE_CONFIG</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1FetchOMPLPipelinePlanner.html</anchorfile>
      <anchor>a8e8e31d956060629796951824fcba302</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::FetchOMPLPipelinePlannerConstPtr</name>
    <filename>classrobowflex_1_1OMPL_1_1FetchOMPLPipelinePlannerConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::FetchOMPLPipelinePlannerPtr</name>
    <filename>classrobowflex_1_1OMPL_1_1FetchOMPLPipelinePlannerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::OMPLInterfacePlanner</name>
    <filename>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</filename>
    <base>robowflex::Planner</base>
    <member kind="typedef">
      <type>std::function&lt; void(const ompl_interface::ModelBasedPlanningContextPtr &amp;context, const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request)&gt;</type>
      <name>PrePlanCallback</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>ac45defdfd45f2a778a70cbc372114b71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OMPLInterfacePlanner</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>aed3cb24ee55046ce3033bba0256a0203</anchor>
      <arglist>(const RobotPtr &amp;robot, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OMPLInterfacePlanner</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>a34f4005c3c3e4f25cd883ef1d5d44ac0</anchor>
      <arglist>(OMPLInterfacePlanner const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>acf43c03a5153b614b1e6217ebd386c68</anchor>
      <arglist>(OMPLInterfacePlanner const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>a7a89f91ee9543fe0e075f1bbffd6922a</anchor>
      <arglist>(const std::string &amp;config_file=&quot;&quot;, const OMPL::Settings settings=Settings())</arglist>
    </member>
    <member kind="function">
      <type>planning_interface::MotionPlanResponse</type>
      <name>plan</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>a87749080b4e88fbeb0d4169121ebde90</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request) override</arglist>
    </member>
    <member kind="function">
      <type>ompl_interface::ModelBasedPlanningContextPtr</type>
      <name>getPlanningContext</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>a8266418fa75b46e3db6b749157c0fedb</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request) const</arglist>
    </member>
    <member kind="function">
      <type>ompl::geometric::SimpleSetupPtr</type>
      <name>getLastSimpleSetup</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>ae043bce4f194459944e3a1fdba475659</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshContext</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>ab82765b26813e74da488663484957779</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request, bool force=false) const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, Planner::ProgressProperty &gt;</type>
      <name>getProgressProperties</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>a917d88816a13ebfd0dfe5993359f416f</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request) const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getPlannerConfigs</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>ad872d9b21d7429252d9c7ddeb22159c6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preRun</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>a595b03639979010f67ac708db661a468</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request) override</arglist>
    </member>
    <member kind="function">
      <type>ompl_interface::OMPLInterface &amp;</type>
      <name>getInterface</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>a0e92ddf524285310ab3ac1eb2762ce50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrePlanCallback</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>a271e2b1099ded8e5ae594083fccb3063</anchor>
      <arglist>(const PrePlanCallback &amp;prePlanCallback)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; ompl_interface::OMPLInterface &gt;</type>
      <name>interface_</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>aae016baa519b4f1426862d64079f9296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::string &gt;</type>
      <name>configs_</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>a0e28fc8eb79d051b27bd2d027680d683</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>hybridize_</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>a080e0caeee76b0f49eaafa332ecac00c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>interpolate_</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>ac385e5056f1a35844d9106f4157332a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ID::Key</type>
      <name>last_scene_id_</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>a5910868506a527d680927e8e74fded5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>last_request_hash_</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>a0ce47f854db510cfab6db1659a534c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ompl_interface::ModelBasedPlanningContextPtr</type>
      <name>context_</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>ae4c56d1ea76856282cd7f9fe91581e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ompl::geometric::SimpleSetupPtr</type>
      <name>ss_</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>a7064fb6c486837dfb4570d51f0defa67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PrePlanCallback</type>
      <name>pre_plan_callback_</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLInterfacePlanner.html</anchorfile>
      <anchor>a7285b07317b900c6dcd6542d367d6315</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::OMPLInterfacePlannerConstPtr</name>
    <filename>classrobowflex_1_1OMPL_1_1OMPLInterfacePlannerConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::OMPLInterfacePlannerPtr</name>
    <filename>classrobowflex_1_1OMPL_1_1OMPLInterfacePlannerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::OMPLPipelinePlanner</name>
    <filename>classrobowflex_1_1OMPL_1_1OMPLPipelinePlanner.html</filename>
    <base>robowflex::PipelinePlanner</base>
    <member kind="function">
      <type></type>
      <name>OMPLPipelinePlanner</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLPipelinePlanner.html</anchorfile>
      <anchor>a226afb6ec94fbdf09e23cdebe0226d18</anchor>
      <arglist>(const RobotPtr &amp;robot, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OMPLPipelinePlanner</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLPipelinePlanner.html</anchorfile>
      <anchor>af4afedd4884271f255cd1b808638a491</anchor>
      <arglist>(OMPLPipelinePlanner const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLPipelinePlanner.html</anchorfile>
      <anchor>a608b8216b621842274b4c9fc2d8b46d4</anchor>
      <arglist>(OMPLPipelinePlanner const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLPipelinePlanner.html</anchorfile>
      <anchor>ac47f87595636ca0f7b6c0e189ad58a9d</anchor>
      <arglist>(const std::string &amp;config_file=&quot;&quot;, const Settings &amp;settings=Settings(), const std::string &amp;plugin=DEFAULT_PLUGIN, const std::vector&lt; std::string &gt; &amp;adapters=DEFAULT_ADAPTERS)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getPlannerConfigs</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLPipelinePlanner.html</anchorfile>
      <anchor>aa3db4a0295afef434733faeee101ac69</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_PLUGIN</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLPipelinePlanner.html</anchorfile>
      <anchor>a66c19012c5ad5fb6cafdefde47b9bc99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::vector&lt; std::string &gt;</type>
      <name>DEFAULT_ADAPTERS</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLPipelinePlanner.html</anchorfile>
      <anchor>a6aff3c16c7c1c62d37be46d2dc4f9003</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::string &gt;</type>
      <name>configs_</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLPipelinePlanner.html</anchorfile>
      <anchor>a2379db965cd98f3b0860fce49eaf016c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::OMPLPipelinePlannerConstPtr</name>
    <filename>classrobowflex_1_1OMPL_1_1OMPLPipelinePlannerConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::OMPLPipelinePlannerPtr</name>
    <filename>classrobowflex_1_1OMPL_1_1OMPLPipelinePlannerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::OMPLTrajectory</name>
    <filename>classrobowflex_1_1OMPL_1_1OMPLTrajectory.html</filename>
    <base>robowflex::Trajectory</base>
    <member kind="function">
      <type></type>
      <name>OMPLTrajectory</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLTrajectory.html</anchorfile>
      <anchor>aefd249f2bb38f456b85ca3d0e8ec7a4c</anchor>
      <arglist>(const RobotConstPtr &amp;robot, const std::string &amp;group)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OMPLTrajectory</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLTrajectory.html</anchorfile>
      <anchor>a739e7bab43dbfff31db2770faa4a9e58</anchor>
      <arglist>(robot_trajectory::RobotTrajectory &amp;trajectory)</arglist>
    </member>
    <member kind="function">
      <type>ompl::geometric::PathGeometric</type>
      <name>toOMPLPath</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLTrajectory.html</anchorfile>
      <anchor>a9a35d7b4ba5a86289a033b69f699afb3</anchor>
      <arglist>(const ompl::geometric::SimpleSetupPtr &amp;ss)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromOMPLPath</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1OMPLTrajectory.html</anchorfile>
      <anchor>a7ce2df20b9fb59e37877d589f8d2eb14</anchor>
      <arglist>(const robot_state::RobotState &amp;reference_state, const ompl::geometric::PathGeometric &amp;path)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::OMPLTrajectoryConstPtr</name>
    <filename>classrobowflex_1_1OMPL_1_1OMPLTrajectoryConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::OMPLTrajectoryPtr</name>
    <filename>classrobowflex_1_1OMPL_1_1OMPLTrajectoryPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::R2OMPLPipelinePlanner</name>
    <filename>classrobowflex_1_1OMPL_1_1R2OMPLPipelinePlanner.html</filename>
    <base>robowflex::OMPL::OMPLPipelinePlanner</base>
    <member kind="function">
      <type></type>
      <name>R2OMPLPipelinePlanner</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1R2OMPLPipelinePlanner.html</anchorfile>
      <anchor>a8ded0f8fd1704df93f5e0d4c32988548</anchor>
      <arglist>(const R2RobotPtr &amp;robot, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1R2OMPLPipelinePlanner.html</anchorfile>
      <anchor>a70a415d660f59d043606babfaad391f3</anchor>
      <arglist>(const std::string &amp;config_file=CONFIG, const Settings &amp;settings=Settings(), const std::string &amp;plugin=PLUGIN, const std::vector&lt; std::string &gt; &amp;adapters=DEFAULT_ADAPTERS)</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>CONFIG</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1R2OMPLPipelinePlanner.html</anchorfile>
      <anchor>aaeb12432b8641f808e7df9b34425d547</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>PLUGIN</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1R2OMPLPipelinePlanner.html</anchorfile>
      <anchor>a336859973fa85673205a6cd172304184</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::R2OMPLPipelinePlannerConstPtr</name>
    <filename>classrobowflex_1_1OMPL_1_1R2OMPLPipelinePlannerConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::R2OMPLPipelinePlannerPtr</name>
    <filename>classrobowflex_1_1OMPL_1_1R2OMPLPipelinePlannerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::Settings</name>
    <filename>classrobowflex_1_1OMPL_1_1Settings.html</filename>
    <member kind="function">
      <type></type>
      <name>Settings</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1Settings.html</anchorfile>
      <anchor>ac4c80ad8b016c623a473a2511df89922</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParam</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1Settings.html</anchorfile>
      <anchor>a2f4447a6c4afc913a7ba8d1f928af795</anchor>
      <arglist>(IO::Handler &amp;handler) const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_goal_samples</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1Settings.html</anchorfile>
      <anchor>a5f65003be8a97f6bef473c69320a4bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_goal_sampling_attempts</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1Settings.html</anchorfile>
      <anchor>ad9643e6653230ed8dfdcdf7b859566f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_planning_threads</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1Settings.html</anchorfile>
      <anchor>a6a65421d3030b5829688f0b98945393f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max_solution_segment_length</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1Settings.html</anchorfile>
      <anchor>ab132ef5502cac543057055470524aa6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_state_sampling_attempts</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1Settings.html</anchorfile>
      <anchor>a652200d2ce72f7513ad33b9ac7e64e97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>minimum_waypoint_count</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1Settings.html</anchorfile>
      <anchor>a558849374a0a7e54ae4f21e381ed1987</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>simplify_solutions</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1Settings.html</anchorfile>
      <anchor>ad2121bb6c9d309f91daab07860bce595</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hybridize_solutions</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1Settings.html</anchorfile>
      <anchor>aaa4ce73302f2f7864742e055472cd9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>interpolate_solutions</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1Settings.html</anchorfile>
      <anchor>a74d54f408951506e9db2fdf4fe098ab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_constraints_approximations</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1Settings.html</anchorfile>
      <anchor>a2bebaa65d6082c72e0de5fcca2566af8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>display_random_valid_states</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1Settings.html</anchorfile>
      <anchor>a31fe8edf43e6932f0cbf6dd994e99c8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>link_for_exploration_tree</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1Settings.html</anchorfile>
      <anchor>ae8df3ed47993dc14f26944bf770cc3c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maximum_waypoint_distance</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1Settings.html</anchorfile>
      <anchor>ac1b01bfbcbd3513340802f3949a65dd9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::UR5OMPLPipelinePlanner</name>
    <filename>classrobowflex_1_1OMPL_1_1UR5OMPLPipelinePlanner.html</filename>
    <base>robowflex::OMPL::OMPLPipelinePlanner</base>
    <member kind="function">
      <type></type>
      <name>UR5OMPLPipelinePlanner</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1UR5OMPLPipelinePlanner.html</anchorfile>
      <anchor>a513b56c348890de224d76191380064c5</anchor>
      <arglist>(const RobotPtr &amp;robot, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1UR5OMPLPipelinePlanner.html</anchorfile>
      <anchor>a1fc1adadb0a556a4948fc6baf4e39f34</anchor>
      <arglist>(const Settings &amp;settings=Settings(), const std::vector&lt; std::string &gt; &amp;adapters=DEFAULT_ADAPTERS)</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_CONFIG</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1UR5OMPLPipelinePlanner.html</anchorfile>
      <anchor>adca2385e0bcdf6b235e128976b47c1f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>RESOURCE_CONFIG</name>
      <anchorfile>classrobowflex_1_1OMPL_1_1UR5OMPLPipelinePlanner.html</anchorfile>
      <anchor>adca287eac61f50b5f7f967888cf9c424</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::UR5OMPLPipelinePlannerConstPtr</name>
    <filename>classrobowflex_1_1OMPL_1_1UR5OMPLPipelinePlannerConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPL::UR5OMPLPipelinePlannerPtr</name>
    <filename>classrobowflex_1_1OMPL_1_1UR5OMPLPipelinePlannerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::OMPLPlanDataSetOutputter</name>
    <filename>classrobowflex_1_1OMPLPlanDataSetOutputter.html</filename>
    <base>robowflex::PlanDataSetOutputter</base>
    <member kind="function">
      <type></type>
      <name>OMPLPlanDataSetOutputter</name>
      <anchorfile>classrobowflex_1_1OMPLPlanDataSetOutputter.html</anchorfile>
      <anchor>a83af64397942d9df1c360692d2160ce3</anchor>
      <arglist>(const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OMPLPlanDataSetOutputter</name>
      <anchorfile>classrobowflex_1_1OMPLPlanDataSetOutputter.html</anchorfile>
      <anchor>a97fe17b925cd965495dfe80506a90ab4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>classrobowflex_1_1OMPLPlanDataSetOutputter.html</anchorfile>
      <anchor>af45eb391c07c50b14db8d227c8fbd474</anchor>
      <arglist>(const PlanDataSet &amp;results) override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>prefix_</name>
      <anchorfile>classrobowflex_1_1OMPLPlanDataSetOutputter.html</anchorfile>
      <anchor>a2d7c331217b69ac190cc657d5aadc24e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::opt::CHOMPPipelinePlanner</name>
    <filename>classrobowflex_1_1opt_1_1CHOMPPipelinePlanner.html</filename>
    <base>robowflex::PipelinePlanner</base>
    <member kind="function">
      <type></type>
      <name>CHOMPPipelinePlanner</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPPipelinePlanner.html</anchorfile>
      <anchor>a264a8b52dc7334157a868393ef650bfc</anchor>
      <arglist>(const RobotPtr &amp;robot, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CHOMPPipelinePlanner</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPPipelinePlanner.html</anchorfile>
      <anchor>a8567c39e85cc48610fd3af96cce1b66d</anchor>
      <arglist>(CHOMPPipelinePlanner const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPPipelinePlanner.html</anchorfile>
      <anchor>afdb2e44fe13baa19b5a14df50121bd90</anchor>
      <arglist>(CHOMPPipelinePlanner const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPPipelinePlanner.html</anchorfile>
      <anchor>a2f31b264035c4ba9ed2c067a1457c271</anchor>
      <arglist>(const std::string &amp;config_file, const std::string &amp;plugin=DEFAULT_PLUGIN, const std::vector&lt; std::string &gt; &amp;adapters=DEFAULT_ADAPTERS)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPPipelinePlanner.html</anchorfile>
      <anchor>aae33336dd5d552510e0a556f36e76100</anchor>
      <arglist>(const CHOMPSettings &amp;settings=CHOMPSettings(), const std::string &amp;plugin=DEFAULT_PLUGIN, const std::vector&lt; std::string &gt; &amp;adapters=DEFAULT_ADAPTERS)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getPlannerConfigs</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPPipelinePlanner.html</anchorfile>
      <anchor>aaa82e20dfbb54fda2fcdde5d413f26a9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>finishInitialize</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPPipelinePlanner.html</anchorfile>
      <anchor>ae9e7a24033353b50a42c92038c855663</anchor>
      <arglist>(const std::string &amp;plugin, const std::vector&lt; std::string &gt; &amp;adapters)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_PLUGIN</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPPipelinePlanner.html</anchorfile>
      <anchor>a0a702e3081be08b67dd576c33910c4eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::vector&lt; std::string &gt;</type>
      <name>DEFAULT_ADAPTERS</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPPipelinePlanner.html</anchorfile>
      <anchor>a605024080548e6d491a0221dd5191848</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::string &gt;</type>
      <name>configs_</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPPipelinePlanner.html</anchorfile>
      <anchor>aeb775c59da1d5b2edbb1e4c03f651a71</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::opt::CHOMPSettings</name>
    <filename>classrobowflex_1_1opt_1_1CHOMPSettings.html</filename>
    <member kind="function">
      <type></type>
      <name>CHOMPSettings</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a64204e851afbaea5d2dc4fb99d0a5165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParam</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a2a970f27844fd49cdd3016ff83b3ddd3</anchor>
      <arglist>(IO::Handler &amp;handler) const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>planning_time_limit</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a211ed6e9cf2baede67417c6f8176ce58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_iterations</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a52afb2ca157a057c318d9dc898dfa1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_iterations_after_collision_free</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>affb2ab4c57de956027b138d878882d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>smoothness_cost_weight</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a605bbfe5b319ef4530b9ae6d8278ea0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>obstacle_cost_weight</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a1fb6d2c9654713f54e20d2cb84b134f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>learning_rate</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a02a30e97b22fc2313b0d2b2da0f341d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>animate_path</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a249ceab35251c0c09c412804895baaa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>add_randomness</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a3816ddeedb66f6f7ee2ed6c34c45c083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>smoothness_cost_velocity</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a8f2db899a3d5ff4add68847e4c2aa361</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>smoothness_cost_acceleration</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a491c105775b3211934edd3965c2d914a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>smoothness_cost_jerk</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a37062fab0f374de924a6e010b0664191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>hmc_discretization</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a199c57184a5b75ce6fbaa6ccdc966090</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>hmc_stochasticity</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a977715ddfd2a2ce33400624dd80f6dda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>hmc_annealing_factor</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a7d2d8d4cba58e7ee2294b10dc216ce6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_hamiltonian_monte_carlo</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>af38ae1f88c5194dfdffacab61237281f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ridge_factor</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a2e17c11da97e8173b9f7cec7b15dca18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_pseudo_inverse</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a366fb3bf7cd534297ef9c1bf6965a8ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pseudo_inverse_ridge_factor</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a1a312b94f549a0bcd8bffc3722b68450</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>animate_endeffector</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>aea52093e7501b1d395937147b5b2d30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>animate_endeffector_segment</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>ad7deb0f7fd52e203be3b784b623efbb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>joint_update_limit</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a1c04282772028fcfff83a919264144cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>collision_clearence</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a4ac1c1a71c0c1c6a4db13bb3bf3cb5e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>collision_threshold</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>aed18cdf5b764c321d0de093c53654e70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>random_jump_amount</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a30882f16fdc0e4d190c90bd30a60f857</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_stochastic_descent</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a747b3de54e95436606783a7362f69c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_failure_recovery</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a72addda072f1cc72823a22763c0eeb5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_recovery_attempts</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a5429e10d8ea93d59c0f009c7bfd37f4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>trajectory_initialization_method</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>a030a90b8865f09d78b15177f6a8a2a6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>start_state_max_bounds_error</name>
      <anchorfile>classrobowflex_1_1opt_1_1CHOMPSettings.html</anchorfile>
      <anchor>ab5fef6a3014f3f9cbf9a918e41e5c6b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::opt::TrajOptPipelinePlanner</name>
    <filename>classrobowflex_1_1opt_1_1TrajOptPipelinePlanner.html</filename>
    <base>robowflex::PipelinePlanner</base>
    <member kind="function">
      <type></type>
      <name>TrajOptPipelinePlanner</name>
      <anchorfile>classrobowflex_1_1opt_1_1TrajOptPipelinePlanner.html</anchorfile>
      <anchor>a07f96689bb133392392ec37e1851e147</anchor>
      <arglist>(const RobotPtr &amp;robot, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrajOptPipelinePlanner</name>
      <anchorfile>classrobowflex_1_1opt_1_1TrajOptPipelinePlanner.html</anchorfile>
      <anchor>abb0a94493ef795662dd58bdf27b054a2</anchor>
      <arglist>(TrajOptPipelinePlanner const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classrobowflex_1_1opt_1_1TrajOptPipelinePlanner.html</anchorfile>
      <anchor>a5fcb6fcff0a12a1836feb8e2cd1afb32</anchor>
      <arglist>(TrajOptPipelinePlanner const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1opt_1_1TrajOptPipelinePlanner.html</anchorfile>
      <anchor>a112840e94a38b3685bcc5f0bcbd309a9</anchor>
      <arglist>(const std::string &amp;config_file=&quot;&quot;, const std::string &amp;plugin=DEFAULT_PLUGIN, const std::vector&lt; std::string &gt; &amp;adapters=DEFAULT_ADAPTERS)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_PLUGIN</name>
      <anchorfile>classrobowflex_1_1opt_1_1TrajOptPipelinePlanner.html</anchorfile>
      <anchor>a7872e187da4f6c1b2c3d89ad33fbdf30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::vector&lt; std::string &gt;</type>
      <name>DEFAULT_ADAPTERS</name>
      <anchorfile>classrobowflex_1_1opt_1_1TrajOptPipelinePlanner.html</anchorfile>
      <anchor>a13631223b26edbffa1695f509702e97b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::opt::TrajOptPipelinePlannerConstPtr</name>
    <filename>classrobowflex_1_1opt_1_1TrajOptPipelinePlannerConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::opt::TrajOptPipelinePlannerPtr</name>
    <filename>classrobowflex_1_1opt_1_1TrajOptPipelinePlannerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::ParamRobot</name>
    <filename>classrobowflex_1_1ParamRobot.html</filename>
    <base>robowflex::Robot</base>
    <member kind="function">
      <type></type>
      <name>ParamRobot</name>
      <anchorfile>classrobowflex_1_1ParamRobot.html</anchorfile>
      <anchor>add98ad8cab1c8680a034acb9d7eb2511</anchor>
      <arglist>(const std::string &amp;name=&quot;DEFAULT&quot;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::ParamRobotConstPtr</name>
    <filename>classrobowflex_1_1ParamRobotConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::ParamRobotPtr</name>
    <filename>classrobowflex_1_1ParamRobotPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::PipelinePlanner</name>
    <filename>classrobowflex_1_1PipelinePlanner.html</filename>
    <base>robowflex::Planner</base>
    <member kind="function">
      <type></type>
      <name>PipelinePlanner</name>
      <anchorfile>classrobowflex_1_1PipelinePlanner.html</anchorfile>
      <anchor>a192de26dd90b1fc380df49e350c0e032</anchor>
      <arglist>(const RobotPtr &amp;robot, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PipelinePlanner</name>
      <anchorfile>classrobowflex_1_1PipelinePlanner.html</anchorfile>
      <anchor>a1a68eaa392c3d7fc12592ab1c1f7bf12</anchor>
      <arglist>(PipelinePlanner const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classrobowflex_1_1PipelinePlanner.html</anchorfile>
      <anchor>aa6b0ec72daacfca53494f8ff313b185c</anchor>
      <arglist>(PipelinePlanner const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>planning_interface::MotionPlanResponse</type>
      <name>plan</name>
      <anchorfile>classrobowflex_1_1PipelinePlanner.html</anchorfile>
      <anchor>af45699d4dc7608422e667632b61bd57d</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request) override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>extractPlanningContext</name>
      <anchorfile>classrobowflex_1_1PipelinePlanner.html</anchorfile>
      <anchor>a49a9b00f5b97eea32ba7b1b6239573cd</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>planning_pipeline::PlanningPipelinePtr</type>
      <name>pipeline_</name>
      <anchorfile>classrobowflex_1_1PipelinePlanner.html</anchorfile>
      <anchor>a247ba3b8df0aaa415604b1c27472df1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::PipelinePlannerConstPtr</name>
    <filename>classrobowflex_1_1PipelinePlannerConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::PipelinePlannerPtr</name>
    <filename>classrobowflex_1_1PipelinePlannerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::PlanData</name>
    <filename>classrobowflex_1_1PlanData.html</filename>
    <member kind="variable">
      <type>PlanningQuery</type>
      <name>query</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>a8f81cfa8a7b61385204887e6c719814d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>planning_interface::MotionPlanResponse</type>
      <name>response</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>a60737a4fe3d506a96fe9975b4abaf04b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>success</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>a65c1e80d8269c5759c0124b232800e13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TrajectoryPtr</type>
      <name>trajectory</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>aa3cc5b34d2c09b20fab3970916055033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>time</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>aed012b37b9b777655a6ca2b94b157715</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::posix_time::ptime</type>
      <name>start</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>acae8053bfdd9bee6842c0ce1876a16ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::posix_time::ptime</type>
      <name>finish</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>a489f71751dc8e41aa1f2df102e7ddb72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>hostname</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>af49abd25cad389fda32a92f764aad982</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>process_id</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>a27c69fe502689b8c4bf4a0acb80960f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>thread_id</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>ab5cf8829f3de2b7801e1f9f83bc8a29a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PlanningQuery</type>
      <name>query</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>a8f81cfa8a7b61385204887e6c719814d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>planning_interface::MotionPlanResponse</type>
      <name>response</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>a60737a4fe3d506a96fe9975b4abaf04b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>success</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>a65c1e80d8269c5759c0124b232800e13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TrajectoryPtr</type>
      <name>trajectory</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>aa3cc5b34d2c09b20fab3970916055033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>time</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>aed012b37b9b777655a6ca2b94b157715</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::posix_time::ptime</type>
      <name>start</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>acae8053bfdd9bee6842c0ce1876a16ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::posix_time::ptime</type>
      <name>finish</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>a489f71751dc8e41aa1f2df102e7ddb72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>hostname</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>af49abd25cad389fda32a92f764aad982</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>process_id</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>a27c69fe502689b8c4bf4a0acb80960f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>thread_id</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>ab5cf8829f3de2b7801e1f9f83bc8a29a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>property_names</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>a5a0f9d64da1979917f47b951ff356809</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::map&lt; std::string, std::string &gt; &gt;</type>
      <name>progress</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>ab5062389731a331c39ba6b14ed179ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, PlannerMetric &gt;</type>
      <name>metrics</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>aa8b25765392030bf2cf8712eac14c8d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; double, double &gt; &gt;</type>
      <name>getProgressPropertiesAsPoints</name>
      <anchorfile>classrobowflex_1_1PlanData.html</anchorfile>
      <anchor>a1511776c5f8261053a2b5ca53597b7b2</anchor>
      <arglist>(const std::string &amp;xprop, const std::string &amp;yprop) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::PlanDataConstPtr</name>
    <filename>classrobowflex_1_1PlanDataConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::PlanDataPtr</name>
    <filename>classrobowflex_1_1PlanDataPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::PlanDataSet</name>
    <filename>classrobowflex_1_1PlanDataSet.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>time</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>aef09842d5c6655a2be201facae52cb4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::posix_time::ptime</type>
      <name>start</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>a27e6f89bc7e6c2b7387ffbba1237d1a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::posix_time::ptime</type>
      <name>finish</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>a7e6f5e2cd82c53e431ae66a6e00102e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>allowed_time</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>ab1af83db48a18bce0ad9eb5314e03e51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>trials</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>ab927b1b048bc3a1dd322896ccc223df4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enforced_single_thread</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>af1e0c36b23bae716f65a347aa244042d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>run_till_timeout</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>a99cb9162c34e3f0e9163c248a6b6ae13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>threads</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>a3e6a7fa317836f08cc03b39f33fd9501</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>adc59ff42fda7e87bc6de3cdb69f1c25d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>query_names</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>a9cfb5b5626028b56967fad4bcf30495b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; PlanningQuery &gt;</type>
      <name>queries</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>ac6fe5792c29fa76380dda435244af87c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>time</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>aef09842d5c6655a2be201facae52cb4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::posix_time::ptime</type>
      <name>start</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>a27e6f89bc7e6c2b7387ffbba1237d1a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::posix_time::ptime</type>
      <name>finish</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>a7e6f5e2cd82c53e431ae66a6e00102e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>allowed_time</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>ab1af83db48a18bce0ad9eb5314e03e51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>trials</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>ab927b1b048bc3a1dd322896ccc223df4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enforced_single_thread</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>af1e0c36b23bae716f65a347aa244042d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>run_till_timeout</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>a99cb9162c34e3f0e9163c248a6b6ae13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>threads</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>a3e6a7fa317836f08cc03b39f33fd9501</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>adc59ff42fda7e87bc6de3cdb69f1c25d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>query_names</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>a9cfb5b5626028b56967fad4bcf30495b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; PlanningQuery &gt;</type>
      <name>queries</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>ac6fe5792c29fa76380dda435244af87c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::vector&lt; PlanDataPtr &gt; &gt;</type>
      <name>data</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>a235a6fa3c9be1e671d5e3d713b75fd9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDataPoint</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>a396d95b145ec769878f712cd78be90ad</anchor>
      <arglist>(const std::string &amp;query_name, const PlanDataPtr &amp;run)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; PlanDataPtr &gt;</type>
      <name>getFlatData</name>
      <anchorfile>classrobowflex_1_1PlanDataSet.html</anchorfile>
      <anchor>a497b4b776e007d28b57755a6a50a4b7e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::PlanDataSetConstPtr</name>
    <filename>classrobowflex_1_1PlanDataSetConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::PlanDataSetOutputter</name>
    <filename>classrobowflex_1_1PlanDataSetOutputter.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlanDataSetOutputter</name>
      <anchorfile>classrobowflex_1_1PlanDataSetOutputter.html</anchorfile>
      <anchor>a7820d20968101e7fec158ca35c0fe309</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>classrobowflex_1_1PlanDataSetOutputter.html</anchorfile>
      <anchor>a6586147d815c143c4ec060d7ccd72d08</anchor>
      <arglist>(const PlanDataSet &amp;results)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::PlanDataSetPtr</name>
    <filename>classrobowflex_1_1PlanDataSetPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::Planner</name>
    <filename>classrobowflex_1_1Planner.html</filename>
    <member kind="typedef">
      <type>std::function&lt; std::string()&gt;</type>
      <name>ProgressProperty</name>
      <anchorfile>classrobowflex_1_1Planner.html</anchorfile>
      <anchor>a643c686ba825033a5a2550eff2626cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Planner</name>
      <anchorfile>classrobowflex_1_1Planner.html</anchorfile>
      <anchor>ac33eb030232bc7c062fa5e314f377797</anchor>
      <arglist>(const RobotPtr &amp;robot, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Planner</name>
      <anchorfile>classrobowflex_1_1Planner.html</anchorfile>
      <anchor>a40932b451c2f36646ec79186517008d0</anchor>
      <arglist>(Planner const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classrobowflex_1_1Planner.html</anchorfile>
      <anchor>a438413f9f58cb0f53586825b80ed55e2</anchor>
      <arglist>(Planner const &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual planning_interface::MotionPlanResponse</type>
      <name>plan</name>
      <anchorfile>classrobowflex_1_1Planner.html</anchorfile>
      <anchor>a7d960d5d92a79e9be51c6f97518635b6</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getPlannerConfigs</name>
      <anchorfile>classrobowflex_1_1Planner.html</anchorfile>
      <anchor>a2d499567aba6770de5776ba7db5e9d3e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::map&lt; std::string, ProgressProperty &gt;</type>
      <name>getProgressProperties</name>
      <anchorfile>classrobowflex_1_1Planner.html</anchorfile>
      <anchor>aa92ec03150c324a4e136318ebddbae51</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request) const</arglist>
    </member>
    <member kind="function">
      <type>const RobotPtr</type>
      <name>getRobot</name>
      <anchorfile>classrobowflex_1_1Planner.html</anchorfile>
      <anchor>a0dc851c5cdc24e5cb9656066ff232ad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classrobowflex_1_1Planner.html</anchorfile>
      <anchor>a6613fb90892f07bc96047a11126d370a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preRun</name>
      <anchorfile>classrobowflex_1_1Planner.html</anchorfile>
      <anchor>a91dd6981c4037a169bb165d59475ba2b</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RobotPtr</type>
      <name>robot_</name>
      <anchorfile>classrobowflex_1_1Planner.html</anchorfile>
      <anchor>a863cfac02101ae20c367a3db489af1a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IO::Handler</type>
      <name>handler_</name>
      <anchorfile>classrobowflex_1_1Planner.html</anchorfile>
      <anchor>a731773cb15cb42bf5d79c94075980a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::string</type>
      <name>name_</name>
      <anchorfile>classrobowflex_1_1Planner.html</anchorfile>
      <anchor>a6eed2da0765a0c26ea54ed62728c9c01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::PlannerConstPtr</name>
    <filename>classrobowflex_1_1PlannerConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::PlannerPtr</name>
    <filename>classrobowflex_1_1PlannerPtr.html</filename>
  </compound>
  <compound kind="struct">
    <name>robowflex::PlanningQuery</name>
    <filename>structrobowflex_1_1PlanningQuery.html</filename>
    <member kind="function">
      <type></type>
      <name>PlanningQuery</name>
      <anchorfile>structrobowflex_1_1PlanningQuery.html</anchorfile>
      <anchor>a38d724e8e3ed8d4b35df5dcce946aa1d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlanningQuery</name>
      <anchorfile>structrobowflex_1_1PlanningQuery.html</anchorfile>
      <anchor>a1ec9ba2dd2902b019aa7dd17a4cfb2b1</anchor>
      <arglist>(const std::string &amp;name, const SceneConstPtr &amp;scene, const PlannerPtr &amp;planner, const planning_interface::MotionPlanRequest &amp;request)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structrobowflex_1_1PlanningQuery.html</anchorfile>
      <anchor>a70e303cb8ea6edef9b888410b14fdeee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SceneConstPtr</type>
      <name>scene</name>
      <anchorfile>structrobowflex_1_1PlanningQuery.html</anchorfile>
      <anchor>a3cd1fa1768339e6f04063d415e398ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PlannerPtr</type>
      <name>planner</name>
      <anchorfile>structrobowflex_1_1PlanningQuery.html</anchorfile>
      <anchor>a75f5ef351877d28b581d200bf17577c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>planning_interface::MotionPlanRequest</type>
      <name>request</name>
      <anchorfile>structrobowflex_1_1PlanningQuery.html</anchorfile>
      <anchor>a2414c0f4c757e70f43198a8746ab7d96</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::Pool</name>
    <filename>classrobowflex_1_1Pool.html</filename>
    <class kind="class">robowflex::Pool::Job</class>
    <class kind="class">robowflex::Pool::Joblet</class>
    <member kind="function">
      <type></type>
      <name>Pool</name>
      <anchorfile>classrobowflex_1_1Pool.html</anchorfile>
      <anchor>a2272e59defd3e3d447eb52563daacc5d</anchor>
      <arglist>(unsigned int n=std::thread::hardware_concurrency())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Pool</name>
      <anchorfile>classrobowflex_1_1Pool.html</anchorfile>
      <anchor>a2157e55ddcb79eec5d74468ad49e6324</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getThreadCount</name>
      <anchorfile>classrobowflex_1_1Pool.html</anchorfile>
      <anchor>a0b2265b607414ab380e6fbfeadac969b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Job&lt; RT &gt; &gt;</type>
      <name>submit</name>
      <anchorfile>classrobowflex_1_1Pool.html</anchorfile>
      <anchor>af9e55c05b0d527d5d618cf21b034f15a</anchor>
      <arglist>(const std::function&lt; RT(Args...)&gt; &amp;&amp;function, Args &amp;&amp;... args) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classrobowflex_1_1Pool.html</anchorfile>
      <anchor>ac89bbf31e9157a51bafb676d3669852c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>active_</name>
      <anchorfile>classrobowflex_1_1Pool.html</anchorfile>
      <anchor>a180ace568cec016b9b8467e27ca8fe66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mutex_</name>
      <anchorfile>classrobowflex_1_1Pool.html</anchorfile>
      <anchor>a08b629e2be02fcee63a8e84d27a9e137</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::condition_variable</type>
      <name>cv_</name>
      <anchorfile>classrobowflex_1_1Pool.html</anchorfile>
      <anchor>a78e5921e6eb7fc9830cdebaaa1ba49da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::thread &gt;</type>
      <name>threads_</name>
      <anchorfile>classrobowflex_1_1Pool.html</anchorfile>
      <anchor>ac113aa3b99af5ee27916ddf514e8b06b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::queue&lt; std::shared_ptr&lt; Joblet &gt; &gt;</type>
      <name>jobs_</name>
      <anchorfile>classrobowflex_1_1Pool.html</anchorfile>
      <anchor>af077037bc6dfd6c0b17b5a65404cf4c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::Pool::Job</name>
    <filename>classrobowflex_1_1Pool_1_1Job.html</filename>
    <templarg></templarg>
    <base>robowflex::Pool::Joblet</base>
    <member kind="function">
      <type></type>
      <name>Job</name>
      <anchorfile>classrobowflex_1_1Pool_1_1Job.html</anchorfile>
      <anchor>abd55ca16a4741e2501d25cb9151a90d7</anchor>
      <arglist>(const std::function&lt; RT(Args...)&gt; &amp;&amp;function, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute</name>
      <anchorfile>classrobowflex_1_1Pool_1_1Job.html</anchorfile>
      <anchor>af619f4fcea3fc3c1c16e8b8cedce0432</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>RT</type>
      <name>get</name>
      <anchorfile>classrobowflex_1_1Pool_1_1Job.html</anchorfile>
      <anchor>a02d9ac474d09b9b963ef20a6a4841eba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>classrobowflex_1_1Pool_1_1Job.html</anchorfile>
      <anchor>a8eaa0e384f73e8ae6d9d6aef4cb9846b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDone</name>
      <anchorfile>classrobowflex_1_1Pool_1_1Job.html</anchorfile>
      <anchor>a5c2e56fb90f52aa72a4df647dff804d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>waitFor</name>
      <anchorfile>classrobowflex_1_1Pool_1_1Job.html</anchorfile>
      <anchor>ad89aeb0894f7d6ffb42f6237795e4a81</anchor>
      <arglist>(double time) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::function&lt; RT()&gt;</type>
      <name>function_</name>
      <anchorfile>classrobowflex_1_1Pool_1_1Job.html</anchorfile>
      <anchor>a57a6a66b3c7f0c8e223e800a5c9df4e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::packaged_task&lt; RT()&gt;</type>
      <name>task_</name>
      <anchorfile>classrobowflex_1_1Pool_1_1Job.html</anchorfile>
      <anchor>ae8a61a423bb305cc4b7cbc0b917c3a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::future&lt; RT &gt;</type>
      <name>future_</name>
      <anchorfile>classrobowflex_1_1Pool_1_1Job.html</anchorfile>
      <anchor>a3f9e8b0a0c282bdb11653d1e64488bac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::Pool::Joblet</name>
    <filename>classrobowflex_1_1Pool_1_1Joblet.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>execute</name>
      <anchorfile>classrobowflex_1_1Pool_1_1Joblet.html</anchorfile>
      <anchor>a0e6b92a92c4599a81225019c17fbebcc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancel</name>
      <anchorfile>classrobowflex_1_1Pool_1_1Joblet.html</anchorfile>
      <anchor>af0147d96c2d056fa2feeb2fd9c416314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCancled</name>
      <anchorfile>classrobowflex_1_1Pool_1_1Joblet.html</anchorfile>
      <anchor>ab06d4bda05a0ebb0215b24538b819ead</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>canceled</name>
      <anchorfile>classrobowflex_1_1Pool_1_1Joblet.html</anchorfile>
      <anchor>adf02f7be92d21e53128e42db925db8b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::PoolPlanner</name>
    <filename>classrobowflex_1_1PoolPlanner.html</filename>
    <base>robowflex::Planner</base>
    <member kind="function">
      <type></type>
      <name>PoolPlanner</name>
      <anchorfile>classrobowflex_1_1PoolPlanner.html</anchorfile>
      <anchor>af99ff1f3b0f797a6531065ef253ce340</anchor>
      <arglist>(const RobotPtr &amp;robot, unsigned int n=std::thread::hardware_concurrency(), const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoolPlanner</name>
      <anchorfile>classrobowflex_1_1PoolPlanner.html</anchorfile>
      <anchor>a64d21ec5d0936635d8d2915cb7fea1da</anchor>
      <arglist>(PoolPlanner const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classrobowflex_1_1PoolPlanner.html</anchorfile>
      <anchor>a9d7f128ad2eadf33c0cc12a9fd25b0e1</anchor>
      <arglist>(PoolPlanner const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1PoolPlanner.html</anchorfile>
      <anchor>ae2b4ff45a4701cd36bb90c6d00f34ae7</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Pool::Job&lt; planning_interface::MotionPlanResponse &gt; &gt;</type>
      <name>submit</name>
      <anchorfile>classrobowflex_1_1PoolPlanner.html</anchorfile>
      <anchor>a09696a9e660b3128c62fe0c0fefcac88</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>planning_interface::MotionPlanResponse</type>
      <name>plan</name>
      <anchorfile>classrobowflex_1_1PoolPlanner.html</anchorfile>
      <anchor>a9aa99599129d083dd229affb8be8ba2d</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request) override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getPlannerConfigs</name>
      <anchorfile>classrobowflex_1_1PoolPlanner.html</anchorfile>
      <anchor>ae722b6e138f88edd7d9a30fea96ec4a4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Pool</type>
      <name>pool_</name>
      <anchorfile>classrobowflex_1_1PoolPlanner.html</anchorfile>
      <anchor>a69c8891cf824d19d89edec57c296bbdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::queue&lt; PlannerPtr &gt;</type>
      <name>planners_</name>
      <anchorfile>classrobowflex_1_1PoolPlanner.html</anchorfile>
      <anchor>ac8122ce06d9cc41b02b3878f1aecef39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mutex_</name>
      <anchorfile>classrobowflex_1_1PoolPlanner.html</anchorfile>
      <anchor>a5c8165adc36be613dc5421723ec917f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::condition_variable</type>
      <name>cv_</name>
      <anchorfile>classrobowflex_1_1PoolPlanner.html</anchorfile>
      <anchor>a9e09ba8ecf61daf165f37256df7ff402</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::Profiler</name>
    <filename>classrobowflex_1_1Profiler.html</filename>
    <class kind="struct">robowflex::Profiler::Options</class>
    <member kind="enumeration">
      <type></type>
      <name>Metrics</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>adb4ed5521f0b5475b5c8401fe56fc705</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAYPOINTS</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>adb4ed5521f0b5475b5c8401fe56fc705a888d9952b3298a2ec2285dd58b43ae4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CORRECT</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>adb4ed5521f0b5475b5c8401fe56fc705adba59cc5ad5f3b63c2ec72b0a261e673</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LENGTH</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>adb4ed5521f0b5475b5c8401fe56fc705aff4ea16b4ad1212e2d374a491e1ffc80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CLEARANCE</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>adb4ed5521f0b5475b5c8401fe56fc705a05ea5cc904c320d53f0c257aa9e2baba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SMOOTHNESS</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>adb4ed5521f0b5475b5c8401fe56fc705a9084075d80b7d2781ffc0224666aa140</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; PlannerMetric(const PlannerPtr &amp;planner, const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request, const PlanData &amp;run)&gt;</type>
      <name>ComputeMetricCallback</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>af08a42aae08c150bae3b31ff899b7133</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; Planner::ProgressProperty(const PlannerPtr &amp;planner, const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request)&gt;</type>
      <name>ProgressPropertyAllocator</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>a933441e4872d63be62558ceb6e5d653c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const PlannerPtr &amp;planner, const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request, const PlanData &amp;result)&gt;</type>
      <name>ProgressCallback</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>a44293591492d96429e9caf4f57dd02bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; ProgressCallback(const PlannerPtr &amp;planner, const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request)&gt;</type>
      <name>ProgressCallbackAllocator</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>ae2276f251de6e8e3ece49368c6ba7cb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAYPOINTS</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>adb4ed5521f0b5475b5c8401fe56fc705a888d9952b3298a2ec2285dd58b43ae4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CORRECT</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>adb4ed5521f0b5475b5c8401fe56fc705adba59cc5ad5f3b63c2ec72b0a261e673</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LENGTH</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>adb4ed5521f0b5475b5c8401fe56fc705aff4ea16b4ad1212e2d374a491e1ffc80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CLEARANCE</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>adb4ed5521f0b5475b5c8401fe56fc705a05ea5cc904c320d53f0c257aa9e2baba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SMOOTHNESS</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>adb4ed5521f0b5475b5c8401fe56fc705a9084075d80b7d2781ffc0224666aa140</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>profilePlan</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>aebbeb155a4bcca28cb72fe2cce9c9b86</anchor>
      <arglist>(const PlannerPtr &amp;planner, const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request, const Options &amp;options, PlanData &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMetricCallback</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>abc5ff0e7a6f4b0433cd0421463f0efc1</anchor>
      <arglist>(const std::string &amp;name, const ComputeMetricCallback &amp;metric)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addProgressAllocator</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>adf160eb150a195377b296f332a6c210c</anchor>
      <arglist>(const std::string &amp;name, const ProgressPropertyAllocator &amp;allocator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addProgressCallback</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>a3f8ea82a3bec0f4dfb2440f052dc3e93</anchor>
      <arglist>(const ProgressCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addProgressCallbackAllocator</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>a1ec5915fc51c89bdd477af2e9fee22c7</anchor>
      <arglist>(const ProgressCallbackAllocator &amp;allocator)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeBuiltinMetrics</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>a31321f51b81663516d2bdc1a78765aed</anchor>
      <arglist>(uint32_t options, const SceneConstPtr &amp;scene, PlanData &amp;run) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeCallbackMetrics</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>adda3b135b269d6ef8c21fc5547be0b79</anchor>
      <arglist>(const PlannerPtr &amp;planner, const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request, PlanData &amp;run) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, ComputeMetricCallback &gt;</type>
      <name>callbacks_</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>a635751b34487216437c879d6b757121e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, ProgressPropertyAllocator &gt;</type>
      <name>prog_allocators_</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>a1ec9f84e672128a6a522e7913eaf7a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ProgressCallback &gt;</type>
      <name>prog_callbacks_</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>aeee8d58d4938ceb2d178d8e9247c65e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ProgressCallbackAllocator &gt;</type>
      <name>prog_callback_allocators_</name>
      <anchorfile>classrobowflex_1_1Profiler.html</anchorfile>
      <anchor>ab02e870e3b66833378710aa2659f6104</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>robowflex::Profiler::Options</name>
    <filename>structrobowflex_1_1Profiler_1_1Options.html</filename>
    <member kind="variable">
      <type>uint32_t</type>
      <name>metrics</name>
      <anchorfile>structrobowflex_1_1Profiler_1_1Options.html</anchorfile>
      <anchor>ad141ab56d87d04a71121a8f7fe18dcf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>progress</name>
      <anchorfile>structrobowflex_1_1Profiler_1_1Options.html</anchorfile>
      <anchor>a1e461bc7091504f64b64f51c4e865269</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>progress_at_least_once</name>
      <anchorfile>structrobowflex_1_1Profiler_1_1Options.html</anchorfile>
      <anchor>a33f71bcde7de3ad87396022927a454b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>progress_update_rate</name>
      <anchorfile>structrobowflex_1_1Profiler_1_1Options.html</anchorfile>
      <anchor>a5ed21948c6c60ef70d62ab3e9ba015f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::ProfilerConstPtr</name>
    <filename>classrobowflex_1_1ProfilerConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::ProfilerPtr</name>
    <filename>classrobowflex_1_1ProfilerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::R2Robot</name>
    <filename>classrobowflex_1_1R2Robot.html</filename>
    <base>robowflex::Robot</base>
    <member kind="function">
      <type></type>
      <name>R2Robot</name>
      <anchorfile>classrobowflex_1_1R2Robot.html</anchorfile>
      <anchor>a43526a2ec6811340592a27f49ff67e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1R2Robot.html</anchorfile>
      <anchor>ae58c8f5d015e13a30681f712d0c95476</anchor>
      <arglist>(const std::vector&lt; std::string &gt; kinematics)</arglist>
    </member>
    <member kind="function">
      <type>robot_trajectory::RobotTrajectoryPtr</type>
      <name>loadSMTData</name>
      <anchorfile>classrobowflex_1_1R2Robot.html</anchorfile>
      <anchor>a322b6c6c41e80225b9014633d88d4b37</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>URDF</name>
      <anchorfile>classrobowflex_1_1R2Robot.html</anchorfile>
      <anchor>ab828eaa4acef4c23d4b68b97b354ce86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>SRDF</name>
      <anchorfile>classrobowflex_1_1R2Robot.html</anchorfile>
      <anchor>aa2f18e946ef38986f3b26b18b3605d29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>LIMITS</name>
      <anchorfile>classrobowflex_1_1R2Robot.html</anchorfile>
      <anchor>a141ec2bad7d5fa96b15fe36c85681d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>KINEMATICS</name>
      <anchorfile>classrobowflex_1_1R2Robot.html</anchorfile>
      <anchor>ac6d54f866ad7b5d939e116345836a5fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>CACHED</name>
      <anchorfile>classrobowflex_1_1R2Robot.html</anchorfile>
      <anchor>aa74cf5686c41212ea358fc108f451d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::vector&lt; std::string &gt;</type>
      <name>SAMPLERS</name>
      <anchorfile>classrobowflex_1_1R2Robot.html</anchorfile>
      <anchor>ab5e90e9e10ea7ddd224b77c389d15bc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::map&lt; std::string, std::string &gt;</type>
      <name>CREEPY</name>
      <anchorfile>classrobowflex_1_1R2Robot.html</anchorfile>
      <anchor>a64c8857a6025321921f9632e0c1b8dd3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::R2RobotConstPtr</name>
    <filename>classrobowflex_1_1R2RobotConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::R2RobotPtr</name>
    <filename>classrobowflex_1_1R2RobotPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::Robot</name>
    <filename>classrobowflex_1_1Robot.html</filename>
    <class kind="struct">robowflex::Robot::IKQuery</class>
    <member kind="typedef">
      <type>std::function&lt; bool(YAML::Node &amp;)&gt;</type>
      <name>PostProcessYAMLFunction</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a4b594d34ed151710ce19beba02ad143b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(tinyxml2::XMLDocument &amp;)&gt;</type>
      <name>PostProcessXMLFunction</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ad9b7a293d3bec2f0ddc962461b561fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Robot</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a457bcf0ddf445edee175402066a74e04</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Robot</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ab053bceb0c7c7154e45c8dfbcf3ae14c</anchor>
      <arglist>(Robot const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a7c783ce042a65a6ed27e1a36eb89f1b0</anchor>
      <arglist>(Robot const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a89d420099eadf0e1e144fc3b60db7c09</anchor>
      <arglist>(const std::string &amp;urdf_file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initializeKinematics</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>af854d06d2b8665b80061adf37be36886</anchor>
      <arglist>(const std::string &amp;kinematics_file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a9a242e61bb1fe25d879abd1cd350189a</anchor>
      <arglist>(const std::string &amp;urdf_file, const std::string &amp;srdf_file, const std::string &amp;limits_file=&quot;&quot;, const std::string &amp;kinematics_file=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initializeFromYAML</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a10296a03e5550fb39a6f46b40573b588</anchor>
      <arglist>(const std::string &amp;config_file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadYAMLFile</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a9939fdcbb03c7e6cbdfa40248a8e7ebc</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadYAMLFile</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ad4da99659c50e025b4e8342d960984b0</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;file, const PostProcessYAMLFunction &amp;function)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>loadXMLFile</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a5a8af445fcf650e23ac31e0b3c74754d</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setURDFPostProcessFunction</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a5ea995b274007a74b8f6181a87e2d5b5</anchor>
      <arglist>(const PostProcessXMLFunction &amp;function)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinkURDF</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a74a796257af585a511944f0698943fda</anchor>
      <arglist>(tinyxml2::XMLDocument &amp;doc, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSRDFPostProcessFunction</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a57cd4903ff4d8bb6b4702e6c96bce28d</anchor>
      <arglist>(const PostProcessXMLFunction &amp;function)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLimitsPostProcessFunction</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a0ccb737d3ba5c625e9e86a0531e10cc0</anchor>
      <arglist>(const PostProcessYAMLFunction &amp;function)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKinematicsPostProcessFunction</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a5de9e5a10617c7fc4e4fe1db787410ee</anchor>
      <arglist>(const PostProcessYAMLFunction &amp;function)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSRDFPostProcessAddPlanarJoint</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a9d45ec9150a975e78eb151f5128b42bd</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSRDFPostProcessAddFloatingJoint</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a0cb1f2b5b5dc0bd2c13ae26946f69360</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadKinematics</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>aa43fbfccc17a16eca552761b9edd71fd</anchor>
      <arglist>(const std::string &amp;group, bool load_subgroups=true)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getModelName</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>accf7eea7633af92ccb9b3efdcedb2597</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>aa5958035cdbf65441a811b72817ef139</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const robot_model::RobotModelPtr &amp;</type>
      <name>getModelConst</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ad9bd958af6eca8e2c14a76dc132273e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>robot_model::RobotModelPtr &amp;</type>
      <name>getModel</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>acab870ea49f0a952a4568ec88e5b8b58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>urdf::ModelInterfaceConstSharedPtr</type>
      <name>getURDF</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a802a1e10317966ad1a4b9e8df41e3ddd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getURDFString</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>aecb427ea7938d7de6c994d8a7bdc9ac0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>srdf::ModelConstSharedPtr</type>
      <name>getSRDF</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a5708cab292f3d08ccd9df464b98d301a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getSRDFString</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ac64b05b0999e7bce94f744621e0ba149</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IO::Handler &amp;</type>
      <name>getHandlerConst</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a58e6c221f9e3e5039f0a532e31f466b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IO::Handler &amp;</type>
      <name>getHandler</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a4b36261cf7dfdb58d98ec44e79ae7489</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const robot_model::RobotStatePtr &amp;</type>
      <name>getScratchStateConst</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ab7bd1c8c4b1ce7f4cbab8772356139bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>robot_model::RobotStatePtr &amp;</type>
      <name>getScratchState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a7f040576e15e86ee2fd84d15653bdf0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>robot_model::RobotStatePtr</type>
      <name>cloneScratchState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a501f8185d9dccda4a9bc5d5b13e13570</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>robot_model::RobotStatePtr</type>
      <name>allocState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ae0f14891e548793bdd43d422886c483b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ace2a3be0a96fa9459e5aa5b305fb3192</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;positions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ad6649b9a456ca41d0a5cd7e438d6e3c3</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;variable_map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a64952e20207bed8ef1384e684e3cb6d4</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;variable_names, const std::vector&lt; double &gt; &amp;variable_position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a7afaf4d044de180983608e05199ada3a</anchor>
      <arglist>(const sensor_msgs::JointState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>af11e3a72ba5eae5048b2bc93fbbff1cb</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateFromYAMLFile</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>af392b7dc965f5f11aa57d6c82d2ef7aa</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGroupState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a890a77440810c04f5ecd44511d713df1</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; double &gt; &amp;positions)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>getState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a15219846c3e3b04b1449c7e4ff9e08cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::RobotState</type>
      <name>getStateMsg</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>aca6acec07ae0f15af775eca3575ee6b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateMsgGroupState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a8e2e457f15f887205a30c0fdca9a19b0</anchor>
      <arglist>(moveit_msgs::RobotState &amp;state, const std::string &amp;group, const std::vector&lt; double &gt; &amp;positions) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getJointNames</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a09a162f5080f2264ad96eaf7ed84569f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasJoint</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ad7c519af69b21162ab14319335fa399c</anchor>
      <arglist>(const std::string &amp;joint) const</arglist>
    </member>
    <member kind="function">
      <type>const RobotPose &amp;</type>
      <name>getLinkTF</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a0a00c4b4d751d0e60ec154a21a156860</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const RobotPose</type>
      <name>getRelativeLinkTF</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a3a7f93082af7d89d38f6cbeb9c0df918</anchor>
      <arglist>(const std::string &amp;base, const std::string &amp;target) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFromIK</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a96fbdc9ad5cc83d4db58753c7c90f152</anchor>
      <arglist>(const IKQuery &amp;query)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFromIK</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ac7eafa3630c4f9fce744db77a62fe688</anchor>
      <arglist>(const IKQuery &amp;query, robot_state::RobotState &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validateIKQuery</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a43e1d71ef7ace713e7c79d95d4be5c1b</anchor>
      <arglist>(const IKQuery &amp;query, const robot_state::RobotState &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToIKQuery</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a6b97e53f20f7ce245bf07fad2714de01</anchor>
      <arglist>(const IKQuery &amp;query, const robot_state::RobotState &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getSolverTipFrames</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a60d81c0fc1c6fd831eb41c9aeeb4d440</anchor>
      <arglist>(const std::string &amp;group) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getSolverBaseFrame</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a83739b58d479b6acd27c15f18f52fc9b</anchor>
      <arglist>(const std::string &amp;group) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYAMLFile</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a7bad24eea4d23359ec77d71ca3f12253</anchor>
      <arglist>(const std::string &amp;file) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dumpGeometry</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a04eb1e0b01ffe651204548001059c28a</anchor>
      <arglist>(const std::string &amp;file) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dumpTransforms</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a4684f91b2c5c1fc84d65479e15a3f90b</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dumpPathTransforms</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>aff1633c3e99adf3df2c7d94ceb166d22</anchor>
      <arglist>(const robot_trajectory::RobotTrajectory &amp;path, const std::string &amp;filename, double fps=30, double threshold=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dumpToScene</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a933eede25014603a1b3450710a7e66e0</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>ROBOT_DESCRIPTION</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ab03e40f41fc386d844838a39f78cbea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>ROBOT_SEMANTIC</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ac577a49c2378411cb1b221e911d2c8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>ROBOT_PLANNING</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ae8f9a313cf54ed88b470d5e2bd4c36e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>ROBOT_KINEMATICS</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a10221fa82796ed88e7468abaa9727db8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>loadURDFFile</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a79084c56f2799ed5e93e9bfecd1191a2</anchor>
      <arglist>(const std::string &amp;urdf_file)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>loadSRDFFile</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>affb51012a3cd82fec31da00d725af573</anchor>
      <arglist>(const std::string &amp;srdf_file)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeInternal</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a56c34a9ec1e9fc04d6af57464c6060ee</anchor>
      <arglist>(bool namespaced=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadRobotModel</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a2aea142c3ed8ae8f716ca52fc6ec7c49</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateXMLString</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a6a0938bf74b2931945564d125e751d27</anchor>
      <arglist>(std::string &amp;string, const PostProcessXMLFunction &amp;function)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::string</type>
      <name>name_</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a5ec5301565f76ffe0c5ce3653249c6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IO::Handler</type>
      <name>handler_</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a85c721ef13c1e5d3d3febc191febbf95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>urdf_</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a328c7fc7be6c8920b6222d42e07f6293</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>srdf_</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a91613bbb38adc7d70a3b0aaa3f1bf108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PostProcessXMLFunction</type>
      <name>urdf_function_</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a3aa602cf845075674d69a62cc6f8837f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PostProcessXMLFunction</type>
      <name>srdf_function_</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a571ff5f19f80e45754e481dff58ab251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PostProcessYAMLFunction</type>
      <name>limits_function_</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a5ca41a76660e44d95d046cb8eb9713a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PostProcessYAMLFunction</type>
      <name>kinematics_function_</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a75f5ff9171927216c9833d64ba293827</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; robot_model_loader::RobotModelLoader &gt;</type>
      <name>loader_</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ace593f019215c2eb4db1369db4e69153</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>robot_model::RobotModelPtr</type>
      <name>model_</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ad31a1bb919e4323b8bf127f43c6f2779</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, robot_model::SolverAllocatorFn &gt;</type>
      <name>imap_</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>acc7912155338a96a81ea6930aa8f65f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>kinematics_plugin_loader::KinematicsPluginLoaderPtr</type>
      <name>kinematics_</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a1d2adc884177ed0b6ba42b471bf9bfb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>robot_state::RobotStatePtr</type>
      <name>scratch_</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>acdf39eaeec13987878ad792cf5b7517a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a89d420099eadf0e1e144fc3b60db7c09</anchor>
      <arglist>(const std::string &amp;urdf_file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initializeKinematics</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>af854d06d2b8665b80061adf37be36886</anchor>
      <arglist>(const std::string &amp;kinematics_file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a9a242e61bb1fe25d879abd1cd350189a</anchor>
      <arglist>(const std::string &amp;urdf_file, const std::string &amp;srdf_file, const std::string &amp;limits_file=&quot;&quot;, const std::string &amp;kinematics_file=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initializeFromYAML</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a10296a03e5550fb39a6f46b40573b588</anchor>
      <arglist>(const std::string &amp;config_file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadYAMLFile</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a9939fdcbb03c7e6cbdfa40248a8e7ebc</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadYAMLFile</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ad4da99659c50e025b4e8342d960984b0</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;file, const PostProcessYAMLFunction &amp;function)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>loadXMLFile</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a5a8af445fcf650e23ac31e0b3c74754d</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setURDFPostProcessFunction</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a5ea995b274007a74b8f6181a87e2d5b5</anchor>
      <arglist>(const PostProcessXMLFunction &amp;function)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinkURDF</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a74a796257af585a511944f0698943fda</anchor>
      <arglist>(tinyxml2::XMLDocument &amp;doc, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSRDFPostProcessFunction</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a57cd4903ff4d8bb6b4702e6c96bce28d</anchor>
      <arglist>(const PostProcessXMLFunction &amp;function)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLimitsPostProcessFunction</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a0ccb737d3ba5c625e9e86a0531e10cc0</anchor>
      <arglist>(const PostProcessYAMLFunction &amp;function)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKinematicsPostProcessFunction</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a5de9e5a10617c7fc4e4fe1db787410ee</anchor>
      <arglist>(const PostProcessYAMLFunction &amp;function)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSRDFPostProcessAddPlanarJoint</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a9d45ec9150a975e78eb151f5128b42bd</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSRDFPostProcessAddFloatingJoint</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a0cb1f2b5b5dc0bd2c13ae26946f69360</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadKinematics</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>aa43fbfccc17a16eca552761b9edd71fd</anchor>
      <arglist>(const std::string &amp;group, bool load_subgroups=true)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getModelName</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>accf7eea7633af92ccb9b3efdcedb2597</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>aa5958035cdbf65441a811b72817ef139</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const robot_model::RobotModelPtr &amp;</type>
      <name>getModelConst</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ad9bd958af6eca8e2c14a76dc132273e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>robot_model::RobotModelPtr &amp;</type>
      <name>getModel</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>acab870ea49f0a952a4568ec88e5b8b58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>urdf::ModelInterfaceConstSharedPtr</type>
      <name>getURDF</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a802a1e10317966ad1a4b9e8df41e3ddd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getURDFString</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>aecb427ea7938d7de6c994d8a7bdc9ac0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>srdf::ModelConstSharedPtr</type>
      <name>getSRDF</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a5708cab292f3d08ccd9df464b98d301a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getSRDFString</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ac64b05b0999e7bce94f744621e0ba149</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IO::Handler &amp;</type>
      <name>getHandlerConst</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a58e6c221f9e3e5039f0a532e31f466b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IO::Handler &amp;</type>
      <name>getHandler</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a4b36261cf7dfdb58d98ec44e79ae7489</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const robot_model::RobotStatePtr &amp;</type>
      <name>getScratchStateConst</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ab7bd1c8c4b1ce7f4cbab8772356139bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>robot_model::RobotStatePtr &amp;</type>
      <name>getScratchState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a7f040576e15e86ee2fd84d15653bdf0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>robot_model::RobotStatePtr</type>
      <name>cloneScratchState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a501f8185d9dccda4a9bc5d5b13e13570</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>robot_model::RobotStatePtr</type>
      <name>allocState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ae0f14891e548793bdd43d422886c483b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ace2a3be0a96fa9459e5aa5b305fb3192</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;positions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ad6649b9a456ca41d0a5cd7e438d6e3c3</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;variable_map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a64952e20207bed8ef1384e684e3cb6d4</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;variable_names, const std::vector&lt; double &gt; &amp;variable_position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a7afaf4d044de180983608e05199ada3a</anchor>
      <arglist>(const sensor_msgs::JointState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>af11e3a72ba5eae5048b2bc93fbbff1cb</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateFromYAMLFile</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>af392b7dc965f5f11aa57d6c82d2ef7aa</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGroupState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a890a77440810c04f5ecd44511d713df1</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; double &gt; &amp;positions)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>getState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a15219846c3e3b04b1449c7e4ff9e08cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::RobotState</type>
      <name>getStateMsg</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>aca6acec07ae0f15af775eca3575ee6b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateMsgGroupState</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a8e2e457f15f887205a30c0fdca9a19b0</anchor>
      <arglist>(moveit_msgs::RobotState &amp;state, const std::string &amp;group, const std::vector&lt; double &gt; &amp;positions) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getJointNames</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a09a162f5080f2264ad96eaf7ed84569f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasJoint</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ad7c519af69b21162ab14319335fa399c</anchor>
      <arglist>(const std::string &amp;joint) const</arglist>
    </member>
    <member kind="function">
      <type>const RobotPose &amp;</type>
      <name>getLinkTF</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a0a00c4b4d751d0e60ec154a21a156860</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const RobotPose</type>
      <name>getRelativeLinkTF</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a3a7f93082af7d89d38f6cbeb9c0df918</anchor>
      <arglist>(const std::string &amp;base, const std::string &amp;target) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFromIK</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a96fbdc9ad5cc83d4db58753c7c90f152</anchor>
      <arglist>(const IKQuery &amp;query)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFromIK</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>ac7eafa3630c4f9fce744db77a62fe688</anchor>
      <arglist>(const IKQuery &amp;query, robot_state::RobotState &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validateIKQuery</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a43e1d71ef7ace713e7c79d95d4be5c1b</anchor>
      <arglist>(const IKQuery &amp;query, const robot_state::RobotState &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToIKQuery</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a6b97e53f20f7ce245bf07fad2714de01</anchor>
      <arglist>(const IKQuery &amp;query, const robot_state::RobotState &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getSolverTipFrames</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a60d81c0fc1c6fd831eb41c9aeeb4d440</anchor>
      <arglist>(const std::string &amp;group) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getSolverBaseFrame</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a83739b58d479b6acd27c15f18f52fc9b</anchor>
      <arglist>(const std::string &amp;group) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYAMLFile</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a7bad24eea4d23359ec77d71ca3f12253</anchor>
      <arglist>(const std::string &amp;file) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dumpGeometry</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a04eb1e0b01ffe651204548001059c28a</anchor>
      <arglist>(const std::string &amp;file) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dumpTransforms</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a4684f91b2c5c1fc84d65479e15a3f90b</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dumpPathTransforms</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>aff1633c3e99adf3df2c7d94ceb166d22</anchor>
      <arglist>(const robot_trajectory::RobotTrajectory &amp;path, const std::string &amp;filename, double fps=30, double threshold=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dumpToScene</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a933eede25014603a1b3450710a7e66e0</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>loadURDFFile</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a79084c56f2799ed5e93e9bfecd1191a2</anchor>
      <arglist>(const std::string &amp;urdf_file)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>loadSRDFFile</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>affb51012a3cd82fec31da00d725af573</anchor>
      <arglist>(const std::string &amp;srdf_file)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeInternal</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a56c34a9ec1e9fc04d6af57464c6060ee</anchor>
      <arglist>(bool namespaced=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadRobotModel</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a2aea142c3ed8ae8f716ca52fc6ec7c49</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateXMLString</name>
      <anchorfile>classrobowflex_1_1Robot.html</anchorfile>
      <anchor>a6a0938bf74b2931945564d125e751d27</anchor>
      <arglist>(std::string &amp;string, const PostProcessXMLFunction &amp;function)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>robowflex::Robot::IKQuery</name>
    <filename>structrobowflex_1_1Robot_1_1IKQuery.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const robot_state::RobotState &amp;state, const SceneConstPtr &amp;scene, const kinematic_constraints::ConstraintEvaluationResult &amp;result)&gt;</type>
      <name>Metric</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a3e64b9e68c9d5c1811a74ec55afc4565</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>ae826274aca38b087dc0f05c61c077201</anchor>
      <arglist>(const std::string &amp;group)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a19782125bb58dff5d1b9f494f23ef09d</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;tip, const robot_state::RobotState &amp;start, const Eigen::Vector3d &amp;direction, double distance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a4515377b392d0286a274528368e90144</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;tip, const robot_state::RobotState &amp;start, const Eigen::Vector3d &amp;position_offset, const Eigen::Quaterniond &amp;rotation_offset=Eigen::Quaterniond::Identity())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a22f01414468e30b6430dc72dfdcbb955</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;tip, const robot_state::RobotState &amp;start, const RobotPose &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a68a3196ac5e2c9d03cd21f1fee99f64a</anchor>
      <arglist>(const std::string &amp;group, const RobotPose &amp;pose, double radius=constants::ik_tolerance, const Eigen::Vector3d &amp;tolerance=constants::ik_vec_tolerance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>add206f103566a46f613234a0c61767ee</anchor>
      <arglist>(const std::string &amp;group, const Eigen::Vector3d &amp;position, const Eigen::Quaterniond &amp;orientation, double radius=constants::ik_tolerance, const Eigen::Vector3d &amp;tolerance=constants::ik_vec_tolerance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>ae39ec844096e87a2424178f715a75468</anchor>
      <arglist>(const std::string &amp;group, const GeometryConstPtr &amp;region, const RobotPose &amp;pose, const Eigen::Quaterniond &amp;orientation, const Eigen::Vector3d &amp;tolerance=constants::ik_vec_tolerance, const ScenePtr &amp;scene=nullptr, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>ae7d3f88b3045e0f5e93c1332e1a2c8e3</anchor>
      <arglist>(const std::string &amp;group, const RobotPose &amp;offset, const ScenePtr &amp;scene, const std::string &amp;object, const Eigen::Vector3d &amp;tolerances=constants::ik_vec_tolerance, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a57ca9ca2abfce227db277cbc708ba0ee</anchor>
      <arglist>(const std::string &amp;group, const moveit_msgs::PositionConstraint &amp;pc, const moveit_msgs::OrientationConstraint &amp;oc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>afc068d0beb0a24a9a4b13e1dfc243bf3</anchor>
      <arglist>(const std::string &amp;group, const RobotPoseVector &amp;poses, const std::vector&lt; std::string &gt; &amp;input_tips, double radius=constants::ik_tolerance, const Eigen::Vector3d &amp;tolerance=constants::ik_vec_tolerance, const ScenePtr &amp;scene=nullptr, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>aa74d52830500ab7852072456a9d8ebcc</anchor>
      <arglist>(const std::string &amp;group, const std::vector&lt; std::string &gt; &amp;input_tips, const std::vector&lt; GeometryConstPtr &gt; &amp;regions, const RobotPoseVector &amp;poses, const std::vector&lt; Eigen::Quaterniond &gt; &amp;orientations, const EigenSTL::vector_Vector3d &amp;tolerances, const ScenePtr &amp;scene=nullptr, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRequest</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a08a1ec3f648e50f8f6cc655ab2fc2828</anchor>
      <arglist>(const std::string &amp;tip, const GeometryConstPtr &amp;region, const RobotPose &amp;pose, const Eigen::Quaterniond &amp;orientation, const Eigen::Vector3d &amp;tolerance=constants::ik_vec_tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScene</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a80ae1c0d8703ebd7a7a4f8681c8ad555</anchor>
      <arglist>(const ScenePtr &amp;scene, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMetric</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>aa5c563eb2b3cec884cca07a0e9b900a6</anchor>
      <arglist>(const Metric &amp;metric_function)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDistanceMetric</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>ade0d3a54aec50405720451fe599523bc</anchor>
      <arglist>(double weight=1.)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCenteringMetric</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a22bb1259a75d75f572ca8af4ec09781f</anchor>
      <arglist>(double weight=1.)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addClearanceMetric</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a4ceeb73338860f4b2d14536f890fcbbc</anchor>
      <arglist>(double weight=1.)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sampleRegion</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a5fb11ac1987e7f9a1725c9ef0ec6fb2c</anchor>
      <arglist>(RobotPose &amp;pose, std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sampleRegions</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a7b29f5009d580b0c120421eb957e68ce</anchor>
      <arglist>(RobotPoseVector &amp;poses) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMessage</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>aff5d7d99d3863f12dd21a13da0d60abf</anchor>
      <arglist>(const std::string &amp;base_frame, moveit_msgs::Constraints &amp;msg) const</arglist>
    </member>
    <member kind="function">
      <type>kinematic_constraints::KinematicConstraintSetPtr</type>
      <name>getAsConstraints</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a6e01abfc85b92b4d75a15e8fda89524a</anchor>
      <arglist>(const Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMetricValue</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a80451c88ee6ddbca4f6935e4e90e47c8</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const kinematic_constraints::ConstraintEvaluationResult &amp;result) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ROBOWFLEX_EIGEN</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>ac1cf48edbe8719f1a68c643d76544b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>group</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a2e6147e15635ca9909d2c54e166e45d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>tips</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>ae281b3c05511027a7755e9dca1ed1889</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; GeometryConstPtr &gt;</type>
      <name>regions</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>aec85fd0882948ea6ff01855da00c3de0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RobotPoseVector</type>
      <name>region_poses</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>ad8fffb64a65e67c8528f0351ba2a5529</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Eigen::Quaterniond &gt;</type>
      <name>orientations</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a86d335e0e69f28be220984057c21ddd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EigenSTL::vector_Vector3d</type>
      <name>tolerances</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a52c848d44c542ea5d18f7b296aa5fc4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SceneConstPtr</type>
      <name>scene</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a89b413ebeaa5a9390ae1fef91ebcdddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a4c56fd28e3eca67700534d457c0145ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>random_restart</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>aa66b72b5259b149dc54e6fdd895e7723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>kinematics::KinematicsQueryOptions</type>
      <name>options</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a1f7235a2b0f0fe476e8c2dfd8ccf5638</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>attempts</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>adc330c72a1517e3910ebc137d6e81149</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>timeout</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a852b75b3147b17fc539abdb79bf220a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>aab0b5ab690e5cfa51544ba2e80cfa922</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>valid_distance</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a78f0aaa8cc2a51f10633fa2d80b8f904</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Metric &gt;</type>
      <name>metrics</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a9511605a086b377e7b2456ecb0089820</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>group</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a2e6147e15635ca9909d2c54e166e45d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>tips</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>ae281b3c05511027a7755e9dca1ed1889</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; GeometryConstPtr &gt;</type>
      <name>regions</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>aec85fd0882948ea6ff01855da00c3de0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RobotPoseVector</type>
      <name>region_poses</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>ad8fffb64a65e67c8528f0351ba2a5529</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Eigen::Quaterniond &gt;</type>
      <name>orientations</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a86d335e0e69f28be220984057c21ddd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EigenSTL::vector_Vector3d</type>
      <name>tolerances</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a52c848d44c542ea5d18f7b296aa5fc4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SceneConstPtr</type>
      <name>scene</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a89b413ebeaa5a9390ae1fef91ebcdddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a4c56fd28e3eca67700534d457c0145ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>random_restart</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>aa66b72b5259b149dc54e6fdd895e7723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>kinematics::KinematicsQueryOptions</type>
      <name>options</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a1f7235a2b0f0fe476e8c2dfd8ccf5638</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>attempts</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>adc330c72a1517e3910ebc137d6e81149</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>timeout</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a852b75b3147b17fc539abdb79bf220a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>aab0b5ab690e5cfa51544ba2e80cfa922</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>valid_distance</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a78f0aaa8cc2a51f10633fa2d80b8f904</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Metric &gt;</type>
      <name>metrics</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a9511605a086b377e7b2456ecb0089820</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a19782125bb58dff5d1b9f494f23ef09d</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;tip, const robot_state::RobotState &amp;start, const Eigen::Vector3d &amp;direction, double distance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a4515377b392d0286a274528368e90144</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;tip, const robot_state::RobotState &amp;start, const Eigen::Vector3d &amp;position_offset, const Eigen::Quaterniond &amp;rotation_offset=Eigen::Quaterniond::Identity())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a22f01414468e30b6430dc72dfdcbb955</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;tip, const robot_state::RobotState &amp;start, const RobotPose &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a68a3196ac5e2c9d03cd21f1fee99f64a</anchor>
      <arglist>(const std::string &amp;group, const RobotPose &amp;pose, double radius=constants::ik_tolerance, const Eigen::Vector3d &amp;tolerance=constants::ik_vec_tolerance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>add206f103566a46f613234a0c61767ee</anchor>
      <arglist>(const std::string &amp;group, const Eigen::Vector3d &amp;position, const Eigen::Quaterniond &amp;orientation, double radius=constants::ik_tolerance, const Eigen::Vector3d &amp;tolerance=constants::ik_vec_tolerance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>ae39ec844096e87a2424178f715a75468</anchor>
      <arglist>(const std::string &amp;group, const GeometryConstPtr &amp;region, const RobotPose &amp;pose, const Eigen::Quaterniond &amp;orientation, const Eigen::Vector3d &amp;tolerance=constants::ik_vec_tolerance, const ScenePtr &amp;scene=nullptr, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>ae7d3f88b3045e0f5e93c1332e1a2c8e3</anchor>
      <arglist>(const std::string &amp;group, const RobotPose &amp;offset, const ScenePtr &amp;scene, const std::string &amp;object, const Eigen::Vector3d &amp;tolerances=constants::ik_vec_tolerance, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a57ca9ca2abfce227db277cbc708ba0ee</anchor>
      <arglist>(const std::string &amp;group, const moveit_msgs::PositionConstraint &amp;pc, const moveit_msgs::OrientationConstraint &amp;oc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>afc068d0beb0a24a9a4b13e1dfc243bf3</anchor>
      <arglist>(const std::string &amp;group, const RobotPoseVector &amp;poses, const std::vector&lt; std::string &gt; &amp;input_tips, double radius=constants::ik_tolerance, const Eigen::Vector3d &amp;tolerance=constants::ik_vec_tolerance, const ScenePtr &amp;scene=nullptr, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IKQuery</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>aa74d52830500ab7852072456a9d8ebcc</anchor>
      <arglist>(const std::string &amp;group, const std::vector&lt; std::string &gt; &amp;input_tips, const std::vector&lt; GeometryConstPtr &gt; &amp;regions, const RobotPoseVector &amp;poses, const std::vector&lt; Eigen::Quaterniond &gt; &amp;orientations, const EigenSTL::vector_Vector3d &amp;tolerances, const ScenePtr &amp;scene=nullptr, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRequest</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a08a1ec3f648e50f8f6cc655ab2fc2828</anchor>
      <arglist>(const std::string &amp;tip, const GeometryConstPtr &amp;region, const RobotPose &amp;pose, const Eigen::Quaterniond &amp;orientation, const Eigen::Vector3d &amp;tolerance=constants::ik_vec_tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScene</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a80ae1c0d8703ebd7a7a4f8681c8ad555</anchor>
      <arglist>(const ScenePtr &amp;scene, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMetric</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>aa5c563eb2b3cec884cca07a0e9b900a6</anchor>
      <arglist>(const Metric &amp;metric_function)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDistanceMetric</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>ade0d3a54aec50405720451fe599523bc</anchor>
      <arglist>(double weight=1.)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCenteringMetric</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a22bb1259a75d75f572ca8af4ec09781f</anchor>
      <arglist>(double weight=1.)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addClearanceMetric</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a4ceeb73338860f4b2d14536f890fcbbc</anchor>
      <arglist>(double weight=1.)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sampleRegion</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a5fb11ac1987e7f9a1725c9ef0ec6fb2c</anchor>
      <arglist>(RobotPose &amp;pose, std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sampleRegions</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a7b29f5009d580b0c120421eb957e68ce</anchor>
      <arglist>(RobotPoseVector &amp;poses) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMessage</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>aff5d7d99d3863f12dd21a13da0d60abf</anchor>
      <arglist>(const std::string &amp;base_frame, moveit_msgs::Constraints &amp;msg) const</arglist>
    </member>
    <member kind="function">
      <type>kinematic_constraints::KinematicConstraintSetPtr</type>
      <name>getAsConstraints</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a6e01abfc85b92b4d75a15e8fda89524a</anchor>
      <arglist>(const Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMetricValue</name>
      <anchorfile>structrobowflex_1_1Robot_1_1IKQuery.html</anchorfile>
      <anchor>a80451c88ee6ddbca4f6935e4e90e47c8</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const kinematic_constraints::ConstraintEvaluationResult &amp;result) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::RobotConstPtr</name>
    <filename>classrobowflex_1_1RobotConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::RobotPtr</name>
    <filename>classrobowflex_1_1RobotPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::ROS</name>
    <filename>classrobowflex_1_1ROS.html</filename>
    <member kind="function">
      <type></type>
      <name>ROS</name>
      <anchorfile>classrobowflex_1_1ROS.html</anchorfile>
      <anchor>a568777a2eaae9960669a6ab59cd0444c</anchor>
      <arglist>(int argc, char **argv, const std::string &amp;name=&quot;robowflex&quot;, unsigned int threads=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ROS</name>
      <anchorfile>classrobowflex_1_1ROS.html</anchorfile>
      <anchor>abb984791d23332628d190bc35e03679c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getArgs</name>
      <anchorfile>classrobowflex_1_1ROS.html</anchorfile>
      <anchor>a714cc3a488fed9013f4448634318fa20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>classrobowflex_1_1ROS.html</anchorfile>
      <anchor>a9687b5c346f331645e9af8418e8882a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>argc_</name>
      <anchorfile>classrobowflex_1_1ROS.html</anchorfile>
      <anchor>ae56aa0b489efd8edb4e78881663c9915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char **</type>
      <name>argv_</name>
      <anchorfile>classrobowflex_1_1ROS.html</anchorfile>
      <anchor>a02a4d3fab0fbfadb5cefbeb107e728c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::Scene</name>
    <filename>classrobowflex_1_1Scene.html</filename>
    <base>robowflex::ID</base>
    <class kind="class">robowflex::Scene::CollisionPluginLoader</class>
    <member kind="function">
      <type></type>
      <name>Scene</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>ab17fdf219c3ee8f1d77541ee3b4115f0</anchor>
      <arglist>(const RobotConstPtr &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Scene</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a05afc1260986ed671c6f4dd2408238f8</anchor>
      <arglist>(const robot_model::RobotModelConstPtr &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Scene</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>aae99632f6bac1360a8c7463c9ab0f613</anchor>
      <arglist>(const Scene &amp;scene)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>aa2771dc5c436b1fb4fe38e5943613741</anchor>
      <arglist>(const Scene &amp;scene)</arglist>
    </member>
    <member kind="function">
      <type>ScenePtr</type>
      <name>deepCopy</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a4692732bcf710bff1ef1faa76eeba617</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const planning_scene::PlanningScenePtr &amp;</type>
      <name>getSceneConst</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a7e3ec5011e09fb8c42614d6af5973990</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>planning_scene::PlanningScenePtr &amp;</type>
      <name>getScene</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a946e2f3150209cd07d7bddb0d2d3e303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::PlanningScene</type>
      <name>getMessage</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a6728fbc58d809906d33186cb2447b562</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>robot_state::RobotState &amp;</type>
      <name>getCurrentState</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a9ec3b6fee58cfdac9d7579e241eedc75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const robot_state::RobotState &amp;</type>
      <name>getCurrentStateConst</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>add0d14617090b6bf2b272cc7063413e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>collision_detection::AllowedCollisionMatrix &amp;</type>
      <name>getACM</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a6946c43ac70d64d1beb54e408d90378e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::AllowedCollisionMatrix &amp;</type>
      <name>getACMConst</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>ac87efb054100d569f281d40c65dbab78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useMessage</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a46e691ddb85f60a851cf1a5d079e5f75</anchor>
      <arglist>(const moveit_msgs::PlanningScene &amp;msg, bool diff=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateCollisionObject</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>af282bbc4b34bc01259b53416f548d942</anchor>
      <arglist>(const std::string &amp;name, const GeometryConstPtr &amp;geometry, const RobotPose &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasObject</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a91abea28fcc56f39ae07e383f4eace58</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getCollisionObjects</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a6f627fee3776c44edab07ac7f5c0522a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryPtr</type>
      <name>getObjectGeometry</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a9f8da9ae590345b2350e6dc0d5fd47a1</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCollisionObject</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a66550f4e75ccb87860fc2b3ff43e73d3</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>getObjectPose</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a4a9d787322b4d38f1ee37a7cc99ba32b</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>getObjectGraspPose</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>acc62ed7d22f85aaa23caf45ee5cc5cb7</anchor>
      <arglist>(const std::string &amp;name, const RobotPose &amp;offset) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveAllObjectsGlobal</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>af9974b026f1096df403a0976f132d65c</anchor>
      <arglist>(const RobotPose &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveObjectGlobal</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a13bce242c090daec15e1640b06c46bb0</anchor>
      <arglist>(const std::string &amp;name, const RobotPose &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveObjectLocal</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>afa272fdeeea090194c178dfbbaad94be</anchor>
      <arglist>(const std::string &amp;name, const RobotPose &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>getFramePose</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a8587f3a88500f34cc44a6b15cd814b11</anchor>
      <arglist>(const std::string &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setCollisionDetector</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>ae1b2ce6565ce7288b73d69e9ce1f3a3e</anchor>
      <arglist>(const std::string &amp;detector_name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>attachObjectToState</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a66594faa242f35b09b4fbc2378c2cffc</anchor>
      <arglist>(robot_state::RobotState &amp;state, const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>attachObjectToState</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>acfaa67fd85e2b3590a06eb9037031b40</anchor>
      <arglist>(robot_state::RobotState &amp;state, const std::string &amp;name, const std::string &amp;ee_link, const std::vector&lt; std::string &gt; &amp;touch_links) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>attachObject</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>acf80ca513d91260f818ffd09ac33b102</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>attachObject</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a4521834ebb96837aa5cf491513a76872</anchor>
      <arglist>(robot_state::RobotState &amp;state, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>attachObject</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a35ed474e567b219e62213c09435734d8</anchor>
      <arglist>(robot_state::RobotState &amp;state, const std::string &amp;name, const std::string &amp;ee_link, const std::vector&lt; std::string &gt; &amp;touch_links)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>detachObject</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a597071696f8ae08885be81390738380c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>detachObject</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>aa59488285d37bf764375c55b11a5179c</anchor>
      <arglist>(robot_state::RobotState &amp;state, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>collision_detection::CollisionResult</type>
      <name>checkCollision</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>ae9e6f67ae797e9368773cf1195e35e7c</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const collision_detection::CollisionRequest &amp;request={}) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToCollision</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a026040ff068e57b4bd38a23c80f7aa1d</anchor>
      <arglist>(const robot_state::RobotState &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToObject</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a56dbdad325808b57f3bb7c9c7fb35e54</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const std::string &amp;object) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceBetweenObjects</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>ac1ba7e1fcac83e81baa1fef70c0bf36b</anchor>
      <arglist>(const std::string &amp;one, const std::string &amp;two) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceACM</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a48de756280c612d554560cf64635d078</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const collision_detection::AllowedCollisionMatrix &amp;acm) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearACM</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a1e6544ff30fc9d605909d003e3ff1178</anchor>
      <arglist>(collision_detection::AllowedCollisionMatrix &amp;acm) const</arglist>
    </member>
    <member kind="function">
      <type>moveit::core::GroupStateValidityCallbackFn</type>
      <name>getGSVCF</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a498a503484ddef792228ef0b2ed9fba6</anchor>
      <arglist>(bool verbose) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYAMLFile</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a7bc3787d34e77e4b04434eb7319f458c</anchor>
      <arglist>(const std::string &amp;file) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromYAMLFile</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a575b1a28985a1a90bd5b2588c2a8fe6a</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromOpenRAVEXMLFile</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>af0d06ecf282f0acd44d502d6f461e12f</anchor>
      <arglist>(const std::string &amp;file, std::string models_dir=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>fixCollisionObjectFrame</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a52fef7f36481712925cb80652f9c3dc5</anchor>
      <arglist>(moveit_msgs::PlanningScene &amp;msg)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CollisionPluginLoaderPtr</type>
      <name>loader_</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a4155bec4e60824349316776c81120f4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>planning_scene::PlanningScenePtr</type>
      <name>scene_</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a1fd81e46bebc8bf34f2bfe33df4ee880</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const planning_scene::PlanningScenePtr &amp;</type>
      <name>getSceneConst</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a7e3ec5011e09fb8c42614d6af5973990</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>planning_scene::PlanningScenePtr &amp;</type>
      <name>getScene</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a946e2f3150209cd07d7bddb0d2d3e303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::PlanningScene</type>
      <name>getMessage</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a6728fbc58d809906d33186cb2447b562</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>robot_state::RobotState &amp;</type>
      <name>getCurrentState</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a9ec3b6fee58cfdac9d7579e241eedc75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const robot_state::RobotState &amp;</type>
      <name>getCurrentStateConst</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>add0d14617090b6bf2b272cc7063413e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>collision_detection::AllowedCollisionMatrix &amp;</type>
      <name>getACM</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a6946c43ac70d64d1beb54e408d90378e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const collision_detection::AllowedCollisionMatrix &amp;</type>
      <name>getACMConst</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>ac87efb054100d569f281d40c65dbab78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useMessage</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a46e691ddb85f60a851cf1a5d079e5f75</anchor>
      <arglist>(const moveit_msgs::PlanningScene &amp;msg, bool diff=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateCollisionObject</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>af282bbc4b34bc01259b53416f548d942</anchor>
      <arglist>(const std::string &amp;name, const GeometryConstPtr &amp;geometry, const RobotPose &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasObject</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a91abea28fcc56f39ae07e383f4eace58</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getCollisionObjects</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a6f627fee3776c44edab07ac7f5c0522a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryPtr</type>
      <name>getObjectGeometry</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a9f8da9ae590345b2350e6dc0d5fd47a1</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCollisionObject</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a66550f4e75ccb87860fc2b3ff43e73d3</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>getObjectPose</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a4a9d787322b4d38f1ee37a7cc99ba32b</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>getObjectGraspPose</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>acc62ed7d22f85aaa23caf45ee5cc5cb7</anchor>
      <arglist>(const std::string &amp;name, const RobotPose &amp;offset) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveAllObjectsGlobal</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>af9974b026f1096df403a0976f132d65c</anchor>
      <arglist>(const RobotPose &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveObjectGlobal</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a13bce242c090daec15e1640b06c46bb0</anchor>
      <arglist>(const std::string &amp;name, const RobotPose &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveObjectLocal</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>afa272fdeeea090194c178dfbbaad94be</anchor>
      <arglist>(const std::string &amp;name, const RobotPose &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>getFramePose</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a8587f3a88500f34cc44a6b15cd814b11</anchor>
      <arglist>(const std::string &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setCollisionDetector</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>ae1b2ce6565ce7288b73d69e9ce1f3a3e</anchor>
      <arglist>(const std::string &amp;detector_name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>attachObjectToState</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a66594faa242f35b09b4fbc2378c2cffc</anchor>
      <arglist>(robot_state::RobotState &amp;state, const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>attachObjectToState</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>acfaa67fd85e2b3590a06eb9037031b40</anchor>
      <arglist>(robot_state::RobotState &amp;state, const std::string &amp;name, const std::string &amp;ee_link, const std::vector&lt; std::string &gt; &amp;touch_links) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>attachObject</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>acf80ca513d91260f818ffd09ac33b102</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>attachObject</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a4521834ebb96837aa5cf491513a76872</anchor>
      <arglist>(robot_state::RobotState &amp;state, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>attachObject</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a35ed474e567b219e62213c09435734d8</anchor>
      <arglist>(robot_state::RobotState &amp;state, const std::string &amp;name, const std::string &amp;ee_link, const std::vector&lt; std::string &gt; &amp;touch_links)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>detachObject</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a597071696f8ae08885be81390738380c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>detachObject</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>aa59488285d37bf764375c55b11a5179c</anchor>
      <arglist>(robot_state::RobotState &amp;state, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>collision_detection::CollisionResult</type>
      <name>checkCollision</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>ae9e6f67ae797e9368773cf1195e35e7c</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const collision_detection::CollisionRequest &amp;request={}) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToCollision</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a026040ff068e57b4bd38a23c80f7aa1d</anchor>
      <arglist>(const robot_state::RobotState &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToObject</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a56dbdad325808b57f3bb7c9c7fb35e54</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const std::string &amp;object) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceBetweenObjects</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>ac1ba7e1fcac83e81baa1fef70c0bf36b</anchor>
      <arglist>(const std::string &amp;one, const std::string &amp;two) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceACM</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a48de756280c612d554560cf64635d078</anchor>
      <arglist>(const robot_state::RobotState &amp;state, const collision_detection::AllowedCollisionMatrix &amp;acm) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearACM</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a1e6544ff30fc9d605909d003e3ff1178</anchor>
      <arglist>(collision_detection::AllowedCollisionMatrix &amp;acm) const</arglist>
    </member>
    <member kind="function">
      <type>moveit::core::GroupStateValidityCallbackFn</type>
      <name>getGSVCF</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a498a503484ddef792228ef0b2ed9fba6</anchor>
      <arglist>(bool verbose) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYAMLFile</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a7bc3787d34e77e4b04434eb7319f458c</anchor>
      <arglist>(const std::string &amp;file) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromYAMLFile</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>a575b1a28985a1a90bd5b2588c2a8fe6a</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromOpenRAVEXMLFile</name>
      <anchorfile>classrobowflex_1_1Scene.html</anchorfile>
      <anchor>af0d06ecf282f0acd44d502d6f461e12f</anchor>
      <arglist>(const std::string &amp;file, std::string models_dir=&quot;&quot;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::Scene::CollisionPluginLoader</name>
    <filename>classrobowflex_1_1Scene_1_1CollisionPluginLoader.html</filename>
    <member kind="function">
      <type></type>
      <name>CollisionPluginLoader</name>
      <anchorfile>classrobowflex_1_1Scene_1_1CollisionPluginLoader.html</anchorfile>
      <anchor>ab6ecf75433eff83d73f80b39ee4cc2bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>collision_detection::CollisionPluginPtr</type>
      <name>load</name>
      <anchorfile>classrobowflex_1_1Scene_1_1CollisionPluginLoader.html</anchorfile>
      <anchor>a5d547ed0c8656390a74438d7ba1508a6</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>activate</name>
      <anchorfile>classrobowflex_1_1Scene_1_1CollisionPluginLoader.html</anchorfile>
      <anchor>ace999b7a66fcef277d0124dad060aff5</anchor>
      <arglist>(const std::string &amp;name, const planning_scene::PlanningScenePtr &amp;scene, bool exclusive)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>pluginlib::ClassLoader&lt; collision_detection::CollisionPlugin &gt;</type>
      <name>PluginLoader</name>
      <anchorfile>classrobowflex_1_1Scene_1_1CollisionPluginLoader.html</anchorfile>
      <anchor>a107d03d78faf8fb24227ce5348720921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; PluginLoader &gt;</type>
      <name>loader_</name>
      <anchorfile>classrobowflex_1_1Scene_1_1CollisionPluginLoader.html</anchorfile>
      <anchor>aca5722fa74fb631420c18b0900a50bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, collision_detection::CollisionPluginPtr &gt;</type>
      <name>plugins_</name>
      <anchorfile>classrobowflex_1_1Scene_1_1CollisionPluginLoader.html</anchorfile>
      <anchor>a8ecae50b45f691ebe3eddc3264238e99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::SceneConstPtr</name>
    <filename>classrobowflex_1_1SceneConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::ScenePtr</name>
    <filename>classrobowflex_1_1ScenePtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::SimpleCartesianPlanner</name>
    <filename>classrobowflex_1_1SimpleCartesianPlanner.html</filename>
    <base>robowflex::Planner</base>
    <member kind="function">
      <type></type>
      <name>SimpleCartesianPlanner</name>
      <anchorfile>classrobowflex_1_1SimpleCartesianPlanner.html</anchorfile>
      <anchor>a33bc7bee53885f94df3aba80c3f38863</anchor>
      <arglist>(const RobotPtr &amp;robot, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleCartesianPlanner</name>
      <anchorfile>classrobowflex_1_1SimpleCartesianPlanner.html</anchorfile>
      <anchor>a238be242d904571e8cd9b3c7672949fc</anchor>
      <arglist>(SimpleCartesianPlanner const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classrobowflex_1_1SimpleCartesianPlanner.html</anchorfile>
      <anchor>ad2c5e392b1f2e031348fabb9933c2522</anchor>
      <arglist>(SimpleCartesianPlanner const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>planning_interface::MotionPlanResponse</type>
      <name>plan</name>
      <anchorfile>classrobowflex_1_1SimpleCartesianPlanner.html</anchorfile>
      <anchor>a098155fc25740894bf90fcf1d891f649</anchor>
      <arglist>(const robot_state::RobotState &amp;start, const Robot::IKQuery &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>planning_interface::MotionPlanResponse</type>
      <name>plan</name>
      <anchorfile>classrobowflex_1_1SimpleCartesianPlanner.html</anchorfile>
      <anchor>a3e9d34bdeda1ebcac9d20863b57e445a</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxStep</name>
      <anchorfile>classrobowflex_1_1SimpleCartesianPlanner.html</anchorfile>
      <anchor>a9a1632e4e797f3b938d7fd572fd8458c</anchor>
      <arglist>(double position, double rotation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJumpThreshold</name>
      <anchorfile>classrobowflex_1_1SimpleCartesianPlanner.html</anchorfile>
      <anchor>a31167fbca47b496fe271c6758fb8b37c</anchor>
      <arglist>(double prismatic, double revolute)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getPlannerConfigs</name>
      <anchorfile>classrobowflex_1_1SimpleCartesianPlanner.html</anchorfile>
      <anchor>a3de84536a33ac068944a53c121074055</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>max_step_pos_</name>
      <anchorfile>classrobowflex_1_1SimpleCartesianPlanner.html</anchorfile>
      <anchor>a96352c0cbe54200cf9e6aa1c18f6cca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>max_step_rot_</name>
      <anchorfile>classrobowflex_1_1SimpleCartesianPlanner.html</anchorfile>
      <anchor>a528ece5741b6414d8a4e75f679b65537</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>jump_threshold_pri_</name>
      <anchorfile>classrobowflex_1_1SimpleCartesianPlanner.html</anchorfile>
      <anchor>a06ad7f5a5b7436308a4a217086ea7e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>jump_threshold_rev_</name>
      <anchorfile>classrobowflex_1_1SimpleCartesianPlanner.html</anchorfile>
      <anchor>a477c041b320e95ced101da6432c8e4c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::SimpleCartesianPlannerConstPtr</name>
    <filename>classrobowflex_1_1SimpleCartesianPlannerConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::SimpleCartesianPlannerPtr</name>
    <filename>classrobowflex_1_1SimpleCartesianPlannerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::Trajectory</name>
    <filename>classrobowflex_1_1Trajectory.html</filename>
    <member kind="function">
      <type></type>
      <name>Trajectory</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>a037c33664e7ddd9ecc4cb3de97f5fc09</anchor>
      <arglist>(const RobotConstPtr &amp;robot, const std::string &amp;group)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Trajectory</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>af206308d3cf6a47954a34764cc66ead2</anchor>
      <arglist>(const robot_trajectory::RobotTrajectory &amp;trajectory)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Trajectory</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>a0f1d2aed4490c411b57f0374665524a4</anchor>
      <arglist>(const robot_trajectory::RobotTrajectoryPtr trajectory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useMessage</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>adb3ab8258b812a90f80c983f956543ae</anchor>
      <arglist>(const robot_state::RobotState &amp;reference_state, const moveit_msgs::RobotTrajectory &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useMessage</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>adf0d9b29a082bb556519615d8e389328</anchor>
      <arglist>(const robot_state::RobotState &amp;reference_state, const trajectory_msgs::JointTrajectory &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYAMLFile</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>ac3f81d18624eed7a8212e2639a6525ad</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromYAMLFile</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>aa632906060c1a3894b0e8b6ec0fe8dfc</anchor>
      <arglist>(const robot_state::RobotState &amp;reference_state, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>const robot_trajectory::RobotTrajectoryPtr &amp;</type>
      <name>getTrajectoryConst</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>ab57e77984c66d4575ad90a7eaf316d71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>robot_trajectory::RobotTrajectoryPtr &amp;</type>
      <name>getTrajectory</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>acf0b2194ad9fe40442300c21158f3031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::RobotTrajectory</type>
      <name>getMessage</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>af1dced9b9321c588e3d7d38f7c924850</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumWaypoints</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>af4f9358473b047c88199e49bb8d75e90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSuffixWaypoint</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>abd84905c6d043d7d0cb44eb1d1c433de</anchor>
      <arglist>(const robot_state::RobotState &amp;state, double dt=1.)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLength</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>ac676af882b69a5f354155b4023dfa92a</anchor>
      <arglist>(const PathMetric &amp;metric={}) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCollisionFree</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>acee9a0da5f88768e38490c411935266f</anchor>
      <arglist>(const SceneConstPtr &amp;scene) const</arglist>
    </member>
    <member kind="function">
      <type>std::tuple&lt; double, double, double &gt;</type>
      <name>getClearance</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>ac90ef13682091ca069fe3c5a48c7efc8</anchor>
      <arglist>(const SceneConstPtr &amp;scene) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSmoothness</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>ad3a233583624eca7c458144809334cf7</anchor>
      <arglist>(const PathMetric &amp;metric={}) const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getFinalPositions</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>a639471360d644cfff3a7001cb5da4deb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>robot_trajectory::RobotTrajectoryPtr</type>
      <name>trajectory_</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>a7755ea2d99f83f3028a59ed77f9e757f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useMessage</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>adb3ab8258b812a90f80c983f956543ae</anchor>
      <arglist>(const robot_state::RobotState &amp;reference_state, const moveit_msgs::RobotTrajectory &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useMessage</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>adf0d9b29a082bb556519615d8e389328</anchor>
      <arglist>(const robot_state::RobotState &amp;reference_state, const trajectory_msgs::JointTrajectory &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYAMLFile</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>ac3f81d18624eed7a8212e2639a6525ad</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromYAMLFile</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>aa632906060c1a3894b0e8b6ec0fe8dfc</anchor>
      <arglist>(const robot_state::RobotState &amp;reference_state, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>const robot_trajectory::RobotTrajectoryPtr &amp;</type>
      <name>getTrajectoryConst</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>ab57e77984c66d4575ad90a7eaf316d71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>robot_trajectory::RobotTrajectoryPtr &amp;</type>
      <name>getTrajectory</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>acf0b2194ad9fe40442300c21158f3031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::RobotTrajectory</type>
      <name>getMessage</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>af1dced9b9321c588e3d7d38f7c924850</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumWaypoints</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>af4f9358473b047c88199e49bb8d75e90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSuffixWaypoint</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>abd84905c6d043d7d0cb44eb1d1c433de</anchor>
      <arglist>(const robot_state::RobotState &amp;state, double dt=1.)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeTimeParameterization</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>a379fce5d6f700b6485733326b3ac8694</anchor>
      <arglist>(double max_velocity=1., double max_acceleration=1.)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>a2ed74d94613e99d57548902ac428ec67</anchor>
      <arglist>(unsigned int count)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>vectorize</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>a84c4341acc40589eb60f77001c26bdfa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getJointNames</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>ab6c74813b41788a8d8c91fac3cde354c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Trajectory &amp;</type>
      <name>append</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>a508febae81553c9965fb55d91a11e219</anchor>
      <arglist>(const Trajectory &amp;source, double dt, size_t start_index=0, size_t end_index=std::numeric_limits&lt; std::size_t &gt;::max())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>computeTimeParameterization</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>a96cced3a33b4decb33d806c64ae68bac</anchor>
      <arglist>(robot_trajectory::RobotTrajectory &amp;trajectory, double max_velocity=1., double max_acceleration=1.)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLength</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>ac676af882b69a5f354155b4023dfa92a</anchor>
      <arglist>(const PathMetric &amp;metric={}) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCollisionFree</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>acee9a0da5f88768e38490c411935266f</anchor>
      <arglist>(const SceneConstPtr &amp;scene) const</arglist>
    </member>
    <member kind="function">
      <type>std::tuple&lt; double, double, double &gt;</type>
      <name>getClearance</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>ac90ef13682091ca069fe3c5a48c7efc8</anchor>
      <arglist>(const SceneConstPtr &amp;scene) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSmoothness</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>ad3a233583624eca7c458144809334cf7</anchor>
      <arglist>(const PathMetric &amp;metric={}) const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getFinalPositions</name>
      <anchorfile>classrobowflex_1_1Trajectory.html</anchorfile>
      <anchor>a639471360d644cfff3a7001cb5da4deb</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::TrajectoryConstPtr</name>
    <filename>classrobowflex_1_1TrajectoryConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::TrajectoryPlanDataSetOutputter</name>
    <filename>classrobowflex_1_1TrajectoryPlanDataSetOutputter.html</filename>
    <base>robowflex::PlanDataSetOutputter</base>
    <member kind="function">
      <type></type>
      <name>TrajectoryPlanDataSetOutputter</name>
      <anchorfile>classrobowflex_1_1TrajectoryPlanDataSetOutputter.html</anchorfile>
      <anchor>a48e2238bbc09a3ae1b8b9ac2828c2640</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>classrobowflex_1_1TrajectoryPlanDataSetOutputter.html</anchorfile>
      <anchor>a755dbf5909a6d1b718c45fbe42f596ad</anchor>
      <arglist>(const PlanDataSet &amp;results) override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>file_</name>
      <anchorfile>classrobowflex_1_1TrajectoryPlanDataSetOutputter.html</anchorfile>
      <anchor>ad0a9d4178704aa5ce4d87c94f2f84bf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IO::Bag</type>
      <name>bag_</name>
      <anchorfile>classrobowflex_1_1TrajectoryPlanDataSetOutputter.html</anchorfile>
      <anchor>a9c50a55678da4d8aea63ec3a5389ac5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::TrajectoryPtr</name>
    <filename>classrobowflex_1_1TrajectoryPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::TrajOptPlanner</name>
    <filename>classrobowflex_1_1TrajOptPlanner.html</filename>
    <base>robowflex::Planner</base>
    <class kind="struct">robowflex::TrajOptPlanner::Options</class>
    <member kind="typedef">
      <type>std::pair&lt; bool, bool &gt;</type>
      <name>PlannerResult</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>ab66f32c74aefe0be5627f33b36b193d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrajOptPlanner</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>af6612cff0e89ef9b193b4f01e60c5691</anchor>
      <arglist>(const RobotPtr &amp;robot, const std::string &amp;group_name, const std::string &amp;name=&quot;trajopt&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>adcbb35235e9a6fdec27d3af202462b1c</anchor>
      <arglist>(const std::string &amp;manip)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>ae474e4e16aaef49e4d4182384ce826c0</anchor>
      <arglist>(const std::string &amp;base_link, const std::string &amp;tip_link)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialTrajectory</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a70daff1b9dfd8a98206d39fc72b6b718</anchor>
      <arglist>(const robot_trajectory::RobotTrajectoryPtr &amp;init_trajectory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialTrajectory</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>aa168e86ca62029675c82f5d06f4a96a4</anchor>
      <arglist>(const trajopt::TrajArray &amp;init_trajectory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitType</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>ae1b12bc291456c90494af2f5022586f0</anchor>
      <arglist>(const trajopt::InitInfo::Type &amp;init_type)</arglist>
    </member>
    <member kind="function">
      <type>const robot_trajectory::RobotTrajectoryPtr &amp;</type>
      <name>getTrajectory</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>ac520b85f931cf5edef95d26d5c516aa6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const trajopt::TrajArray &amp;</type>
      <name>getTesseractTrajectory</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a0079f952fb49182c8ac7861d5c17dff0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getEnvironmentLinks</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a5e846114b4a31132bbf7dc0278eb5c8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getManipulatorLinks</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a7ff2d3b99d7c1f1f9f907b4cb2f7c519</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getManipulatorJoints</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a5dc9ebbf7de013f836c15b3e60ff4bbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPlanningTime</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a554cff42f2691f1b369a7c5cde2658f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fixJoints</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>ab2e247c227e82e3cbaeed64e140e4b73</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;joints)</arglist>
    </member>
    <member kind="function">
      <type>planning_interface::MotionPlanResponse</type>
      <name>plan</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>ad912352c797242fe800efe28866872e2</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request) override</arglist>
    </member>
    <member kind="function">
      <type>PlannerResult</type>
      <name>plan</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a8df2ffa815c0e099df3d681daa0bd7dc</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const robot_state::RobotStatePtr &amp;start_state, const robot_state::RobotStatePtr &amp;goal_state)</arglist>
    </member>
    <member kind="function">
      <type>PlannerResult</type>
      <name>plan</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>ad8654ce4d1608cb1bcf50d901ebb1223</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const robot_state::RobotStatePtr &amp;start_state, const RobotPose &amp;goal_pose, const std::string &amp;link)</arglist>
    </member>
    <member kind="function">
      <type>PlannerResult</type>
      <name>plan</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a4168805987d9e0d99056ffd651cbd523</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const std::unordered_map&lt; std::string, double &gt; &amp;start_state, const RobotPose &amp;goal_pose, const std::string &amp;link)</arglist>
    </member>
    <member kind="function">
      <type>PlannerResult</type>
      <name>plan</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a44aa107527d951d40ce5147f509551ef</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const RobotPose &amp;start_pose, const std::string &amp;start_link, const RobotPose &amp;goal_pose, const std::string &amp;goal_link)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PlannerResult</type>
      <name>plan</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a6067d38566ecfe81bbc5648286f589c1</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const robot_state::RobotStatePtr &amp;start_state)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getPlannerConfigs</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a8a08ff92036b52c272b5c72a22cd698c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWriteFile</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a6e33369c63e382b97184f0d5e45704d5</anchor>
      <arglist>(bool file_write_cb, const std::string &amp;file_path=&quot;&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>struct robowflex::TrajOptPlanner::Options</type>
      <name>options</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a6c877971615bf4160c8f2395faae4e8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>problemConstructionInfo</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a9ebc384459255b80e82d60586f7682ad</anchor>
      <arglist>(std::shared_ptr&lt; trajopt::ProblemConstructionInfo &gt; pci) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addVelocityCost</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a788d5e06a27b098633e5a0b665d2a9b8</anchor>
      <arglist>(std::shared_ptr&lt; trajopt::ProblemConstructionInfo &gt; pci) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addCollisionAvoidance</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a6c7f970dcf3852484f6f88bfad477178</anchor>
      <arglist>(std::shared_ptr&lt; trajopt::ProblemConstructionInfo &gt; pci) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addStartState</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>acce9e63acf6f02b179caa50f926eec82</anchor>
      <arglist>(const MotionRequestBuilderPtr &amp;request, std::shared_ptr&lt; trajopt::ProblemConstructionInfo &gt; pci)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addStartState</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a9e61f84ae7139d4abd8e6905adfb8350</anchor>
      <arglist>(const robot_state::RobotStatePtr &amp;start_state, std::shared_ptr&lt; trajopt::ProblemConstructionInfo &gt; pci)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addStartState</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>ab849ccd56cd3a752ff44fabdff27b408</anchor>
      <arglist>(const std::unordered_map&lt; std::string, double &gt; &amp;start_state, std::shared_ptr&lt; trajopt::ProblemConstructionInfo &gt; pci)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addStartPose</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>acf6ee18acaf950153eb4c77b35809304</anchor>
      <arglist>(const RobotPose &amp;start_pose, const std::string &amp;link, std::shared_ptr&lt; trajopt::ProblemConstructionInfo &gt; pci) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addGoalState</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a1af54e27f337a7df01606be1611a89d2</anchor>
      <arglist>(const MotionRequestBuilderPtr &amp;request, std::shared_ptr&lt; trajopt::ProblemConstructionInfo &gt; pci) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addGoalState</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a3d6bff7e082c40225aa49021048c838e</anchor>
      <arglist>(const robot_state::RobotStatePtr &amp;goal_state, std::shared_ptr&lt; trajopt::ProblemConstructionInfo &gt; pci) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addGoalState</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>afee3c4afc9f727b802ee112187aaae60</anchor>
      <arglist>(const std::vector&lt; double &gt; goal_state, std::shared_ptr&lt; trajopt::ProblemConstructionInfo &gt; pci) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addGoalPose</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a758b29d0a0fffc5efb12c65369a9a03f</anchor>
      <arglist>(const RobotPose &amp;goal_pose, const std::string &amp;link, std::shared_ptr&lt; trajopt::ProblemConstructionInfo &gt; pci) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PlannerResult</type>
      <name>solve</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>abcc414bd8ec03ca86a257decc11cc1a7</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const std::shared_ptr&lt; trajopt::ProblemConstructionInfo &gt; &amp;pci)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sco::BasicTrustRegionSQPParameters</type>
      <name>getTrustRegionSQPParameters</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a6653edfa1278baec9d32409b6ccee6ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>robot_trajectory::RobotTrajectoryPtr</type>
      <name>trajectory_</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>abf144a11c0202785d29b4cc430f83073</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>trajopt::TrajArray</type>
      <name>tesseract_trajectory_</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a248c3150203cf5fd37274d7231b713c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tesseract::tesseract_ros::KDLEnvPtr</type>
      <name>env_</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>af90405a17f4eb97efae069fd4e0955b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>group_</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>ac5910fd4443d81fe43238b522d705fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>manip_</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a2e2e7f148568ca5220f45e17141396e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cont_cc_</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a9b85bee0670ad898bd0cc6e8d677478e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; std::ofstream &gt;</type>
      <name>stream_ptr_</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a2796fe706eaa40a9555cbdf594173930</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>file_path_</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>ac87740ec616d859a22c725505d9942f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>file_write_cb_</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a914ea9ebae75e42ed6f6bea50292d742</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>trajopt::InitInfo::Type</type>
      <name>init_type_</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>abf0f0fceb15161e520e3a884fc130032</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>trajopt::TrajArray</type>
      <name>initial_trajectory_</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>aaa3bf70b6569a464920877f73e0e334a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>time_</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a678f2e1d0c79e03fe95c4c1bf3ddbbb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>fixed_joints_</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>ae3b22462e244f208577a9c3b71ffa130</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>robot_state::RobotStatePtr</type>
      <name>ref_state_</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a44393eae5a9a159eace6180df0d18718</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialTrajectory</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a70daff1b9dfd8a98206d39fc72b6b718</anchor>
      <arglist>(const robot_trajectory::RobotTrajectoryPtr &amp;init_trajectory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialTrajectory</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>aa168e86ca62029675c82f5d06f4a96a4</anchor>
      <arglist>(const trajopt::TrajArray &amp;init_trajectory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitType</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>ae1b12bc291456c90494af2f5022586f0</anchor>
      <arglist>(const trajopt::InitInfo::Type &amp;init_type)</arglist>
    </member>
    <member kind="function">
      <type>const robot_trajectory::RobotTrajectoryPtr &amp;</type>
      <name>getTrajectory</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>ac520b85f931cf5edef95d26d5c516aa6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const trajopt::TrajArray &amp;</type>
      <name>getTesseractTrajectory</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a0079f952fb49182c8ac7861d5c17dff0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getEnvironmentLinks</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a5e846114b4a31132bbf7dc0278eb5c8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getManipulatorLinks</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a7ff2d3b99d7c1f1f9f907b4cb2f7c519</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getManipulatorJoints</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a5dc9ebbf7de013f836c15b3e60ff4bbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPlanningTime</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a554cff42f2691f1b369a7c5cde2658f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fixJoints</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>ab2e247c227e82e3cbaeed64e140e4b73</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;joints)</arglist>
    </member>
    <member kind="function">
      <type>planning_interface::MotionPlanResponse</type>
      <name>plan</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>ad912352c797242fe800efe28866872e2</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const planning_interface::MotionPlanRequest &amp;request) override</arglist>
    </member>
    <member kind="function">
      <type>PlannerResult</type>
      <name>plan</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a8df2ffa815c0e099df3d681daa0bd7dc</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const robot_state::RobotStatePtr &amp;start_state, const robot_state::RobotStatePtr &amp;goal_state)</arglist>
    </member>
    <member kind="function">
      <type>PlannerResult</type>
      <name>plan</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>ad8654ce4d1608cb1bcf50d901ebb1223</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const robot_state::RobotStatePtr &amp;start_state, const RobotPose &amp;goal_pose, const std::string &amp;link)</arglist>
    </member>
    <member kind="function">
      <type>PlannerResult</type>
      <name>plan</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a4168805987d9e0d99056ffd651cbd523</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const std::unordered_map&lt; std::string, double &gt; &amp;start_state, const RobotPose &amp;goal_pose, const std::string &amp;link)</arglist>
    </member>
    <member kind="function">
      <type>PlannerResult</type>
      <name>plan</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a44aa107527d951d40ce5147f509551ef</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const RobotPose &amp;start_pose, const std::string &amp;start_link, const RobotPose &amp;goal_pose, const std::string &amp;goal_link)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PlannerResult</type>
      <name>plan</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a6067d38566ecfe81bbc5648286f589c1</anchor>
      <arglist>(const SceneConstPtr &amp;scene, const robot_state::RobotStatePtr &amp;start_state)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getPlannerConfigs</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a8a08ff92036b52c272b5c72a22cd698c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWriteFile</name>
      <anchorfile>classrobowflex_1_1TrajOptPlanner.html</anchorfile>
      <anchor>a6e33369c63e382b97184f0d5e45704d5</anchor>
      <arglist>(bool file_write_cb, const std::string &amp;file_path=&quot;&quot;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>robowflex::TrajOptPlanner::Options</name>
    <filename>structrobowflex_1_1TrajOptPlanner_1_1Options.html</filename>
    <member kind="variable">
      <type>sco::ModelType</type>
      <name>backend_optimizer</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>a48d66dc21780f6a5923da1ef31c82971</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>perturb_init_traj</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>ada1bdda50e332e4d22500097f12b438b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>noise_init_traj</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>a4a049f3234a75c17fba9b1af1fb1a679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>a6d08b19b5ba511057f9203b26836e0ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>return_first_sol</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>a0173e3881324cad86cb5c8b0ef5a16cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>return_after_timeout</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>a83fa3e02c7fb64198658aad687b61ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max_planning_time</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>afe88059515f22bb31268babeaa379ba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_cont_col_avoid</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>a107068096f47b36e6bc13a16da9fcb5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_waypoints</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>ad60ec512ab370e564ecb0a2ce3844711</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dt_lower_lim</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>a68346485a40b48503eb587550b611236</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dt_upper_lim</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>aa98d24bddea15d26fd8c1cb281f9bf9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>start_fixed</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>acc29a49fb155af7859900053c3d1be85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_time</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>a06b695839a4101cd880499c648d7bfba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>init_info_dt</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>ac1e40c96bd869dc02479fd16574876fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>joint_vel_coeffs</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>a65627fd88bc4a8c5f6ba6749f9a4c42c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>collision_gap</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>a7595d73aef5121517b88b8f8020ad27b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>default_safety_margin</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>a7ff21e09df3a5002c1997588ee3a18c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>default_safety_margin_coeffs</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>af687637b8c87d1690f60e0ee9c50981e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>joint_pose_safety_margin_coeffs</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>aa3301241b27e780da7498ba8beba9231</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>joint_state_safety_margin_coeffs</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>adca3d9c89ee1a9e656d4799867d81936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pose_cnt_pos_coeffs</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>af484b11d0e921a6b97424c872097bd30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pose_cnt_rot_coeffs</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>a03ce82b1ae0c737515d3d85d7e42e214</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>joint_pos_cnt_coeffs</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>a7182255ebe69b4fef13e06c7af3a4146</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>improve_ratio_threshold</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>a4416b1f54a6da016eac7a20ea7ef7042</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>min_trust_box_size</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>af0d0fb6a16b1feac734b32cac4ececc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>min_approx_improve</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>a44394ad0dd12073b71d3d0cc6e38f584</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>min_approx_improve_frac</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>ae14ad4ca19fbf137c5ab1933014a86ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max_iter</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>aece17819d9a97c9d40f74247e810f01f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>trust_shrink_ratio</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>af29113fa7afd9eb0aa12da98a24b4217</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>trust_expand_ratio</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>aa0523df32963123b249115cc90116f01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>cnt_tolerance</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>adde1c6cea19b5f2adca02b6be3448d96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max_merit_coeff_increases</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>a70ef6a9ba25ae162c7a4a01cba9c3b59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>merit_coeff_increase_ratio</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>a2d3e9eeda909840c2c97ddeed49b8b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>merit_error_coeff</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>a87a1eda0855e92a3dd8dcfd884f71f8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>trust_box_size</name>
      <anchorfile>structrobowflex_1_1TrajOptPlanner_1_1Options.html</anchorfile>
      <anchor>ae4cf28e44d6ae0afdef37d74af5ab1c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::TrajOptPlannerConstPtr</name>
    <filename>classrobowflex_1_1TrajOptPlannerConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::TrajOptPlannerPtr</name>
    <filename>classrobowflex_1_1TrajOptPlannerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::UR5Robot</name>
    <filename>classrobowflex_1_1UR5Robot.html</filename>
    <base>robowflex::Robot</base>
    <member kind="function">
      <type></type>
      <name>UR5Robot</name>
      <anchorfile>classrobowflex_1_1UR5Robot.html</anchorfile>
      <anchor>a2058d324ada342d643405e2e12618f2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classrobowflex_1_1UR5Robot.html</anchorfile>
      <anchor>a024aa71f34ed15fc01f43feae85cb63f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_URDF</name>
      <anchorfile>classrobowflex_1_1UR5Robot.html</anchorfile>
      <anchor>a98bb543635dd9bcc9baed3f6e3f2d57d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_SRDF</name>
      <anchorfile>classrobowflex_1_1UR5Robot.html</anchorfile>
      <anchor>a7982f813b2e1c08e9ce875e1baf55285</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_LIMITS</name>
      <anchorfile>classrobowflex_1_1UR5Robot.html</anchorfile>
      <anchor>a850c2388d49b964b9c3cfacc71d231ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_KINEMATICS</name>
      <anchorfile>classrobowflex_1_1UR5Robot.html</anchorfile>
      <anchor>ade4e701900d4e7c909cdd64ffd606d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>RESOURCE_URDF</name>
      <anchorfile>classrobowflex_1_1UR5Robot.html</anchorfile>
      <anchor>aaea1f568259bbed3afd475934f118a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>RESOURCE_SRDF</name>
      <anchorfile>classrobowflex_1_1UR5Robot.html</anchorfile>
      <anchor>ac93edd0307f236c4f5aba972353d4e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>RESOURCE_LIMITS</name>
      <anchorfile>classrobowflex_1_1UR5Robot.html</anchorfile>
      <anchor>ac0cbf59132fd9615039924428910ec21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>RESOURCE_KINEMATICS</name>
      <anchorfile>classrobowflex_1_1UR5Robot.html</anchorfile>
      <anchor>a3ef2d279f4f860841b792abeebb5d1a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex::UR5RobotConstPtr</name>
    <filename>classrobowflex_1_1UR5RobotConstPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex::UR5RobotPtr</name>
    <filename>classrobowflex_1_1UR5RobotPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>robowflex_visualization::robot::Robot</name>
    <filename>classrobowflex__visualization_1_1robot_1_1Robot.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a89dd35b018549fe989b34aab4bcb3174</anchor>
      <arglist>(self, name, urdf, make_pretty=True)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_urdf</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>ae40c1a3665a2b6055fbdebdacb37cf7a</anchor>
      <arglist>(self, urdf, load=True)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_link</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a6646fba7f9b3214e3469018cf3a4f01f</anchor>
      <arglist>(self, link_name)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_link_xml</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>ab4b6c2fb0df7c9e3f1e225ddac08c172</anchor>
      <arglist>(self, link_name)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_joint_xml</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a282248d96f551473185f49b884824841</anchor>
      <arglist>(self, joint_name)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_joint</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a1a916e1e827d68d4d7b1afdb04ada0df</anchor>
      <arglist>(self, joint_name, value, interpolate=True)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_joint_tf</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>ab1bfa656a50e1c12711affa919661192</anchor>
      <arglist>(self, joint_name, tf, interpolate=True)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_keyframe</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a7a9ff48637bffb7ad2a3860d68ff8750</anchor>
      <arglist>(self, joint_name, frame)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>animate_path</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>af4c09e8cc9074738393d2ce731fa8ddc</anchor>
      <arglist>(self, path_file, fps=60., start=30, reverse=False, interpolate=False)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_state</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a1b5a04190c70a2ca779ad0fd6aa13308</anchor>
      <arglist>(self, state_file)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>attach_object</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>aecd56637cc9896274c7fa353d66ad241</anchor>
      <arglist>(self, link_name, item, frame)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>detach_object</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a425647c19d64bbf78f3fef339c553cc6</anchor>
      <arglist>(self, link_name, item, frame)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>prettify</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a8a1fe3e37a5162e88780d6ba1b54de05</anchor>
      <arglist>(self)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_link_mesh</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>add25d2f18bd08a56505ebdf8c7f85107</anchor>
      <arglist>(self, link_name)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>clear_animation_data</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a64840f44ee3d2f55404a114b01d7b3dd</anchor>
      <arglist>(self)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_root</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a32310daa5feba86a8bb2399b5c201696</anchor>
      <arglist>(self)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>name</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>ab5acf1475195891ad88a78070762e08e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>collection</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>af93f2a175984d3ee650d91cff0681c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>urdf_path</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a7d969681c33198344a968ee4482bb1d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>urdf_xml</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a3cf73c8074badc954b3debbee7d58ebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>robot</name>
      <anchorfile>classrobowflex__visualization_1_1robot_1_1Robot.html</anchorfile>
      <anchor>ae2976b48f4c55afad737b632e1d3912f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>robowflex_visualization::scene::Scene</name>
    <filename>classrobowflex__visualization_1_1scene_1_1Scene.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classrobowflex__visualization_1_1scene_1_1Scene.html</anchorfile>
      <anchor>a776b052ecb71e3b0216e10abcdb42bcb</anchor>
      <arglist>(self, name, scene_file)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_scene</name>
      <anchorfile>classrobowflex__visualization_1_1scene_1_1Scene.html</anchorfile>
      <anchor>a21188db02deedbc003228abcae7f1911</anchor>
      <arglist>(self, scene_file)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_collision_object</name>
      <anchorfile>classrobowflex__visualization_1_1scene_1_1Scene.html</anchorfile>
      <anchor>a04aa643d7544a329d1e30f6c6d984364</anchor>
      <arglist>(self, co)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_shape</name>
      <anchorfile>classrobowflex__visualization_1_1scene_1_1Scene.html</anchorfile>
      <anchor>aedaa20d92dca4400d11bb5c98e8d68a0</anchor>
      <arglist>(self, name, shape, pose)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_object</name>
      <anchorfile>classrobowflex__visualization_1_1scene_1_1Scene.html</anchorfile>
      <anchor>a81a6c24280af0aced5596bf5cd38ff4f</anchor>
      <arglist>(self, name)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>name</name>
      <anchorfile>classrobowflex__visualization_1_1scene_1_1Scene.html</anchorfile>
      <anchor>aad96718057aa69bab9511b349b53cabb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>shapes</name>
      <anchorfile>classrobowflex__visualization_1_1scene_1_1Scene.html</anchorfile>
      <anchor>a14aaa32fef4e1e3c3bbc6ce22db2d08f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>collection</name>
      <anchorfile>classrobowflex__visualization_1_1scene_1_1Scene.html</anchorfile>
      <anchor>a0b32c6862c2be24b5f28bb86e7662483</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>filepath</name>
      <anchorfile>classrobowflex__visualization_1_1scene_1_1Scene.html</anchorfile>
      <anchor>aa7e4dcb954ecbdcb81ec2dbe3611c8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>yaml</name>
      <anchorfile>classrobowflex__visualization_1_1scene_1_1Scene.html</anchorfile>
      <anchor>a43d5594b5fb4bb4f18a711b993a24ce2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>blender</name>
    <filename>namespaceblender.html</filename>
    <member kind="function">
      <type>def</type>
      <name>add_path</name>
      <anchorfile>namespaceblender.html</anchorfile>
      <anchor>a960912cdd7a80ab1d6a0c3ad95f7a34d</anchor>
      <arglist>(path)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>initialize_path</name>
      <anchorfile>namespaceblender.html</anchorfile>
      <anchor>a301b457e29352c721a246afdeb2a8cbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>find_package</name>
      <anchorfile>namespaceblender.html</anchorfile>
      <anchor>a4cfc386ba37a3cba848c50ab744d85bf</anchor>
      <arglist>(package)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>initialize_robowflex_path</name>
      <anchorfile>namespaceblender.html</anchorfile>
      <anchor>a757f6e3d00fd22ddbf8cb370a53cd389</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_ROS_module</name>
      <anchorfile>namespaceblender.html</anchorfile>
      <anchor>abf348529f8431425e46604256caa9575</anchor>
      <arglist>(module_name, module_file, package=&quot;robowflex_visualization&quot;)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>primitives</name>
    <filename>namespaceprimitives.html</filename>
  </compound>
  <compound kind="namespace">
    <name>robot</name>
    <filename>namespacerobot.html</filename>
  </compound>
  <compound kind="namespace">
    <name>robowflex</name>
    <filename>namespacerobowflex.html</filename>
    <namespace>robowflex::color</namespace>
    <namespace>robowflex::constants</namespace>
    <namespace>robowflex::darts</namespace>
    <namespace>robowflex::hypercube</namespace>
    <namespace>robowflex::IO</namespace>
    <namespace>robowflex::log</namespace>
    <namespace>robowflex::movegroup</namespace>
    <namespace>robowflex::OMPL</namespace>
    <namespace>robowflex::openrave</namespace>
    <namespace>robowflex::opt</namespace>
    <namespace>robowflex::RNG</namespace>
    <namespace>robowflex::TF</namespace>
    <class kind="struct">robowflex::PlanningQuery</class>
    <class kind="class">robowflex::PlanData</class>
    <class kind="class">robowflex::PlanDataSet</class>
    <class kind="class">robowflex::Profiler</class>
    <class kind="class">robowflex::Experiment</class>
    <class kind="class">robowflex::PlanDataSetOutputter</class>
    <class kind="class">robowflex::JSONPlanDataSetOutputter</class>
    <class kind="class">robowflex::TrajectoryPlanDataSetOutputter</class>
    <class kind="class">robowflex::OMPLPlanDataSetOutputter</class>
    <class kind="class">robowflex::MotionRequestBuilder</class>
    <class kind="class">robowflex::Cob4Robot</class>
    <class kind="class">robowflex::FetchRobot</class>
    <class kind="class">robowflex::R2Robot</class>
    <class kind="class">robowflex::UR5Robot</class>
    <class kind="class">robowflex::Geometry</class>
    <class kind="class">robowflex::ID</class>
    <class kind="class">robowflex::Planner</class>
    <class kind="class">robowflex::PoolPlanner</class>
    <class kind="class">robowflex::SimpleCartesianPlanner</class>
    <class kind="class">robowflex::PipelinePlanner</class>
    <class kind="class">robowflex::Pool</class>
    <class kind="class">robowflex::Robot</class>
    <class kind="class">robowflex::ParamRobot</class>
    <class kind="class">robowflex::Scene</class>
    <class kind="class">robowflex::Trajectory</class>
    <class kind="class">robowflex::Exception</class>
    <class kind="class">robowflex::ROS</class>
    <class kind="class">robowflex::TrajOptPlanner</class>
    <member kind="typedef">
      <type>std::decay&lt; decltype(std::declval&lt; moveit::core::Transforms &gt;().getTransform(&quot;&quot;)) &gt;::type</type>
      <name>RobotPose</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a59139b755558b8adf4a4c78871e68925</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RobotPose, Eigen::aligned_allocator&lt; RobotPose &gt; &gt;</type>
      <name>RobotPoseVector</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>ae367625140363deefd55bc430b4fc413</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::variant&lt; bool, double, int, std::size_t, std::string &gt;</type>
      <name>PlannerMetric</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>af95cfc04fe2f34f307819d42a0760550</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; double(const robot_state::RobotState &amp;, const robot_state::RobotState &amp;)&gt;</type>
      <name>PathMetric</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>ae752ff77754c646b8e84c741ee9a6437</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>M</type>
      <name>toMatrix</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a3e9d732facd1f9002dba976f05510d20</anchor>
      <arglist>(const RobotPose &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toMetricString</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a317a8c48a7935217d2d7e2fc527648ab</anchor>
      <arglist>(const PlannerMetric &amp;metric)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareIDs</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a28bcb44aebedd0e7485b420d445841b2</anchor>
      <arglist>(const ID &amp;a, const ID &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareIDs</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>ae88371a7f7ee2ec6ca58b843f4eae36d</anchor>
      <arglist>(const IDPtr &amp;a, const IDPtr &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareIDs</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>ab532c2071664e1d660074b069521e599</anchor>
      <arglist>(const IDConstPtr &amp;a, const IDConstPtr &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareIDs</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a7e4145fde7630eb6df2794b817aa827e</anchor>
      <arglist>(const ID &amp;a, const ID::Key &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareIDs</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a3f00160f3e95602c4e0a6bb6ef2d0276</anchor>
      <arglist>(const IDPtr &amp;a, const ID::Key &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareIDs</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a06418241c2aaf3a864ae9cb1486ae412</anchor>
      <arglist>(const IDConstPtr &amp;a, const ID::Key &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareIDs</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a8a89b73213c0edaef1f07a26761edede</anchor>
      <arglist>(const ID::Key &amp;a, const ID::Key &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>explode</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>aa3c6c6a0a52b8ce690f26c87aad1103e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>fetch</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a7fada167b1f9460e9e8e846ac42d77b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>scene</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a61813fadacd0aa13c7e772ab55c38a4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>frame</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a276e823279e3c6448235f9cbfae01a02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>cube</name>
      <anchorfile>namespacerobowflex.html</anchorfile>
      <anchor>a5590451ffb41026b24edb1c7aee39ee7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>robowflex::color</name>
    <filename>namespacerobowflex_1_1color.html</filename>
    <member kind="function">
      <type>void</type>
      <name>viridis</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>ae284dbcb7fbb7d9b5a13522f90bd579b</anchor>
      <arglist>(double s, Eigen::Ref&lt; Eigen::Vector4d &gt; color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coolwarm</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>a7ca44d86fe7cfd6dcc4b5a8eefc2cf3a</anchor>
      <arglist>(double s, Eigen::Ref&lt; Eigen::Vector4d &gt; color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extKindlmann</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>ab220c2a1b29d2210618a00420f73d39b</anchor>
      <arglist>(double s, Eigen::Ref&lt; Eigen::Vector4d &gt; color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plasma</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>a8988904165fd1a65a64d3a8c7200b41d</anchor>
      <arglist>(double s, Eigen::Ref&lt; Eigen::Vector4d &gt; color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>turbo</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>a1ebe7dd62e19b96b9e24637ef34840cf</anchor>
      <arglist>(double s, Eigen::Ref&lt; Eigen::Vector4d &gt; color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grayscale</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>a30f62cfbf581c5b97977f6bafbcec124</anchor>
      <arglist>(double s, Eigen::Ref&lt; Eigen::Vector4d &gt; color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toGrayscale</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>a92d65958ffa9fde2e26df6f5e2dfb6b0</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::Vector4d &gt; color)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>BLACK</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>abe5da2217d10d53d5f1aa82bc1118238</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>WHITE</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>ab1c0c2a12c44c43027c4bdc0a9bd56c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>GRAY</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>ad53ae034bf8fa3b30b3b35772b47c3fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>RED</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>a146ccc1d1f450ccf4c7f1c9e298de3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>PINK</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>acf0b9d0127f91d4ab485cce2ac23bdcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>PURPLE</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>ae50d4b82c435d1091184039134c62238</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>GREEN</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>a02cb008c025958ba65a182a295b79167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>BLUE</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>aec001f3816a5c4b578341adc608b746d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>YELLOW</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>a6afd647179adb4fc07cc179425d618cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>ORANGE</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>a5bccf6674a6b5821a3ef98efbe3fef28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector4d</type>
      <name>BROWN</name>
      <anchorfile>namespacerobowflex_1_1color.html</anchorfile>
      <anchor>a93386673e1d401e22369fc0b6bfb8596</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>robowflex::constants</name>
    <filename>namespacerobowflex_1_1constants.html</filename>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>half</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>a166138dc97f05d5584d66619b339593f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>third</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>af27a652266c957ef79e97136b7f50402</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>eps</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>af542bb60f743d21d4a5891d714154a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>inf</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>aa6c065b9ae735f17b7d8b60d4387c02f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>nan</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>a6cfc32cffdea3d7c3d3be06b28014830</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>pi</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>ad9bb9150e9c0d5238a1116a4b4e3ac20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>half_pi</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>a905c069f310c88074b96676757bc2b73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>quarter_pi</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>aca28bc241f85746b3e272e39e566bd12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>two_pi</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>a8b3a15ea1267d7ef016f1f9b845f9322</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>ik_tolerance</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>a330c05b5737cc6acaf5b848be0b7072e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>ik_attempts</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>a9519420c41e07d705c8dd0c9b0cf6c05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector3d</type>
      <name>ik_vec_tolerance</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>ab80213c34e79cfc7478d843e679fd5f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>cart_rot_step_size</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>af46ecc884128ef9a19016e40b772c7a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>cart_pos_step_size</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>aa29487a615e283aee021f07302999f14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>cart_rot_jump_tol</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>aea6c7a675a86cc72740108131b4315c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>cart_pos_jump_tol</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>a7274a482dc74e05c942c228ee30f5778</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>default_workspace_bound</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>a98f2a63105c514d5e1166790d0364dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>default_allowed_planning_time</name>
      <anchorfile>namespacerobowflex_1_1constants.html</anchorfile>
      <anchor>afff4342862a4b7beb93ad63498e06048</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>robowflex::darts</name>
    <filename>namespacerobowflex_1_1darts.html</filename>
    <namespace>robowflex::darts::IO</namespace>
    <namespace>robowflex::darts::magic</namespace>
    <class kind="class">robowflex::darts::ACM</class>
    <class kind="class">robowflex::darts::Viewer</class>
    <class kind="class">robowflex::darts::Window</class>
    <class kind="class">robowflex::darts::Widget</class>
    <class kind="class">robowflex::darts::ImGuiElement</class>
    <class kind="class">robowflex::darts::TextElement</class>
    <class kind="class">robowflex::darts::CheckboxElement</class>
    <class kind="class">robowflex::darts::ButtonElement</class>
    <class kind="class">robowflex::darts::RenderElement</class>
    <class kind="class">robowflex::darts::LinePlotElement</class>
    <class kind="class">robowflex::darts::WindowWidget</class>
    <class kind="class">robowflex::darts::TSREditWidget</class>
    <class kind="class">robowflex::darts::TSRSolveWidget</class>
    <class kind="class">robowflex::darts::Joint</class>
    <class kind="class">robowflex::darts::RnJoint</class>
    <class kind="class">robowflex::darts::SO2Joint</class>
    <class kind="class">robowflex::darts::SO3Joint</class>
    <class kind="class">robowflex::darts::DARTPlanner</class>
    <class kind="class">robowflex::darts::ConstraintExtractor</class>
    <class kind="class">robowflex::darts::TSRGoal</class>
    <class kind="class">robowflex::darts::JointRegionGoal</class>
    <class kind="class">robowflex::darts::PlanBuilder</class>
    <class kind="class">robowflex::darts::Robot</class>
    <class kind="class">robowflex::darts::StateSpace</class>
    <class kind="class">robowflex::darts::Structure</class>
    <class kind="class">robowflex::darts::TSR</class>
    <class kind="class">robowflex::darts::TSRSet</class>
    <class kind="class">robowflex::darts::TSRConstraint</class>
    <class kind="class">robowflex::darts::DistanceCollisionWrapper</class>
    <class kind="class">robowflex::darts::World</class>
    <member kind="typedef">
      <type>std::function&lt; void()&gt;</type>
      <name>ButtonCallback</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>a43e09343abe40e2ca5d599d239dbaa32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void()&gt;</type>
      <name>RenderCallback</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>aab2d1bf28ecdcc9c6e473c7c54bb44ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>generateUUID</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>aad2bcbc070089061186e1ee184476e63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RobotPtr</type>
      <name>loadMoveItRobot</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>a2dbfc2798b6d0a88aa807f37d5ca142d</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;urdf, const std::string &amp;srdf)</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::ShapePtr</type>
      <name>makeGeometry</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>a6d7c4b57886aad4cd2cf44461d5ed42f</anchor>
      <arglist>(const GeometryPtr &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::dynamics::BoxShape &gt;</type>
      <name>makeBox</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>afdd8c4d0aae1003f64ec8e6b8afa6ee4</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::Vector3d &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::dynamics::BoxShape &gt;</type>
      <name>makeBox</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>ac626e749615172491dce34f370b2c576</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::dynamics::CylinderShape &gt;</type>
      <name>makeCylinder</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>a00ddd4641427e8044b293079aabc145d</anchor>
      <arglist>(double radius, double height)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::dynamics::SphereShape &gt;</type>
      <name>makeSphere</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>a3ca6d4b92b5df5be1eef8ba872881fa3</anchor>
      <arglist>(double radius)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::dynamics::MeshShape &gt;</type>
      <name>makeMesh</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>ad4c3a9fb24780aa997003ccd46a7e946</anchor>
      <arglist>(const GeometryPtr &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; dart::dynamics::MeshShape &gt;</type>
      <name>makeArcsegment</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>a2291cdf216a3236c3bbac94df3e21a6a</anchor>
      <arglist>(double low, double high, double inner_radius, double outer_radius, std::size_t resolution=32)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColor</name>
      <anchorfile>namespacerobowflex_1_1darts.html</anchorfile>
      <anchor>a075e5a421093f31718cc61e89c52251a</anchor>
      <arglist>(dart::dynamics::BodyNode *node, const Eigen::Vector4d &amp;color)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>robowflex::darts::IO</name>
    <filename>namespacerobowflex_1_1darts_1_1IO.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addPackage</name>
      <anchorfile>namespacerobowflex_1_1darts_1_1IO.html</anchorfile>
      <anchor>ab963a929bce4f033355e4707a8e00ee7</anchor>
      <arglist>(const std::string &amp;package)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPackage</name>
      <anchorfile>namespacerobowflex_1_1darts_1_1IO.html</anchorfile>
      <anchor>ab10c2fc8a3475c54cf29ba281bd86208</anchor>
      <arglist>(const std::string &amp;package, const std::string &amp;location)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadURDF</name>
      <anchorfile>namespacerobowflex_1_1darts_1_1IO.html</anchorfile>
      <anchor>a8f94a731a469619b6898a0d346caec04</anchor>
      <arglist>(Robot &amp;robot, const std::string &amp;urdf)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPackageFile</name>
      <anchorfile>namespacerobowflex_1_1darts_1_1IO.html</anchorfile>
      <anchor>a0101c0e2c1d19141eadb2a011f1f557d</anchor>
      <arglist>(const std::string &amp;uri)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>robowflex::darts::magic</name>
    <filename>namespacerobowflex_1_1darts_1_1magic.html</filename>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DEFAULT_DENSITY</name>
      <anchorfile>namespacerobowflex_1_1darts_1_1magic.html</anchorfile>
      <anchor>adb5f5ea20b574f5f3b51a11b16b7ce0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DEFAULT_DAMPING</name>
      <anchorfile>namespacerobowflex_1_1darts_1_1magic.html</anchorfile>
      <anchor>a7bab53d9be7ae72073c5d1ee5271487d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DEFAULT_RESTITUTION</name>
      <anchorfile>namespacerobowflex_1_1darts_1_1magic.html</anchorfile>
      <anchor>a59610bfebdd58a0ba6bdcb81ed5e6d86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DEFAULT_IK_TOLERANCE</name>
      <anchorfile>namespacerobowflex_1_1darts_1_1magic.html</anchorfile>
      <anchor>a24df87a80c00e85cb8644cb583735ceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>ROOT_FRAME</name>
      <anchorfile>namespacerobowflex_1_1darts_1_1magic.html</anchorfile>
      <anchor>aef5d6ac81df3a172ec209d681037f56a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector3d</type>
      <name>DEFAULT_IK_TOLERANCES</name>
      <anchorfile>namespacerobowflex_1_1darts_1_1magic.html</anchorfile>
      <anchor>a40316377b043058934633777997b6e7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>robowflex::hypercube</name>
    <filename>namespacerobowflex_1_1hypercube.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>sceneToTesseractEnv</name>
      <anchorfile>namespacerobowflex_1_1hypercube.html</anchorfile>
      <anchor>aafb0aea31d1a8c36a88844f24cea505e</anchor>
      <arglist>(const robowflex::SceneConstPtr &amp;scene, tesseract::tesseract_ros::KDLEnvPtr env)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addAttachedBodiesToTesseractEnv</name>
      <anchorfile>namespacerobowflex_1_1hypercube.html</anchorfile>
      <anchor>ab125467d4965db92828802c90d76b440</anchor>
      <arglist>(const robot_state::RobotStatePtr &amp;state, tesseract::tesseract_ros::KDLEnvPtr env)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotStateToManipState</name>
      <anchorfile>namespacerobowflex_1_1hypercube.html</anchorfile>
      <anchor>ae762b63565a26a73d014b12c4523dd29</anchor>
      <arglist>(const robot_state::RobotStatePtr &amp;robot_state, const std::vector&lt; std::string &gt; &amp;manip_joint_names, std::vector&lt; double &gt; &amp;manip_joint_values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>manipStateToRobotState</name>
      <anchorfile>namespacerobowflex_1_1hypercube.html</anchorfile>
      <anchor>a01d7c6dce1e26d507fd36199d7d4cabc</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;manip_state, const std::string &amp;manip, const tesseract::tesseract_ros::KDLEnvPtr &amp;env, robot_state::RobotStatePtr robot_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>manipTesseractTrajToRobotTraj</name>
      <anchorfile>namespacerobowflex_1_1hypercube.html</anchorfile>
      <anchor>a686a6bdaa326f5a6282154e72833f671</anchor>
      <arglist>(const tesseract::TrajArray &amp;tesseract_traj, const robot_state::RobotStatePtr &amp;ref_state, const std::string &amp;manip, const tesseract::tesseract_ros::KDLEnvPtr &amp;env, robot_trajectory::RobotTrajectoryPtr trajectory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotTrajToManipTesseractTraj</name>
      <anchorfile>namespacerobowflex_1_1hypercube.html</anchorfile>
      <anchor>ae13dece340723d93ef6bd24a1185e275</anchor>
      <arglist>(const robot_trajectory::RobotTrajectoryPtr &amp;robot_traj, const std::string &amp;manip, const tesseract::tesseract_ros::KDLEnvPtr &amp;env, tesseract::TrajArray &amp;trajectory)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>robowflex::IO</name>
    <filename>namespacerobowflex_1_1IO.html</filename>
    <class kind="class">robowflex::IO::Bag</class>
    <class kind="class">robowflex::IO::RobotBroadcaster</class>
    <class kind="class">robowflex::IO::GNUPlotHelper</class>
    <class kind="class">robowflex::IO::GNUPlotPlanDataSetOutputter</class>
    <class kind="class">robowflex::IO::Handler</class>
    <class kind="class">robowflex::IO::HDF5Data</class>
    <class kind="class">robowflex::IO::HDF5File</class>
    <class kind="class">robowflex::IO::PluginManager</class>
    <class kind="class">robowflex::IO::RVIZHelper</class>
    <member kind="function">
      <type>bool</type>
      <name>isNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a23927fb72a17ab8ce0d0654d06b5532e</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::RobotState</type>
      <name>robotStateFromNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>aa50520f9b580f0f7ab32c5aadff15851</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>YAML::Node</type>
      <name>toNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>aed4974f62a649f4a6107ac3d6e919b33</anchor>
      <arglist>(const geometry_msgs::Pose &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Pose</type>
      <name>poseFromNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>ab9d42d5eeaa3e66fcbab28703ebbaef5</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>YAML::Node</type>
      <name>toNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a819245f223ff0eb589ad28aa153f2485</anchor>
      <arglist>(const moveit_msgs::PlanningScene &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>YAML::Node</type>
      <name>toNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a799d8a2989dee49fff0dd91d17a883be</anchor>
      <arglist>(const moveit_msgs::MotionPlanRequest &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>YAML::Node</type>
      <name>toNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a414861fda8e5df5e954e0f65a97b2ed7</anchor>
      <arglist>(const moveit_msgs::RobotTrajectory &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>YAML::Node</type>
      <name>toNode</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a48e9aa6858f48615cefb4b186457d7be</anchor>
      <arglist>(const moveit_msgs::RobotState &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromYAMLFile</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a50e952949006a40e6b7b5d589958e01d</anchor>
      <arglist>(moveit_msgs::PlanningScene &amp;msg, const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromYAMLFile</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a0500ed90fd25e45a7a0476fee615bcc3</anchor>
      <arglist>(moveit_msgs::MotionPlanRequest &amp;msg, const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromYAMLFile</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>aaab20586b460694598632218742ee4b6</anchor>
      <arglist>(moveit_msgs::RobotState &amp;msg, const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>generateUUID</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a996a4ec7bbc57f72f5544bec1b9d199c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>resolvePackage</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a4117e00a49336925d58c9b37f010b0e5</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; std::string &gt;</type>
      <name>findPackageURIs</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a3a8ce2bec32c4a5aa5f3cfd7bf264de2</anchor>
      <arglist>(const std::string &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>resolvePath</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>ab2ba1256c969b810983689062ed7a25d</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>resolveParent</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a3a89ab61c2d3e80618f9c0bb5a8f8197</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>makeFilepath</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a6bb0f4923d361fe515fe917250044aef</anchor>
      <arglist>(const std::string &amp;directory, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>loadXMLToString</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>ad3efd7be4a295a491b9f90317207aaf8</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>loadXacroToString</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>aec349912cd268197f920a72b92c63e60</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>loadFileToString</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a902af29cd974bbf290c3ec2e8312f006</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>runCommand</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a74ebd6c2fbd150ef347609ab650c1bed</anchor>
      <arglist>(const std::string &amp;cmd)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, YAML::Node &gt;</type>
      <name>loadFileToYAML</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a675bb2ff60b43d90a7661d23bbed75b3</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, std::vector&lt; YAML::Node &gt; &gt;</type>
      <name>loadAllFromFileToYAML</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a65be5de9bc7ef2117bbfd00383252440</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createFile</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>ad82de1798068dd05831c5eb168fe285e</anchor>
      <arglist>(std::ofstream &amp;out, const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>createTempFile</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a9edbc582d4a99e5b8b673b525be07dcc</anchor>
      <arglist>(std::ofstream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteFile</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a599f55ea02f8340f52f2da3a3255471e</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, std::vector&lt; std::string &gt; &gt;</type>
      <name>listDirectory</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a820ea54af8f26bddfff6d3c7f48e9ff3</anchor>
      <arglist>(const std::string &amp;directory)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getHostname</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a7815c4abc028bb90421f587f322fa976</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getProcessID</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a5eb9e620ba5cd9ee919ce07e9366ba41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getThreadID</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a9a2ab45fc8b4e3dbf992e145c2845a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::posix_time::ptime</type>
      <name>getDate</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a407d1992227eef3b0031d5c8e74aa278</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSeconds</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a315407b1e9df8de448487999788a271e</anchor>
      <arglist>(boost::posix_time::ptime start, boost::posix_time::ptime finish)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>threadSleep</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>af03f960b02b1eb3e2428f1b23bca4293</anchor>
      <arglist>(double seconds)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>tokenize</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a8a8c9368dd68ea4bb0c1843ff204746e</anchor>
      <arglist>(const std::string &amp;string, const std::string &amp;separators=&quot; &quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>YAMLToFile</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a14b1fd382262138158a5adbad8691ea0</anchor>
      <arglist>(const YAML::Node &amp;node, const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>messageToYAMLFile</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>ab412be03d8a95eb75be650509931ab80</anchor>
      <arglist>(T &amp;msg, const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>YAMLFileToMessage</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>afc0e96b30b4528708e238b3635addda7</anchor>
      <arglist>(T &amp;msg, const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getMessageMD5</name>
      <anchorfile>namespacerobowflex_1_1IO.html</anchorfile>
      <anchor>a8122defb07fdbfebfd40a2a8de5ed62b</anchor>
      <arglist>(T &amp;msg)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>robowflex::log</name>
    <filename>namespacerobowflex_1_1log.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>formatRecurse</name>
      <anchorfile>namespacerobowflex_1_1log.html</anchorfile>
      <anchor>ae0ea7a690ae191989874f86710bff910</anchor>
      <arglist>(boost::format &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>formatRecurse</name>
      <anchorfile>namespacerobowflex_1_1log.html</anchorfile>
      <anchor>afaf677a59618f4004e83648c191b2271</anchor>
      <arglist>(boost::format &amp;f, T &amp;&amp;t, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>format</name>
      <anchorfile>namespacerobowflex_1_1log.html</anchorfile>
      <anchor>a7bcd1f6094375d49cd5b1b66413cf7d1</anchor>
      <arglist>(const std::string &amp;fmt, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showUpToFatal</name>
      <anchorfile>namespacerobowflex_1_1log.html</anchorfile>
      <anchor>adab20e7c2c483f019cd66e1fddfc537b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showUpToError</name>
      <anchorfile>namespacerobowflex_1_1log.html</anchorfile>
      <anchor>a8cab4127cff94298f2b74ae62c074e7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showUpToWarning</name>
      <anchorfile>namespacerobowflex_1_1log.html</anchorfile>
      <anchor>a8a30bc81e244ac8b83e08303e145c0fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showUpToInfo</name>
      <anchorfile>namespacerobowflex_1_1log.html</anchorfile>
      <anchor>a8a9c6ff56ad61f1e9ea7990fec36eb5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showUpToDebug</name>
      <anchorfile>namespacerobowflex_1_1log.html</anchorfile>
      <anchor>a8789f9911b13df9ebda1ed22166baef2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>robowflex::movegroup</name>
    <filename>namespacerobowflex_1_1movegroup.html</filename>
    <class kind="class">robowflex::movegroup::MoveGroupHelper</class>
  </compound>
  <compound kind="namespace">
    <name>robowflex::OMPL</name>
    <filename>namespacerobowflex_1_1OMPL.html</filename>
    <class kind="class">robowflex::OMPL::Cob4OMPLPipelinePlanner</class>
    <class kind="class">robowflex::OMPL::FetchOMPLPipelinePlanner</class>
    <class kind="class">robowflex::OMPL::R2OMPLPipelinePlanner</class>
    <class kind="class">robowflex::OMPL::UR5OMPLPipelinePlanner</class>
    <class kind="class">robowflex::OMPL::Settings</class>
    <class kind="class">robowflex::OMPL::OMPLPipelinePlanner</class>
    <class kind="class">robowflex::OMPL::OMPLInterfacePlanner</class>
    <class kind="class">robowflex::OMPL::OMPLTrajectory</class>
    <member kind="function">
      <type>bool</type>
      <name>loadOMPLConfig</name>
      <anchorfile>namespacerobowflex_1_1OMPL.html</anchorfile>
      <anchor>a31492e70aba96a5bf04e48eb9840f6be</anchor>
      <arglist>(IO::Handler &amp;handler, const std::string &amp;config_file, std::vector&lt; std::string &gt; &amp;configs)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>robowflex::openrave</name>
    <filename>namespacerobowflex_1_1openrave.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>fromXMLFile</name>
      <anchorfile>namespacerobowflex_1_1openrave.html</anchorfile>
      <anchor>a0334a2b6366e94b0966fae9e93e5e555</anchor>
      <arglist>(moveit_msgs::PlanningScene &amp;planning_scene, const std::string &amp;file, const std::string &amp;model_dir)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>robowflex::opt</name>
    <filename>namespacerobowflex_1_1opt.html</filename>
    <class kind="class">robowflex::opt::CHOMPSettings</class>
    <class kind="class">robowflex::opt::CHOMPPipelinePlanner</class>
    <class kind="class">robowflex::opt::TrajOptPipelinePlanner</class>
    <member kind="function">
      <type>bool</type>
      <name>loadConfig</name>
      <anchorfile>namespacerobowflex_1_1opt.html</anchorfile>
      <anchor>afb390cb6d29ba1a56f2336733e190e5c</anchor>
      <arglist>(IO::Handler &amp;handler, const std::string &amp;config_file)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>robowflex::RNG</name>
    <filename>namespacerobowflex_1_1RNG.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>aaac4e8b03765162b787640b0a47bf1fe</anchor>
      <arglist>(unsigned int seed)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uniform01</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>a3769e670322eb743e80bf004ab39939c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uniformReal</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>a12d582893aa7629eebf3faa880ea54d3</anchor>
      <arglist>(double lower_bound, double upper_bound)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>uniformInt</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>aaa1fda5137839d2555722cd3a5ebe3dd</anchor>
      <arglist>(int lower_bound, int upper_bound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uniformBool</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>a738b24586a944f872dd8c64bb60cc7e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gaussian01</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>ac0b13f6a59c2616194c31131255f2ee3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gaussian</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>a5ca013b7f88a6ed0d4ad896d2792397a</anchor>
      <arglist>(double mean, double stddev)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gaussian</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>a416348bd2493b3990c684f00ebf2a005</anchor>
      <arglist>(double stddev)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>uniformRPY</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>a773a1a29cd8c902c8c58287359c4f016</anchor>
      <arglist>(const Eigen::Vector3d &amp;lbound, const Eigen::Vector3d &amp;ubound)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>uniformRPY</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>a197de7175c7c07fcf74bac9c3025cba0</anchor>
      <arglist>(const Eigen::Vector3d &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>unifromRPY</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>aa63573761aeef4592eae63932ce19842</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>uniformVec</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>addd52f1da4d8ca653f1abd08f44fb1a0</anchor>
      <arglist>(const Eigen::Vector3d &amp;lbound, const Eigen::Vector3d &amp;ubound)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>uniformVec</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>a8b7cffefd1ef7f7ddaf77d631bf1c9fe</anchor>
      <arglist>(const Eigen::Vector3d &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>gaussianVec</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>aeae4b5b5c25d08d4cfaa16d1d91ccdc0</anchor>
      <arglist>(const Eigen::Vector3d &amp;mean, const Eigen::Vector3d &amp;stddev)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>gaussianVec</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>aa6bd30c300219fccf0ad0e949ed74aa1</anchor>
      <arglist>(const Eigen::Vector3d &amp;stddev)</arglist>
    </member>
    <member kind="function">
      <type>Iter</type>
      <name>uniformSample</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>a9f06cb670e106f9cdd99dd26b1de2c03</anchor>
      <arglist>(Iter start, Iter end)</arglist>
    </member>
    <member kind="function">
      <type>Type &amp;</type>
      <name>uniformSample</name>
      <anchorfile>namespacerobowflex_1_1RNG.html</anchorfile>
      <anchor>aada299acf72e9bd0b024343bfd11c839</anchor>
      <arglist>(std::vector&lt; Type &gt; &amp;vector)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>robowflex::TF</name>
    <filename>namespacerobowflex_1_1TF.html</filename>
    <member kind="function">
      <type>RobotPose</type>
      <name>identity</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>ad3fe2e98d5f345a814076ac5e72f42e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>createPoseXYZ</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a64fe1f7962e920823606ea7bd3116a28</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>createPoseXYZ</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a024aee0521b09149fed0abbb0c2b88ac</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::Vector3d &gt; &amp;translation)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>createPoseXYZ</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>af4bfc510d4c9a23669df8401a064583a</anchor>
      <arglist>(double x, double y, double z, double X, double Y, double Z)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>createPoseXYZ</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a4df5857e76855c50a4062e8189018d7f</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::Vector3d &gt; &amp;translation, const Eigen::Ref&lt; const Eigen::Vector3d &gt; &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>createPoseQ</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a573a0ab7df9d8ce2a5bbc0ed6353b2c8</anchor>
      <arglist>(double x, double y, double z, double W, double X, double Y, double Z)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>createPoseQ</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>aa1b9037e353e088347bbd9b31bb3f071</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::Vector3d &gt; &amp;translation, const Eigen::Ref&lt; const Eigen::Vector4d &gt; &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>createPoseQ</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>acaf2b14023e3ec216438e971f61bb3a2</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::Vector3d &gt; &amp;translation, const Eigen::Quaterniond &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Quaterniond</type>
      <name>getPoseRotation</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>af489ecef90bd4233553c1f7e744d944a</anchor>
      <arglist>(const RobotPose &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>pointMsgToEigen</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a6ef7477d38ed3d634c35e372e0a86ade</anchor>
      <arglist>(const geometry_msgs::Point &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Point</type>
      <name>pointEigenToMsg</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>aa786c41125b645e01ec24fd89193aa8c</anchor>
      <arglist>(const Eigen::Vector3d &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>vectorMsgToEigen</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a1ed7fbaac296f875a3dfc136ff80bc99</anchor>
      <arglist>(const geometry_msgs::Vector3 &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Vector3</type>
      <name>vectorEigenToMsg</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a1708cf70a26bb21cbdeea7df8e7dec9b</anchor>
      <arglist>(const Eigen::Vector3d &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>poseMsgToEigen</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a4bae1252b665b01a76b783986a365251</anchor>
      <arglist>(const geometry_msgs::Pose &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Pose</type>
      <name>poseEigenToMsg</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a7065853322259e60f3b2ce12f2ded0b0</anchor>
      <arglist>(const RobotPose &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Quaterniond</type>
      <name>quaternionMsgToEigen</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>aa36db77a74d939b2d1c6eac8579f6921</anchor>
      <arglist>(const geometry_msgs::Quaternion &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Quaternion</type>
      <name>quaternionEigenToMsg</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>ae84c5fbe81f21d64a9caa67bad89563d</anchor>
      <arglist>(const Eigen::Quaterniond &amp;quaternion)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::BoundingVolume</type>
      <name>getBoundingVolume</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>ab2aee755c034bcbf58ac1660dbf33c6c</anchor>
      <arglist>(const RobotPose &amp;pose, const GeometryConstPtr &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::PositionConstraint</type>
      <name>getPositionConstraint</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>adf0cce7ea1ccd1e413f859d0ed4fe0e1</anchor>
      <arglist>(const std::string &amp;ee_name, const std::string &amp;base_name, const RobotPose &amp;pose, const GeometryConstPtr &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>samplePositionConstraint</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a44dc89c4ce9ca2eb587eabcbaaf6f184</anchor>
      <arglist>(const moveit_msgs::PositionConstraint &amp;pc)</arglist>
    </member>
    <member kind="function">
      <type>moveit_msgs::OrientationConstraint</type>
      <name>getOrientationConstraint</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a1519d7a4836023d69ae0cd587a527906</anchor>
      <arglist>(const std::string &amp;ee_name, const std::string &amp;base_name, const Eigen::Quaterniond &amp;orientation, const Eigen::Vector3d &amp;tolerances)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Quaterniond</type>
      <name>sampleOrientation</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a6e8c3dcd0a542c8923fe4eea954d6948</anchor>
      <arglist>(const Eigen::Quaterniond &amp;orientation, const Eigen::Vector3d &amp;tolerances)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Quaterniond</type>
      <name>sampleOrientationUniform</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>ac8e76eba36cdb957bda43ab55931caa2</anchor>
      <arglist>(const Eigen::Vector3d &amp;tolerances)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Quaterniond</type>
      <name>offsetOrientation</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>aaf266eedc3516efb48d44d8e85e51480</anchor>
      <arglist>(const Eigen::Quaterniond &amp;orientation, const Eigen::Vector3d &amp;axis, double value)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>samplePositionUniform</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>aa0fec7eac1fc03690279247e59f8ac9b</anchor>
      <arglist>(const Eigen::Vector3d &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>samplePositionGaussian</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a6c85d25d4fe28c18e6f966f481a7c74f</anchor>
      <arglist>(const Eigen::Vector3d &amp;stddev)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>samplePoseUniform</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a7eddceb3f96f177705748be6d5e565b6</anchor>
      <arglist>(const Eigen::Vector3d &amp;pos_bounds, const Eigen::Vector3d &amp;orn_bounds)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>samplePoseGaussian</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>ae1ceb7ed08a654ab16d6550e270531f8</anchor>
      <arglist>(const Eigen::Vector3d &amp;pos_stddev, const Eigen::Vector3d &amp;orn_bounds)</arglist>
    </member>
    <member kind="function">
      <type>RobotPose</type>
      <name>transformMsgToEigen</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>ae91bd26676e0d089ef7ee9370f29ffeb</anchor>
      <arglist>(const geometry_msgs::TransformStamped &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::TransformStamped</type>
      <name>transformEigenToMsg</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a3e3319cc164ab3b14dfefc3e1d9bd4bc</anchor>
      <arglist>(const std::string &amp;source, const std::string &amp;target, const RobotPose &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>angleNormalize</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a9dd774bfe83b1e1b4d97df5d60fbed2f</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>toDegrees</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a36d1509d93c50c9baf8cc1788ee18e48</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>toRadians</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>a5d08f24cb62e1f2eefab639b96c769aa</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVecZero</name>
      <anchorfile>namespacerobowflex_1_1TF.html</anchorfile>
      <anchor>ae2239f3ba046e0da099fd3246279d278</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;v, double tolerance=constants::eps)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>robowflex_visualization</name>
    <filename>namespacerobowflex__visualization.html</filename>
    <namespace>robowflex_visualization::primitives</namespace>
    <namespace>robowflex_visualization::robot</namespace>
    <namespace>robowflex_visualization::scene</namespace>
    <namespace>robowflex_visualization::utils</namespace>
    <member kind="variable" protection="private">
      <type>list</type>
      <name>__all__</name>
      <anchorfile>namespacerobowflex__visualization.html</anchorfile>
      <anchor>a9d84327659d501d79bde78cbf7ee979e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>robowflex_visualization::primitives</name>
    <filename>namespacerobowflex__visualization_1_1primitives.html</filename>
    <member kind="function">
      <type>def</type>
      <name>add_box</name>
      <anchorfile>namespacerobowflex__visualization_1_1primitives.html</anchorfile>
      <anchor>a622370ddeeb74db30dbd52d0cdddea66</anchor>
      <arglist>(box)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_sphere</name>
      <anchorfile>namespacerobowflex__visualization_1_1primitives.html</anchorfile>
      <anchor>a9fdc8fe618085bda55591c5fdc464c3c</anchor>
      <arglist>(sphere)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_cylinder</name>
      <anchorfile>namespacerobowflex__visualization_1_1primitives.html</anchorfile>
      <anchor>a45c5491e412f0b7e5faf68203f49c910</anchor>
      <arglist>(cylinder)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_cone</name>
      <anchorfile>namespacerobowflex__visualization_1_1primitives.html</anchorfile>
      <anchor>ab8343c2c80dd3d56010d5564de3b219d</anchor>
      <arglist>(cone)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_mesh</name>
      <anchorfile>namespacerobowflex__visualization_1_1primitives.html</anchorfile>
      <anchor>ab0035abe7100b2c11f6941c55caeabeb</anchor>
      <arglist>(mesh)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_shape</name>
      <anchorfile>namespacerobowflex__visualization_1_1primitives.html</anchorfile>
      <anchor>a0e9e78bd6edf87dbe18de1477df99b43</anchor>
      <arglist>(shape)</arglist>
    </member>
    <member kind="variable">
      <type>dictionary</type>
      <name>SHAPE_MAP</name>
      <anchorfile>namespacerobowflex__visualization_1_1primitives.html</anchorfile>
      <anchor>a1bcbfba96ec97a86536a9b451620021a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>robowflex_visualization::robot</name>
    <filename>namespacerobowflex__visualization_1_1robot.html</filename>
    <class kind="class">robowflex_visualization::robot::Robot</class>
  </compound>
  <compound kind="namespace">
    <name>robowflex_visualization::scene</name>
    <filename>namespacerobowflex__visualization_1_1scene.html</filename>
    <class kind="class">robowflex_visualization::scene::Scene</class>
  </compound>
  <compound kind="namespace">
    <name>robowflex_visualization::utils</name>
    <filename>namespacerobowflex__visualization_1_1utils.html</filename>
    <member kind="function">
      <type>def</type>
      <name>resolve_package</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a7932f430b9ed305d8665a87edbf5ae42</anchor>
      <arglist>(path)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>resolve_path</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>ab8b8e916c2c9fc0fb72af8c0692df145</anchor>
      <arglist>(path)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>select_all_children</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>aff2d044bdf1b03f7c265e81ea5e6966c</anchor>
      <arglist>(item)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>apply_smooth_shade</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>aad1401a6ec843f2693ccbee65894a3e6</anchor>
      <arglist>(item)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>apply_edge_split</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>af84b2409980b99fd3053163729c797cc</anchor>
      <arglist>(item, angle=math.pi/8)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>find_object_in_collection</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a1812dd3a0e6a155997d412ab53d81893</anchor>
      <arglist>(coll_name, item_name)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>move_selected_to_collection</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a72fc29753267b30ac4c4f0427e25a7e1</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>find_collection</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>aff7d987f7995a6301e00458a21561baa</anchor>
      <arglist>(item)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_collection</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a0f25a4e732bec25e9c4653ce32565f49</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>remove_collection</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>ad8dd24c7141469ef96aee8d1301a38ce</anchor>
      <arglist>(name, remove_objects=True)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>make_collection</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a717e1e3c359780737cb6b845e61edca8</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>deselect_all</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a5c9ba46cc8152973864a1191f99acd91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_object_parent</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a30855ce8d634d6ec557aab5b3eea31cf</anchor>
      <arglist>(parent, child)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_object_parent</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a850b9b28c24f0821d118a303ee5cc376</anchor>
      <arglist>(parent, child)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>parent_object</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>af0f3aaa5d83d93823e2ef83f64bae212</anchor>
      <arglist>(parent, child, frame)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>unparent_object</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>aa19d7ee42ecb4ad6c82bb20ce971d2f3</anchor>
      <arglist>(parent, child, frame)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_active</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>ab1a22df161250d9b6cdee7cef1575f45</anchor>
      <arglist>(item)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_material</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>af360bbe82c674876914a2df36db725a1</anchor>
      <arglist>(item, material)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_color</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a6fd60b4594c9c4275c4b5dd92dfcbdd5</anchor>
      <arglist>(obj, element)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>pose_to_quat</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a5cdecfb6b5323333468f9d4e87651cda</anchor>
      <arglist>(pose)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>pose_to_vec</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a455546cbd83056f4f954c878b6d23c5b</anchor>
      <arglist>(pose)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>pose_add</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>ab6571cc111455e78b5d2b1474bcbf4d9</anchor>
      <arglist>(obj, pose1, pose2)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_pose</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a4713c008852f1c3ca48d58cf2d89e266</anchor>
      <arglist>(obj, pose)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>read_YAML_data</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>abbcdade3263e0fe0a4238b548f1a0675</anchor>
      <arglist>(file_name)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>remove_doubles</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a892f1e4dcec4a4f4ad157caf859d6b82</anchor>
      <arglist>(item, threshold=0.0001)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>remove_inner_faces</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a09223f872cc50c17f4510c542280478d</anchor>
      <arglist>(item)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>clear_alpha</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>a7dd548304a4f353f692b9c35de134d83</anchor>
      <arglist>(obj)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_tf_origin_xml</name>
      <anchorfile>namespacerobowflex__visualization_1_1utils.html</anchorfile>
      <anchor>aa9ba8df51c1799879210235ccb55ed03</anchor>
      <arglist>(xml)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>scene</name>
    <filename>namespacescene.html</filename>
  </compound>
  <compound kind="namespace">
    <name>YAML</name>
    <filename>namespaceYAML.html</filename>
  </compound>
  <compound kind="page">
    <name>md__home_runner_work_robowflex_robowflex_robowflex_tesseract_README</name>
    <title>Robowflex Tesseract</title>
    <filename>md__home_runner_work_robowflex_robowflex_robowflex_tesseract_README.html</filename>
  </compound>
  <compound kind="page">
    <name>md__home_runner_work_robowflex_robowflex_robowflex_visualization_README</name>
    <title>Robowflex Visualization</title>
    <filename>md__home_runner_work_robowflex_robowflex_robowflex_visualization_README.html</filename>
  </compound>
  <compound kind="page">
    <name>md__home_runner_work_robowflex_robowflex_robowflex_dart_README</name>
    <title>Robowflex Dart</title>
    <filename>md__home_runner_work_robowflex_robowflex_robowflex_dart_README.html</filename>
  </compound>
  <compound kind="page">
    <name>md__home_runner_work_robowflex_robowflex__docker_README</name>
    <title>Robowflex Docker Containers</title>
    <filename>md__home_runner_work_robowflex_robowflex__docker_README.html</filename>
  </compound>
  <compound kind="page">
    <name>benchmarking</name>
    <title>Benchmarking Planners in Robowflex</title>
    <filename>benchmarking.html</filename>
    <docanchor file="benchmarking.html">md__home_runner_work_robowflex_robowflex__docs_markdown_benchmarking</docanchor>
  </compound>
  <compound kind="page">
    <name>design</name>
    <title>Robowflex Design Notes</title>
    <filename>design.html</filename>
    <docanchor file="design.html">md__home_runner_work_robowflex_robowflex__docs_markdown_design</docanchor>
  </compound>
  <compound kind="page">
    <name>md__home_runner_work_robowflex_robowflex__docs_markdown_installation</name>
    <title>Installation Instructions</title>
    <filename>md__home_runner_work_robowflex_robowflex__docs_markdown_installation.html</filename>
  </compound>
  <compound kind="page">
    <name>rviz</name>
    <title>Live Visualization with RViz</title>
    <filename>rviz.html</filename>
    <docanchor file="rviz.html">md__home_runner_work_robowflex_robowflex__docs_markdown_rviz</docanchor>
  </compound>
  <compound kind="page">
    <name>scripts</name>
    <title>Scripts</title>
    <filename>scripts.html</filename>
    <docanchor file="scripts.html">md__home_runner_work_robowflex_robowflex__docs_markdown_scripts</docanchor>
  </compound>
  <compound kind="page">
    <name>md__home_runner_work_robowflex_robowflex__docs_markdown_style</name>
    <title>Robowflex Code Style</title>
    <filename>md__home_runner_work_robowflex_robowflex__docs_markdown_style.html</filename>
  </compound>
  <compound kind="page">
    <name>doc</name>
    <title>Robowflex Documentation</title>
    <filename>doc.html</filename>
    <docanchor file="doc.html">md__home_runner_work_robowflex_robowflex__docs_README</docanchor>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Robowflex</title>
    <filename>index.html</filename>
    <docanchor file="index.html">home</docanchor>
  </compound>
</tagfile>
